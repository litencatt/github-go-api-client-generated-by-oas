/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// SimpleCommit Simple Commit
type SimpleCommit struct {
	Id string `json:"id"`
	TreeId string `json:"tree_id"`
	Message string `json:"message"`
	Timestamp time.Time `json:"timestamp"`
	Author NullableNullableSimpleCommitAuthor `json:"author"`
	Committer NullableNullableSimpleCommitAuthor `json:"committer"`
}

// NewSimpleCommit instantiates a new SimpleCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleCommit(id string, treeId string, message string, timestamp time.Time, author NullableNullableSimpleCommitAuthor, committer NullableNullableSimpleCommitAuthor) *SimpleCommit {
	this := SimpleCommit{}
	this.Id = id
	this.TreeId = treeId
	this.Message = message
	this.Timestamp = timestamp
	this.Author = author
	this.Committer = committer
	return &this
}

// NewSimpleCommitWithDefaults instantiates a new SimpleCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleCommitWithDefaults() *SimpleCommit {
	this := SimpleCommit{}
	return &this
}

// GetId returns the Id field value
func (o *SimpleCommit) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SimpleCommit) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SimpleCommit) SetId(v string) {
	o.Id = v
}

// GetTreeId returns the TreeId field value
func (o *SimpleCommit) GetTreeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TreeId
}

// GetTreeIdOk returns a tuple with the TreeId field value
// and a boolean to check if the value has been set.
func (o *SimpleCommit) GetTreeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TreeId, true
}

// SetTreeId sets field value
func (o *SimpleCommit) SetTreeId(v string) {
	o.TreeId = v
}

// GetMessage returns the Message field value
func (o *SimpleCommit) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *SimpleCommit) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *SimpleCommit) SetMessage(v string) {
	o.Message = v
}

// GetTimestamp returns the Timestamp field value
func (o *SimpleCommit) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *SimpleCommit) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *SimpleCommit) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetAuthor returns the Author field value
// If the value is explicit nil, the zero value for NullableSimpleCommitAuthor will be returned
func (o *SimpleCommit) GetAuthor() NullableSimpleCommitAuthor {
	if o == nil || o.Author.Get() == nil {
		var ret NullableSimpleCommitAuthor
		return ret
	}

	return *o.Author.Get()
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimpleCommit) GetAuthorOk() (*NullableSimpleCommitAuthor, bool) {
	if o == nil {
		return nil, false
	}
	return o.Author.Get(), o.Author.IsSet()
}

// SetAuthor sets field value
func (o *SimpleCommit) SetAuthor(v NullableSimpleCommitAuthor) {
	o.Author.Set(&v)
}

// GetCommitter returns the Committer field value
// If the value is explicit nil, the zero value for NullableSimpleCommitAuthor will be returned
func (o *SimpleCommit) GetCommitter() NullableSimpleCommitAuthor {
	if o == nil || o.Committer.Get() == nil {
		var ret NullableSimpleCommitAuthor
		return ret
	}

	return *o.Committer.Get()
}

// GetCommitterOk returns a tuple with the Committer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimpleCommit) GetCommitterOk() (*NullableSimpleCommitAuthor, bool) {
	if o == nil {
		return nil, false
	}
	return o.Committer.Get(), o.Committer.IsSet()
}

// SetCommitter sets field value
func (o *SimpleCommit) SetCommitter(v NullableSimpleCommitAuthor) {
	o.Committer.Set(&v)
}

func (o SimpleCommit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["tree_id"] = o.TreeId
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["author"] = o.Author.Get()
	}
	if true {
		toSerialize["committer"] = o.Committer.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSimpleCommit struct {
	value *SimpleCommit
	isSet bool
}

func (v NullableSimpleCommit) Get() *SimpleCommit {
	return v.value
}

func (v *NullableSimpleCommit) Set(val *SimpleCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleCommit(val *SimpleCommit) *NullableSimpleCommit {
	return &NullableSimpleCommit{value: val, isSet: true}
}

func (v NullableSimpleCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


