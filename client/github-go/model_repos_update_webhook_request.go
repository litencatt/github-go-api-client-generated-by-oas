/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReposUpdateWebhookRequest struct for ReposUpdateWebhookRequest
type ReposUpdateWebhookRequest struct {
	Config *ReposUpdateWebhookRequestConfig `json:"config,omitempty"`
	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
	Events []string `json:"events,omitempty"`
	// Determines a list of events to be added to the list of events that the Hook triggers for.
	AddEvents []string `json:"add_events,omitempty"`
	// Determines a list of events to be removed from the list of events that the Hook triggers for.
	RemoveEvents []string `json:"remove_events,omitempty"`
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
	Active *bool `json:"active,omitempty"`
}

// NewReposUpdateWebhookRequest instantiates a new ReposUpdateWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReposUpdateWebhookRequest() *ReposUpdateWebhookRequest {
	this := ReposUpdateWebhookRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// NewReposUpdateWebhookRequestWithDefaults instantiates a new ReposUpdateWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReposUpdateWebhookRequestWithDefaults() *ReposUpdateWebhookRequest {
	this := ReposUpdateWebhookRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ReposUpdateWebhookRequest) GetConfig() ReposUpdateWebhookRequestConfig {
	if o == nil || o.Config == nil {
		var ret ReposUpdateWebhookRequestConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateWebhookRequest) GetConfigOk() (*ReposUpdateWebhookRequestConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ReposUpdateWebhookRequest) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given ReposUpdateWebhookRequestConfig and assigns it to the Config field.
func (o *ReposUpdateWebhookRequest) SetConfig(v ReposUpdateWebhookRequestConfig) {
	o.Config = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *ReposUpdateWebhookRequest) GetEvents() []string {
	if o == nil || o.Events == nil {
		var ret []string
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateWebhookRequest) GetEventsOk() ([]string, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *ReposUpdateWebhookRequest) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *ReposUpdateWebhookRequest) SetEvents(v []string) {
	o.Events = v
}

// GetAddEvents returns the AddEvents field value if set, zero value otherwise.
func (o *ReposUpdateWebhookRequest) GetAddEvents() []string {
	if o == nil || o.AddEvents == nil {
		var ret []string
		return ret
	}
	return o.AddEvents
}

// GetAddEventsOk returns a tuple with the AddEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateWebhookRequest) GetAddEventsOk() ([]string, bool) {
	if o == nil || o.AddEvents == nil {
		return nil, false
	}
	return o.AddEvents, true
}

// HasAddEvents returns a boolean if a field has been set.
func (o *ReposUpdateWebhookRequest) HasAddEvents() bool {
	if o != nil && o.AddEvents != nil {
		return true
	}

	return false
}

// SetAddEvents gets a reference to the given []string and assigns it to the AddEvents field.
func (o *ReposUpdateWebhookRequest) SetAddEvents(v []string) {
	o.AddEvents = v
}

// GetRemoveEvents returns the RemoveEvents field value if set, zero value otherwise.
func (o *ReposUpdateWebhookRequest) GetRemoveEvents() []string {
	if o == nil || o.RemoveEvents == nil {
		var ret []string
		return ret
	}
	return o.RemoveEvents
}

// GetRemoveEventsOk returns a tuple with the RemoveEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateWebhookRequest) GetRemoveEventsOk() ([]string, bool) {
	if o == nil || o.RemoveEvents == nil {
		return nil, false
	}
	return o.RemoveEvents, true
}

// HasRemoveEvents returns a boolean if a field has been set.
func (o *ReposUpdateWebhookRequest) HasRemoveEvents() bool {
	if o != nil && o.RemoveEvents != nil {
		return true
	}

	return false
}

// SetRemoveEvents gets a reference to the given []string and assigns it to the RemoveEvents field.
func (o *ReposUpdateWebhookRequest) SetRemoveEvents(v []string) {
	o.RemoveEvents = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ReposUpdateWebhookRequest) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateWebhookRequest) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ReposUpdateWebhookRequest) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ReposUpdateWebhookRequest) SetActive(v bool) {
	o.Active = &v
}

func (o ReposUpdateWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.AddEvents != nil {
		toSerialize["add_events"] = o.AddEvents
	}
	if o.RemoveEvents != nil {
		toSerialize["remove_events"] = o.RemoveEvents
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	return json.Marshal(toSerialize)
}

type NullableReposUpdateWebhookRequest struct {
	value *ReposUpdateWebhookRequest
	isSet bool
}

func (v NullableReposUpdateWebhookRequest) Get() *ReposUpdateWebhookRequest {
	return v.value
}

func (v *NullableReposUpdateWebhookRequest) Set(val *ReposUpdateWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReposUpdateWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReposUpdateWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposUpdateWebhookRequest(val *ReposUpdateWebhookRequest) *NullableReposUpdateWebhookRequest {
	return &NullableReposUpdateWebhookRequest{value: val, isSet: true}
}

func (v NullableReposUpdateWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposUpdateWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


