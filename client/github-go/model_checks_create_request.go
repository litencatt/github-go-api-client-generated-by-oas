/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
	"fmt"
)

// ChecksCreateRequest - struct for ChecksCreateRequest
type ChecksCreateRequest struct {
	ChecksCreateRequestOneOf *ChecksCreateRequestOneOf
	ChecksCreateRequestOneOf1 *ChecksCreateRequestOneOf1
}

// ChecksCreateRequestOneOfAsChecksCreateRequest is a convenience function that returns ChecksCreateRequestOneOf wrapped in ChecksCreateRequest
func ChecksCreateRequestOneOfAsChecksCreateRequest(v *ChecksCreateRequestOneOf) ChecksCreateRequest {
	return ChecksCreateRequest{
		ChecksCreateRequestOneOf: v,
	}
}

// ChecksCreateRequestOneOf1AsChecksCreateRequest is a convenience function that returns ChecksCreateRequestOneOf1 wrapped in ChecksCreateRequest
func ChecksCreateRequestOneOf1AsChecksCreateRequest(v *ChecksCreateRequestOneOf1) ChecksCreateRequest {
	return ChecksCreateRequest{
		ChecksCreateRequestOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ChecksCreateRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ChecksCreateRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.ChecksCreateRequestOneOf)
	if err == nil {
		jsonChecksCreateRequestOneOf, _ := json.Marshal(dst.ChecksCreateRequestOneOf)
		if string(jsonChecksCreateRequestOneOf) == "{}" { // empty struct
			dst.ChecksCreateRequestOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ChecksCreateRequestOneOf = nil
	}

	// try to unmarshal data into ChecksCreateRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.ChecksCreateRequestOneOf1)
	if err == nil {
		jsonChecksCreateRequestOneOf1, _ := json.Marshal(dst.ChecksCreateRequestOneOf1)
		if string(jsonChecksCreateRequestOneOf1) == "{}" { // empty struct
			dst.ChecksCreateRequestOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ChecksCreateRequestOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ChecksCreateRequestOneOf = nil
		dst.ChecksCreateRequestOneOf1 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ChecksCreateRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ChecksCreateRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ChecksCreateRequest) MarshalJSON() ([]byte, error) {
	if src.ChecksCreateRequestOneOf != nil {
		return json.Marshal(&src.ChecksCreateRequestOneOf)
	}

	if src.ChecksCreateRequestOneOf1 != nil {
		return json.Marshal(&src.ChecksCreateRequestOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ChecksCreateRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ChecksCreateRequestOneOf != nil {
		return obj.ChecksCreateRequestOneOf
	}

	if obj.ChecksCreateRequestOneOf1 != nil {
		return obj.ChecksCreateRequestOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableChecksCreateRequest struct {
	value *ChecksCreateRequest
	isSet bool
}

func (v NullableChecksCreateRequest) Get() *ChecksCreateRequest {
	return v.value
}

func (v *NullableChecksCreateRequest) Set(val *ChecksCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChecksCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChecksCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChecksCreateRequest(val *ChecksCreateRequest) *NullableChecksCreateRequest {
	return &NullableChecksCreateRequest{value: val, isSet: true}
}

func (v NullableChecksCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChecksCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


