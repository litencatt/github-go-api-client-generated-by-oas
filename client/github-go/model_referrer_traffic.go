/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReferrerTraffic Referrer Traffic
type ReferrerTraffic struct {
	Referrer string `json:"referrer"`
	Count int32 `json:"count"`
	Uniques int32 `json:"uniques"`
}

// NewReferrerTraffic instantiates a new ReferrerTraffic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferrerTraffic(referrer string, count int32, uniques int32) *ReferrerTraffic {
	this := ReferrerTraffic{}
	this.Referrer = referrer
	this.Count = count
	this.Uniques = uniques
	return &this
}

// NewReferrerTrafficWithDefaults instantiates a new ReferrerTraffic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferrerTrafficWithDefaults() *ReferrerTraffic {
	this := ReferrerTraffic{}
	return &this
}

// GetReferrer returns the Referrer field value
func (o *ReferrerTraffic) GetReferrer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Referrer
}

// GetReferrerOk returns a tuple with the Referrer field value
// and a boolean to check if the value has been set.
func (o *ReferrerTraffic) GetReferrerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Referrer, true
}

// SetReferrer sets field value
func (o *ReferrerTraffic) SetReferrer(v string) {
	o.Referrer = v
}

// GetCount returns the Count field value
func (o *ReferrerTraffic) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ReferrerTraffic) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ReferrerTraffic) SetCount(v int32) {
	o.Count = v
}

// GetUniques returns the Uniques field value
func (o *ReferrerTraffic) GetUniques() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Uniques
}

// GetUniquesOk returns a tuple with the Uniques field value
// and a boolean to check if the value has been set.
func (o *ReferrerTraffic) GetUniquesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uniques, true
}

// SetUniques sets field value
func (o *ReferrerTraffic) SetUniques(v int32) {
	o.Uniques = v
}

func (o ReferrerTraffic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["referrer"] = o.Referrer
	}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["uniques"] = o.Uniques
	}
	return json.Marshal(toSerialize)
}

type NullableReferrerTraffic struct {
	value *ReferrerTraffic
	isSet bool
}

func (v NullableReferrerTraffic) Get() *ReferrerTraffic {
	return v.value
}

func (v *NullableReferrerTraffic) Set(val *ReferrerTraffic) {
	v.value = val
	v.isSet = true
}

func (v NullableReferrerTraffic) IsSet() bool {
	return v.isSet
}

func (v *NullableReferrerTraffic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferrerTraffic(val *ReferrerTraffic) *NullableReferrerTraffic {
	return &NullableReferrerTraffic{value: val, isSet: true}
}

func (v NullableReferrerTraffic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferrerTraffic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


