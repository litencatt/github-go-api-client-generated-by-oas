/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// GitCreateCommitRequestCommitter Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
type GitCreateCommitRequestCommitter struct {
	// The name of the author (or committer) of the commit
	Name *string `json:"name,omitempty"`
	// The email of the author (or committer) of the commit
	Email *string `json:"email,omitempty"`
	// Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Date *time.Time `json:"date,omitempty"`
}

// NewGitCreateCommitRequestCommitter instantiates a new GitCreateCommitRequestCommitter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitCreateCommitRequestCommitter() *GitCreateCommitRequestCommitter {
	this := GitCreateCommitRequestCommitter{}
	return &this
}

// NewGitCreateCommitRequestCommitterWithDefaults instantiates a new GitCreateCommitRequestCommitter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitCreateCommitRequestCommitterWithDefaults() *GitCreateCommitRequestCommitter {
	this := GitCreateCommitRequestCommitter{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GitCreateCommitRequestCommitter) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateCommitRequestCommitter) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GitCreateCommitRequestCommitter) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GitCreateCommitRequestCommitter) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *GitCreateCommitRequestCommitter) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateCommitRequestCommitter) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *GitCreateCommitRequestCommitter) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *GitCreateCommitRequestCommitter) SetEmail(v string) {
	o.Email = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *GitCreateCommitRequestCommitter) GetDate() time.Time {
	if o == nil || o.Date == nil {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateCommitRequestCommitter) GetDateOk() (*time.Time, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *GitCreateCommitRequestCommitter) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *GitCreateCommitRequestCommitter) SetDate(v time.Time) {
	o.Date = &v
}

func (o GitCreateCommitRequestCommitter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

type NullableGitCreateCommitRequestCommitter struct {
	value *GitCreateCommitRequestCommitter
	isSet bool
}

func (v NullableGitCreateCommitRequestCommitter) Get() *GitCreateCommitRequestCommitter {
	return v.value
}

func (v *NullableGitCreateCommitRequestCommitter) Set(val *GitCreateCommitRequestCommitter) {
	v.value = val
	v.isSet = true
}

func (v NullableGitCreateCommitRequestCommitter) IsSet() bool {
	return v.isSet
}

func (v *NullableGitCreateCommitRequestCommitter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitCreateCommitRequestCommitter(val *GitCreateCommitRequestCommitter) *NullableGitCreateCommitRequestCommitter {
	return &NullableGitCreateCommitRequestCommitter{value: val, isSet: true}
}

func (v NullableGitCreateCommitRequestCommitter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitCreateCommitRequestCommitter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


