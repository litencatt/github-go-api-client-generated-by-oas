/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// CombinedCommitStatus Combined Commit Status
type CombinedCommitStatus struct {
	State string `json:"state"`
	Statuses []SimpleCommitStatus `json:"statuses"`
	Sha string `json:"sha"`
	TotalCount int32 `json:"total_count"`
	Repository MinimalRepository `json:"repository"`
	CommitUrl string `json:"commit_url"`
	Url string `json:"url"`
}

// NewCombinedCommitStatus instantiates a new CombinedCommitStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCombinedCommitStatus(state string, statuses []SimpleCommitStatus, sha string, totalCount int32, repository MinimalRepository, commitUrl string, url string) *CombinedCommitStatus {
	this := CombinedCommitStatus{}
	this.State = state
	this.Statuses = statuses
	this.Sha = sha
	this.TotalCount = totalCount
	this.Repository = repository
	this.CommitUrl = commitUrl
	this.Url = url
	return &this
}

// NewCombinedCommitStatusWithDefaults instantiates a new CombinedCommitStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCombinedCommitStatusWithDefaults() *CombinedCommitStatus {
	this := CombinedCommitStatus{}
	return &this
}

// GetState returns the State field value
func (o *CombinedCommitStatus) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CombinedCommitStatus) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CombinedCommitStatus) SetState(v string) {
	o.State = v
}

// GetStatuses returns the Statuses field value
func (o *CombinedCommitStatus) GetStatuses() []SimpleCommitStatus {
	if o == nil {
		var ret []SimpleCommitStatus
		return ret
	}

	return o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value
// and a boolean to check if the value has been set.
func (o *CombinedCommitStatus) GetStatusesOk() ([]SimpleCommitStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.Statuses, true
}

// SetStatuses sets field value
func (o *CombinedCommitStatus) SetStatuses(v []SimpleCommitStatus) {
	o.Statuses = v
}

// GetSha returns the Sha field value
func (o *CombinedCommitStatus) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *CombinedCommitStatus) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *CombinedCommitStatus) SetSha(v string) {
	o.Sha = v
}

// GetTotalCount returns the TotalCount field value
func (o *CombinedCommitStatus) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *CombinedCommitStatus) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *CombinedCommitStatus) SetTotalCount(v int32) {
	o.TotalCount = v
}

// GetRepository returns the Repository field value
func (o *CombinedCommitStatus) GetRepository() MinimalRepository {
	if o == nil {
		var ret MinimalRepository
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *CombinedCommitStatus) GetRepositoryOk() (*MinimalRepository, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *CombinedCommitStatus) SetRepository(v MinimalRepository) {
	o.Repository = v
}

// GetCommitUrl returns the CommitUrl field value
func (o *CombinedCommitStatus) GetCommitUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitUrl
}

// GetCommitUrlOk returns a tuple with the CommitUrl field value
// and a boolean to check if the value has been set.
func (o *CombinedCommitStatus) GetCommitUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitUrl, true
}

// SetCommitUrl sets field value
func (o *CombinedCommitStatus) SetCommitUrl(v string) {
	o.CommitUrl = v
}

// GetUrl returns the Url field value
func (o *CombinedCommitStatus) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CombinedCommitStatus) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CombinedCommitStatus) SetUrl(v string) {
	o.Url = v
}

func (o CombinedCommitStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["statuses"] = o.Statuses
	}
	if true {
		toSerialize["sha"] = o.Sha
	}
	if true {
		toSerialize["total_count"] = o.TotalCount
	}
	if true {
		toSerialize["repository"] = o.Repository
	}
	if true {
		toSerialize["commit_url"] = o.CommitUrl
	}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableCombinedCommitStatus struct {
	value *CombinedCommitStatus
	isSet bool
}

func (v NullableCombinedCommitStatus) Get() *CombinedCommitStatus {
	return v.value
}

func (v *NullableCombinedCommitStatus) Set(val *CombinedCommitStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCombinedCommitStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCombinedCommitStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCombinedCommitStatus(val *CombinedCommitStatus) *NullableCombinedCommitStatus {
	return &NullableCombinedCommitStatus{value: val, isSet: true}
}

func (v NullableCombinedCommitStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCombinedCommitStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


