/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// Thread Thread
type Thread struct {
	Id string `json:"id"`
	Repository MinimalRepository `json:"repository"`
	Subject ThreadSubject `json:"subject"`
	Reason string `json:"reason"`
	Unread bool `json:"unread"`
	UpdatedAt string `json:"updated_at"`
	LastReadAt NullableString `json:"last_read_at"`
	Url string `json:"url"`
	SubscriptionUrl string `json:"subscription_url"`
}

// NewThread instantiates a new Thread object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThread(id string, repository MinimalRepository, subject ThreadSubject, reason string, unread bool, updatedAt string, lastReadAt NullableString, url string, subscriptionUrl string) *Thread {
	this := Thread{}
	this.Id = id
	this.Repository = repository
	this.Subject = subject
	this.Reason = reason
	this.Unread = unread
	this.UpdatedAt = updatedAt
	this.LastReadAt = lastReadAt
	this.Url = url
	this.SubscriptionUrl = subscriptionUrl
	return &this
}

// NewThreadWithDefaults instantiates a new Thread object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadWithDefaults() *Thread {
	this := Thread{}
	return &this
}

// GetId returns the Id field value
func (o *Thread) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Thread) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Thread) SetId(v string) {
	o.Id = v
}

// GetRepository returns the Repository field value
func (o *Thread) GetRepository() MinimalRepository {
	if o == nil {
		var ret MinimalRepository
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *Thread) GetRepositoryOk() (*MinimalRepository, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *Thread) SetRepository(v MinimalRepository) {
	o.Repository = v
}

// GetSubject returns the Subject field value
func (o *Thread) GetSubject() ThreadSubject {
	if o == nil {
		var ret ThreadSubject
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *Thread) GetSubjectOk() (*ThreadSubject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *Thread) SetSubject(v ThreadSubject) {
	o.Subject = v
}

// GetReason returns the Reason field value
func (o *Thread) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *Thread) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *Thread) SetReason(v string) {
	o.Reason = v
}

// GetUnread returns the Unread field value
func (o *Thread) GetUnread() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Unread
}

// GetUnreadOk returns a tuple with the Unread field value
// and a boolean to check if the value has been set.
func (o *Thread) GetUnreadOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unread, true
}

// SetUnread sets field value
func (o *Thread) SetUnread(v bool) {
	o.Unread = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Thread) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Thread) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Thread) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetLastReadAt returns the LastReadAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Thread) GetLastReadAt() string {
	if o == nil || o.LastReadAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.LastReadAt.Get()
}

// GetLastReadAtOk returns a tuple with the LastReadAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Thread) GetLastReadAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastReadAt.Get(), o.LastReadAt.IsSet()
}

// SetLastReadAt sets field value
func (o *Thread) SetLastReadAt(v string) {
	o.LastReadAt.Set(&v)
}

// GetUrl returns the Url field value
func (o *Thread) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Thread) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Thread) SetUrl(v string) {
	o.Url = v
}

// GetSubscriptionUrl returns the SubscriptionUrl field value
func (o *Thread) GetSubscriptionUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionUrl
}

// GetSubscriptionUrlOk returns a tuple with the SubscriptionUrl field value
// and a boolean to check if the value has been set.
func (o *Thread) GetSubscriptionUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionUrl, true
}

// SetSubscriptionUrl sets field value
func (o *Thread) SetSubscriptionUrl(v string) {
	o.SubscriptionUrl = v
}

func (o Thread) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["repository"] = o.Repository
	}
	if true {
		toSerialize["subject"] = o.Subject
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["unread"] = o.Unread
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["last_read_at"] = o.LastReadAt.Get()
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["subscription_url"] = o.SubscriptionUrl
	}
	return json.Marshal(toSerialize)
}

type NullableThread struct {
	value *Thread
	isSet bool
}

func (v NullableThread) Get() *Thread {
	return v.value
}

func (v *NullableThread) Set(val *Thread) {
	v.value = val
	v.isSet = true
}

func (v NullableThread) IsSet() bool {
	return v.isSet
}

func (v *NullableThread) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThread(val *Thread) *NullableThread {
	return &NullableThread{value: val, isSet: true}
}

func (v NullableThread) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThread) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


