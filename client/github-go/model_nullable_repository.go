/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// NullableRepository A git repository
type NullableRepository struct {
	// Unique identifier of the repository
	Id int32 `json:"id"`
	NodeId string `json:"node_id"`
	// The name of the repository.
	Name string `json:"name"`
	FullName string `json:"full_name"`
	License NullableNullableLicenseSimple `json:"license"`
	Organization NullableNullableSimpleUser `json:"organization,omitempty"`
	Forks int32 `json:"forks"`
	Permissions *RepositoryPermissions `json:"permissions,omitempty"`
	Owner SimpleUser `json:"owner"`
	// Whether the repository is private or public.
	Private bool `json:"private"`
	HtmlUrl string `json:"html_url"`
	Description NullableString `json:"description"`
	Fork bool `json:"fork"`
	Url string `json:"url"`
	ArchiveUrl string `json:"archive_url"`
	AssigneesUrl string `json:"assignees_url"`
	BlobsUrl string `json:"blobs_url"`
	BranchesUrl string `json:"branches_url"`
	CollaboratorsUrl string `json:"collaborators_url"`
	CommentsUrl string `json:"comments_url"`
	CommitsUrl string `json:"commits_url"`
	CompareUrl string `json:"compare_url"`
	ContentsUrl string `json:"contents_url"`
	ContributorsUrl string `json:"contributors_url"`
	DeploymentsUrl string `json:"deployments_url"`
	DownloadsUrl string `json:"downloads_url"`
	EventsUrl string `json:"events_url"`
	ForksUrl string `json:"forks_url"`
	GitCommitsUrl string `json:"git_commits_url"`
	GitRefsUrl string `json:"git_refs_url"`
	GitTagsUrl string `json:"git_tags_url"`
	GitUrl string `json:"git_url"`
	IssueCommentUrl string `json:"issue_comment_url"`
	IssueEventsUrl string `json:"issue_events_url"`
	IssuesUrl string `json:"issues_url"`
	KeysUrl string `json:"keys_url"`
	LabelsUrl string `json:"labels_url"`
	LanguagesUrl string `json:"languages_url"`
	MergesUrl string `json:"merges_url"`
	MilestonesUrl string `json:"milestones_url"`
	NotificationsUrl string `json:"notifications_url"`
	PullsUrl string `json:"pulls_url"`
	ReleasesUrl string `json:"releases_url"`
	SshUrl string `json:"ssh_url"`
	StargazersUrl string `json:"stargazers_url"`
	StatusesUrl string `json:"statuses_url"`
	SubscribersUrl string `json:"subscribers_url"`
	SubscriptionUrl string `json:"subscription_url"`
	TagsUrl string `json:"tags_url"`
	TeamsUrl string `json:"teams_url"`
	TreesUrl string `json:"trees_url"`
	CloneUrl string `json:"clone_url"`
	MirrorUrl NullableString `json:"mirror_url"`
	HooksUrl string `json:"hooks_url"`
	SvnUrl string `json:"svn_url"`
	Homepage NullableString `json:"homepage"`
	Language NullableString `json:"language"`
	ForksCount int32 `json:"forks_count"`
	StargazersCount int32 `json:"stargazers_count"`
	WatchersCount int32 `json:"watchers_count"`
	Size int32 `json:"size"`
	// The default branch of the repository.
	DefaultBranch string `json:"default_branch"`
	OpenIssuesCount int32 `json:"open_issues_count"`
	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate *bool `json:"is_template,omitempty"`
	Topics []string `json:"topics,omitempty"`
	// Whether issues are enabled.
	HasIssues bool `json:"has_issues"`
	// Whether projects are enabled.
	HasProjects bool `json:"has_projects"`
	// Whether the wiki is enabled.
	HasWiki bool `json:"has_wiki"`
	HasPages bool `json:"has_pages"`
	// Whether downloads are enabled.
	HasDownloads bool `json:"has_downloads"`
	// Whether the repository is archived.
	Archived bool `json:"archived"`
	// Returns whether or not this repository disabled.
	Disabled bool `json:"disabled"`
	// The repository visibility: public, private, or internal.
	Visibility *string `json:"visibility,omitempty"`
	PushedAt NullableTime `json:"pushed_at"`
	CreatedAt NullableTime `json:"created_at"`
	UpdatedAt NullableTime `json:"updated_at"`
	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	TemplateRepository NullableRepositoryTemplateRepository `json:"template_repository,omitempty"`
	TempCloneToken *string `json:"temp_clone_token,omitempty"`
	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	// Whether a squash merge commit can use the pull request title as default.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	// Whether to allow forking this repo
	AllowForking *bool `json:"allow_forking,omitempty"`
	SubscribersCount *int32 `json:"subscribers_count,omitempty"`
	NetworkCount *int32 `json:"network_count,omitempty"`
	OpenIssues int32 `json:"open_issues"`
	Watchers int32 `json:"watchers"`
	MasterBranch *string `json:"master_branch,omitempty"`
	StarredAt *string `json:"starred_at,omitempty"`
}

// NewNullableRepository instantiates a new NullableRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNullableRepository(id int32, nodeId string, name string, fullName string, license NullableNullableLicenseSimple, forks int32, owner SimpleUser, private bool, htmlUrl string, description NullableString, fork bool, url string, archiveUrl string, assigneesUrl string, blobsUrl string, branchesUrl string, collaboratorsUrl string, commentsUrl string, commitsUrl string, compareUrl string, contentsUrl string, contributorsUrl string, deploymentsUrl string, downloadsUrl string, eventsUrl string, forksUrl string, gitCommitsUrl string, gitRefsUrl string, gitTagsUrl string, gitUrl string, issueCommentUrl string, issueEventsUrl string, issuesUrl string, keysUrl string, labelsUrl string, languagesUrl string, mergesUrl string, milestonesUrl string, notificationsUrl string, pullsUrl string, releasesUrl string, sshUrl string, stargazersUrl string, statusesUrl string, subscribersUrl string, subscriptionUrl string, tagsUrl string, teamsUrl string, treesUrl string, cloneUrl string, mirrorUrl NullableString, hooksUrl string, svnUrl string, homepage NullableString, language NullableString, forksCount int32, stargazersCount int32, watchersCount int32, size int32, defaultBranch string, openIssuesCount int32, hasIssues bool, hasProjects bool, hasWiki bool, hasPages bool, hasDownloads bool, archived bool, disabled bool, pushedAt NullableTime, createdAt NullableTime, updatedAt NullableTime, openIssues int32, watchers int32) *NullableRepository {
	this := NullableRepository{}
	this.Id = id
	this.NodeId = nodeId
	this.Name = name
	this.FullName = fullName
	this.License = license
	this.Forks = forks
	this.Owner = owner
	this.Private = private
	this.HtmlUrl = htmlUrl
	this.Description = description
	this.Fork = fork
	this.Url = url
	this.ArchiveUrl = archiveUrl
	this.AssigneesUrl = assigneesUrl
	this.BlobsUrl = blobsUrl
	this.BranchesUrl = branchesUrl
	this.CollaboratorsUrl = collaboratorsUrl
	this.CommentsUrl = commentsUrl
	this.CommitsUrl = commitsUrl
	this.CompareUrl = compareUrl
	this.ContentsUrl = contentsUrl
	this.ContributorsUrl = contributorsUrl
	this.DeploymentsUrl = deploymentsUrl
	this.DownloadsUrl = downloadsUrl
	this.EventsUrl = eventsUrl
	this.ForksUrl = forksUrl
	this.GitCommitsUrl = gitCommitsUrl
	this.GitRefsUrl = gitRefsUrl
	this.GitTagsUrl = gitTagsUrl
	this.GitUrl = gitUrl
	this.IssueCommentUrl = issueCommentUrl
	this.IssueEventsUrl = issueEventsUrl
	this.IssuesUrl = issuesUrl
	this.KeysUrl = keysUrl
	this.LabelsUrl = labelsUrl
	this.LanguagesUrl = languagesUrl
	this.MergesUrl = mergesUrl
	this.MilestonesUrl = milestonesUrl
	this.NotificationsUrl = notificationsUrl
	this.PullsUrl = pullsUrl
	this.ReleasesUrl = releasesUrl
	this.SshUrl = sshUrl
	this.StargazersUrl = stargazersUrl
	this.StatusesUrl = statusesUrl
	this.SubscribersUrl = subscribersUrl
	this.SubscriptionUrl = subscriptionUrl
	this.TagsUrl = tagsUrl
	this.TeamsUrl = teamsUrl
	this.TreesUrl = treesUrl
	this.CloneUrl = cloneUrl
	this.MirrorUrl = mirrorUrl
	this.HooksUrl = hooksUrl
	this.SvnUrl = svnUrl
	this.Homepage = homepage
	this.Language = language
	this.ForksCount = forksCount
	this.StargazersCount = stargazersCount
	this.WatchersCount = watchersCount
	this.Size = size
	this.DefaultBranch = defaultBranch
	this.OpenIssuesCount = openIssuesCount
	var isTemplate bool = false
	this.IsTemplate = &isTemplate
	this.HasIssues = hasIssues
	this.HasProjects = hasProjects
	this.HasWiki = hasWiki
	this.HasPages = hasPages
	this.HasDownloads = hasDownloads
	this.Archived = archived
	this.Disabled = disabled
	var visibility string = "public"
	this.Visibility = &visibility
	this.PushedAt = pushedAt
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	var allowRebaseMerge bool = true
	this.AllowRebaseMerge = &allowRebaseMerge
	var allowSquashMerge bool = true
	this.AllowSquashMerge = &allowSquashMerge
	var allowAutoMerge bool = false
	this.AllowAutoMerge = &allowAutoMerge
	var deleteBranchOnMerge bool = false
	this.DeleteBranchOnMerge = &deleteBranchOnMerge
	var allowUpdateBranch bool = false
	this.AllowUpdateBranch = &allowUpdateBranch
	var useSquashPrTitleAsDefault bool = false
	this.UseSquashPrTitleAsDefault = &useSquashPrTitleAsDefault
	var allowMergeCommit bool = true
	this.AllowMergeCommit = &allowMergeCommit
	this.OpenIssues = openIssues
	this.Watchers = watchers
	return &this
}

// NewNullableRepositoryWithDefaults instantiates a new NullableRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNullableRepositoryWithDefaults() *NullableRepository {
	this := NullableRepository{}
	var private bool = false
	this.Private = private
	var isTemplate bool = false
	this.IsTemplate = &isTemplate
	var hasIssues bool = true
	this.HasIssues = hasIssues
	var hasProjects bool = true
	this.HasProjects = hasProjects
	var hasWiki bool = true
	this.HasWiki = hasWiki
	var hasDownloads bool = true
	this.HasDownloads = hasDownloads
	var archived bool = false
	this.Archived = archived
	var visibility string = "public"
	this.Visibility = &visibility
	var allowRebaseMerge bool = true
	this.AllowRebaseMerge = &allowRebaseMerge
	var allowSquashMerge bool = true
	this.AllowSquashMerge = &allowSquashMerge
	var allowAutoMerge bool = false
	this.AllowAutoMerge = &allowAutoMerge
	var deleteBranchOnMerge bool = false
	this.DeleteBranchOnMerge = &deleteBranchOnMerge
	var allowUpdateBranch bool = false
	this.AllowUpdateBranch = &allowUpdateBranch
	var useSquashPrTitleAsDefault bool = false
	this.UseSquashPrTitleAsDefault = &useSquashPrTitleAsDefault
	var allowMergeCommit bool = true
	this.AllowMergeCommit = &allowMergeCommit
	return &this
}

// GetId returns the Id field value
func (o *NullableRepository) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NullableRepository) SetId(v int32) {
	o.Id = v
}

// GetNodeId returns the NodeId field value
func (o *NullableRepository) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *NullableRepository) SetNodeId(v string) {
	o.NodeId = v
}

// GetName returns the Name field value
func (o *NullableRepository) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NullableRepository) SetName(v string) {
	o.Name = v
}

// GetFullName returns the FullName field value
func (o *NullableRepository) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *NullableRepository) SetFullName(v string) {
	o.FullName = v
}

// GetLicense returns the License field value
// If the value is explicit nil, the zero value for NullableLicenseSimple will be returned
func (o *NullableRepository) GetLicense() NullableLicenseSimple {
	if o == nil || o.License.Get() == nil {
		var ret NullableLicenseSimple
		return ret
	}

	return *o.License.Get()
}

// GetLicenseOk returns a tuple with the License field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NullableRepository) GetLicenseOk() (*NullableLicenseSimple, bool) {
	if o == nil {
		return nil, false
	}
	return o.License.Get(), o.License.IsSet()
}

// SetLicense sets field value
func (o *NullableRepository) SetLicense(v NullableLicenseSimple) {
	o.License.Set(&v)
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NullableRepository) GetOrganization() NullableSimpleUser {
	if o == nil || o.Organization.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NullableRepository) GetOrganizationOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *NullableRepository) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableNullableSimpleUser and assigns it to the Organization field.
func (o *NullableRepository) SetOrganization(v NullableSimpleUser) {
	o.Organization.Set(&v)
}
// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *NullableRepository) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *NullableRepository) UnsetOrganization() {
	o.Organization.Unset()
}

// GetForks returns the Forks field value
func (o *NullableRepository) GetForks() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Forks
}

// GetForksOk returns a tuple with the Forks field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetForksOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Forks, true
}

// SetForks sets field value
func (o *NullableRepository) SetForks(v int32) {
	o.Forks = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *NullableRepository) GetPermissions() RepositoryPermissions {
	if o == nil || o.Permissions == nil {
		var ret RepositoryPermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetPermissionsOk() (*RepositoryPermissions, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *NullableRepository) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given RepositoryPermissions and assigns it to the Permissions field.
func (o *NullableRepository) SetPermissions(v RepositoryPermissions) {
	o.Permissions = &v
}

// GetOwner returns the Owner field value
func (o *NullableRepository) GetOwner() SimpleUser {
	if o == nil {
		var ret SimpleUser
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetOwnerOk() (*SimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *NullableRepository) SetOwner(v SimpleUser) {
	o.Owner = v
}

// GetPrivate returns the Private field value
func (o *NullableRepository) GetPrivate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Private
}

// GetPrivateOk returns a tuple with the Private field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetPrivateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Private, true
}

// SetPrivate sets field value
func (o *NullableRepository) SetPrivate(v bool) {
	o.Private = v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *NullableRepository) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *NullableRepository) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NullableRepository) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NullableRepository) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *NullableRepository) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetFork returns the Fork field value
func (o *NullableRepository) GetFork() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Fork
}

// GetForkOk returns a tuple with the Fork field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetForkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fork, true
}

// SetFork sets field value
func (o *NullableRepository) SetFork(v bool) {
	o.Fork = v
}

// GetUrl returns the Url field value
func (o *NullableRepository) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *NullableRepository) SetUrl(v string) {
	o.Url = v
}

// GetArchiveUrl returns the ArchiveUrl field value
func (o *NullableRepository) GetArchiveUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArchiveUrl
}

// GetArchiveUrlOk returns a tuple with the ArchiveUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetArchiveUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchiveUrl, true
}

// SetArchiveUrl sets field value
func (o *NullableRepository) SetArchiveUrl(v string) {
	o.ArchiveUrl = v
}

// GetAssigneesUrl returns the AssigneesUrl field value
func (o *NullableRepository) GetAssigneesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssigneesUrl
}

// GetAssigneesUrlOk returns a tuple with the AssigneesUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetAssigneesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssigneesUrl, true
}

// SetAssigneesUrl sets field value
func (o *NullableRepository) SetAssigneesUrl(v string) {
	o.AssigneesUrl = v
}

// GetBlobsUrl returns the BlobsUrl field value
func (o *NullableRepository) GetBlobsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlobsUrl
}

// GetBlobsUrlOk returns a tuple with the BlobsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetBlobsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlobsUrl, true
}

// SetBlobsUrl sets field value
func (o *NullableRepository) SetBlobsUrl(v string) {
	o.BlobsUrl = v
}

// GetBranchesUrl returns the BranchesUrl field value
func (o *NullableRepository) GetBranchesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BranchesUrl
}

// GetBranchesUrlOk returns a tuple with the BranchesUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetBranchesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BranchesUrl, true
}

// SetBranchesUrl sets field value
func (o *NullableRepository) SetBranchesUrl(v string) {
	o.BranchesUrl = v
}

// GetCollaboratorsUrl returns the CollaboratorsUrl field value
func (o *NullableRepository) GetCollaboratorsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CollaboratorsUrl
}

// GetCollaboratorsUrlOk returns a tuple with the CollaboratorsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetCollaboratorsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollaboratorsUrl, true
}

// SetCollaboratorsUrl sets field value
func (o *NullableRepository) SetCollaboratorsUrl(v string) {
	o.CollaboratorsUrl = v
}

// GetCommentsUrl returns the CommentsUrl field value
func (o *NullableRepository) GetCommentsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommentsUrl
}

// GetCommentsUrlOk returns a tuple with the CommentsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetCommentsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommentsUrl, true
}

// SetCommentsUrl sets field value
func (o *NullableRepository) SetCommentsUrl(v string) {
	o.CommentsUrl = v
}

// GetCommitsUrl returns the CommitsUrl field value
func (o *NullableRepository) GetCommitsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitsUrl
}

// GetCommitsUrlOk returns a tuple with the CommitsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetCommitsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitsUrl, true
}

// SetCommitsUrl sets field value
func (o *NullableRepository) SetCommitsUrl(v string) {
	o.CommitsUrl = v
}

// GetCompareUrl returns the CompareUrl field value
func (o *NullableRepository) GetCompareUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompareUrl
}

// GetCompareUrlOk returns a tuple with the CompareUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetCompareUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompareUrl, true
}

// SetCompareUrl sets field value
func (o *NullableRepository) SetCompareUrl(v string) {
	o.CompareUrl = v
}

// GetContentsUrl returns the ContentsUrl field value
func (o *NullableRepository) GetContentsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentsUrl
}

// GetContentsUrlOk returns a tuple with the ContentsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetContentsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentsUrl, true
}

// SetContentsUrl sets field value
func (o *NullableRepository) SetContentsUrl(v string) {
	o.ContentsUrl = v
}

// GetContributorsUrl returns the ContributorsUrl field value
func (o *NullableRepository) GetContributorsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContributorsUrl
}

// GetContributorsUrlOk returns a tuple with the ContributorsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetContributorsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContributorsUrl, true
}

// SetContributorsUrl sets field value
func (o *NullableRepository) SetContributorsUrl(v string) {
	o.ContributorsUrl = v
}

// GetDeploymentsUrl returns the DeploymentsUrl field value
func (o *NullableRepository) GetDeploymentsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploymentsUrl
}

// GetDeploymentsUrlOk returns a tuple with the DeploymentsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetDeploymentsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentsUrl, true
}

// SetDeploymentsUrl sets field value
func (o *NullableRepository) SetDeploymentsUrl(v string) {
	o.DeploymentsUrl = v
}

// GetDownloadsUrl returns the DownloadsUrl field value
func (o *NullableRepository) GetDownloadsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DownloadsUrl
}

// GetDownloadsUrlOk returns a tuple with the DownloadsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetDownloadsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DownloadsUrl, true
}

// SetDownloadsUrl sets field value
func (o *NullableRepository) SetDownloadsUrl(v string) {
	o.DownloadsUrl = v
}

// GetEventsUrl returns the EventsUrl field value
func (o *NullableRepository) GetEventsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventsUrl
}

// GetEventsUrlOk returns a tuple with the EventsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetEventsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventsUrl, true
}

// SetEventsUrl sets field value
func (o *NullableRepository) SetEventsUrl(v string) {
	o.EventsUrl = v
}

// GetForksUrl returns the ForksUrl field value
func (o *NullableRepository) GetForksUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForksUrl
}

// GetForksUrlOk returns a tuple with the ForksUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetForksUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForksUrl, true
}

// SetForksUrl sets field value
func (o *NullableRepository) SetForksUrl(v string) {
	o.ForksUrl = v
}

// GetGitCommitsUrl returns the GitCommitsUrl field value
func (o *NullableRepository) GetGitCommitsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitCommitsUrl
}

// GetGitCommitsUrlOk returns a tuple with the GitCommitsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetGitCommitsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitCommitsUrl, true
}

// SetGitCommitsUrl sets field value
func (o *NullableRepository) SetGitCommitsUrl(v string) {
	o.GitCommitsUrl = v
}

// GetGitRefsUrl returns the GitRefsUrl field value
func (o *NullableRepository) GetGitRefsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitRefsUrl
}

// GetGitRefsUrlOk returns a tuple with the GitRefsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetGitRefsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitRefsUrl, true
}

// SetGitRefsUrl sets field value
func (o *NullableRepository) SetGitRefsUrl(v string) {
	o.GitRefsUrl = v
}

// GetGitTagsUrl returns the GitTagsUrl field value
func (o *NullableRepository) GetGitTagsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitTagsUrl
}

// GetGitTagsUrlOk returns a tuple with the GitTagsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetGitTagsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitTagsUrl, true
}

// SetGitTagsUrl sets field value
func (o *NullableRepository) SetGitTagsUrl(v string) {
	o.GitTagsUrl = v
}

// GetGitUrl returns the GitUrl field value
func (o *NullableRepository) GetGitUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitUrl
}

// GetGitUrlOk returns a tuple with the GitUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetGitUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitUrl, true
}

// SetGitUrl sets field value
func (o *NullableRepository) SetGitUrl(v string) {
	o.GitUrl = v
}

// GetIssueCommentUrl returns the IssueCommentUrl field value
func (o *NullableRepository) GetIssueCommentUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueCommentUrl
}

// GetIssueCommentUrlOk returns a tuple with the IssueCommentUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetIssueCommentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueCommentUrl, true
}

// SetIssueCommentUrl sets field value
func (o *NullableRepository) SetIssueCommentUrl(v string) {
	o.IssueCommentUrl = v
}

// GetIssueEventsUrl returns the IssueEventsUrl field value
func (o *NullableRepository) GetIssueEventsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueEventsUrl
}

// GetIssueEventsUrlOk returns a tuple with the IssueEventsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetIssueEventsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueEventsUrl, true
}

// SetIssueEventsUrl sets field value
func (o *NullableRepository) SetIssueEventsUrl(v string) {
	o.IssueEventsUrl = v
}

// GetIssuesUrl returns the IssuesUrl field value
func (o *NullableRepository) GetIssuesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuesUrl
}

// GetIssuesUrlOk returns a tuple with the IssuesUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetIssuesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuesUrl, true
}

// SetIssuesUrl sets field value
func (o *NullableRepository) SetIssuesUrl(v string) {
	o.IssuesUrl = v
}

// GetKeysUrl returns the KeysUrl field value
func (o *NullableRepository) GetKeysUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeysUrl
}

// GetKeysUrlOk returns a tuple with the KeysUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetKeysUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeysUrl, true
}

// SetKeysUrl sets field value
func (o *NullableRepository) SetKeysUrl(v string) {
	o.KeysUrl = v
}

// GetLabelsUrl returns the LabelsUrl field value
func (o *NullableRepository) GetLabelsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LabelsUrl
}

// GetLabelsUrlOk returns a tuple with the LabelsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetLabelsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LabelsUrl, true
}

// SetLabelsUrl sets field value
func (o *NullableRepository) SetLabelsUrl(v string) {
	o.LabelsUrl = v
}

// GetLanguagesUrl returns the LanguagesUrl field value
func (o *NullableRepository) GetLanguagesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LanguagesUrl
}

// GetLanguagesUrlOk returns a tuple with the LanguagesUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetLanguagesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LanguagesUrl, true
}

// SetLanguagesUrl sets field value
func (o *NullableRepository) SetLanguagesUrl(v string) {
	o.LanguagesUrl = v
}

// GetMergesUrl returns the MergesUrl field value
func (o *NullableRepository) GetMergesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MergesUrl
}

// GetMergesUrlOk returns a tuple with the MergesUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetMergesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MergesUrl, true
}

// SetMergesUrl sets field value
func (o *NullableRepository) SetMergesUrl(v string) {
	o.MergesUrl = v
}

// GetMilestonesUrl returns the MilestonesUrl field value
func (o *NullableRepository) GetMilestonesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MilestonesUrl
}

// GetMilestonesUrlOk returns a tuple with the MilestonesUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetMilestonesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MilestonesUrl, true
}

// SetMilestonesUrl sets field value
func (o *NullableRepository) SetMilestonesUrl(v string) {
	o.MilestonesUrl = v
}

// GetNotificationsUrl returns the NotificationsUrl field value
func (o *NullableRepository) GetNotificationsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationsUrl
}

// GetNotificationsUrlOk returns a tuple with the NotificationsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetNotificationsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationsUrl, true
}

// SetNotificationsUrl sets field value
func (o *NullableRepository) SetNotificationsUrl(v string) {
	o.NotificationsUrl = v
}

// GetPullsUrl returns the PullsUrl field value
func (o *NullableRepository) GetPullsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PullsUrl
}

// GetPullsUrlOk returns a tuple with the PullsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetPullsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PullsUrl, true
}

// SetPullsUrl sets field value
func (o *NullableRepository) SetPullsUrl(v string) {
	o.PullsUrl = v
}

// GetReleasesUrl returns the ReleasesUrl field value
func (o *NullableRepository) GetReleasesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleasesUrl
}

// GetReleasesUrlOk returns a tuple with the ReleasesUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetReleasesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleasesUrl, true
}

// SetReleasesUrl sets field value
func (o *NullableRepository) SetReleasesUrl(v string) {
	o.ReleasesUrl = v
}

// GetSshUrl returns the SshUrl field value
func (o *NullableRepository) GetSshUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SshUrl
}

// GetSshUrlOk returns a tuple with the SshUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetSshUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SshUrl, true
}

// SetSshUrl sets field value
func (o *NullableRepository) SetSshUrl(v string) {
	o.SshUrl = v
}

// GetStargazersUrl returns the StargazersUrl field value
func (o *NullableRepository) GetStargazersUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StargazersUrl
}

// GetStargazersUrlOk returns a tuple with the StargazersUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetStargazersUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StargazersUrl, true
}

// SetStargazersUrl sets field value
func (o *NullableRepository) SetStargazersUrl(v string) {
	o.StargazersUrl = v
}

// GetStatusesUrl returns the StatusesUrl field value
func (o *NullableRepository) GetStatusesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusesUrl
}

// GetStatusesUrlOk returns a tuple with the StatusesUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetStatusesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusesUrl, true
}

// SetStatusesUrl sets field value
func (o *NullableRepository) SetStatusesUrl(v string) {
	o.StatusesUrl = v
}

// GetSubscribersUrl returns the SubscribersUrl field value
func (o *NullableRepository) GetSubscribersUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscribersUrl
}

// GetSubscribersUrlOk returns a tuple with the SubscribersUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetSubscribersUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscribersUrl, true
}

// SetSubscribersUrl sets field value
func (o *NullableRepository) SetSubscribersUrl(v string) {
	o.SubscribersUrl = v
}

// GetSubscriptionUrl returns the SubscriptionUrl field value
func (o *NullableRepository) GetSubscriptionUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionUrl
}

// GetSubscriptionUrlOk returns a tuple with the SubscriptionUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetSubscriptionUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionUrl, true
}

// SetSubscriptionUrl sets field value
func (o *NullableRepository) SetSubscriptionUrl(v string) {
	o.SubscriptionUrl = v
}

// GetTagsUrl returns the TagsUrl field value
func (o *NullableRepository) GetTagsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TagsUrl
}

// GetTagsUrlOk returns a tuple with the TagsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetTagsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TagsUrl, true
}

// SetTagsUrl sets field value
func (o *NullableRepository) SetTagsUrl(v string) {
	o.TagsUrl = v
}

// GetTeamsUrl returns the TeamsUrl field value
func (o *NullableRepository) GetTeamsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamsUrl
}

// GetTeamsUrlOk returns a tuple with the TeamsUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetTeamsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamsUrl, true
}

// SetTeamsUrl sets field value
func (o *NullableRepository) SetTeamsUrl(v string) {
	o.TeamsUrl = v
}

// GetTreesUrl returns the TreesUrl field value
func (o *NullableRepository) GetTreesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TreesUrl
}

// GetTreesUrlOk returns a tuple with the TreesUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetTreesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TreesUrl, true
}

// SetTreesUrl sets field value
func (o *NullableRepository) SetTreesUrl(v string) {
	o.TreesUrl = v
}

// GetCloneUrl returns the CloneUrl field value
func (o *NullableRepository) GetCloneUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloneUrl
}

// GetCloneUrlOk returns a tuple with the CloneUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetCloneUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloneUrl, true
}

// SetCloneUrl sets field value
func (o *NullableRepository) SetCloneUrl(v string) {
	o.CloneUrl = v
}

// GetMirrorUrl returns the MirrorUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NullableRepository) GetMirrorUrl() string {
	if o == nil || o.MirrorUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.MirrorUrl.Get()
}

// GetMirrorUrlOk returns a tuple with the MirrorUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NullableRepository) GetMirrorUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MirrorUrl.Get(), o.MirrorUrl.IsSet()
}

// SetMirrorUrl sets field value
func (o *NullableRepository) SetMirrorUrl(v string) {
	o.MirrorUrl.Set(&v)
}

// GetHooksUrl returns the HooksUrl field value
func (o *NullableRepository) GetHooksUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HooksUrl
}

// GetHooksUrlOk returns a tuple with the HooksUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetHooksUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HooksUrl, true
}

// SetHooksUrl sets field value
func (o *NullableRepository) SetHooksUrl(v string) {
	o.HooksUrl = v
}

// GetSvnUrl returns the SvnUrl field value
func (o *NullableRepository) GetSvnUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SvnUrl
}

// GetSvnUrlOk returns a tuple with the SvnUrl field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetSvnUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SvnUrl, true
}

// SetSvnUrl sets field value
func (o *NullableRepository) SetSvnUrl(v string) {
	o.SvnUrl = v
}

// GetHomepage returns the Homepage field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NullableRepository) GetHomepage() string {
	if o == nil || o.Homepage.Get() == nil {
		var ret string
		return ret
	}

	return *o.Homepage.Get()
}

// GetHomepageOk returns a tuple with the Homepage field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NullableRepository) GetHomepageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Homepage.Get(), o.Homepage.IsSet()
}

// SetHomepage sets field value
func (o *NullableRepository) SetHomepage(v string) {
	o.Homepage.Set(&v)
}

// GetLanguage returns the Language field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NullableRepository) GetLanguage() string {
	if o == nil || o.Language.Get() == nil {
		var ret string
		return ret
	}

	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NullableRepository) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// SetLanguage sets field value
func (o *NullableRepository) SetLanguage(v string) {
	o.Language.Set(&v)
}

// GetForksCount returns the ForksCount field value
func (o *NullableRepository) GetForksCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ForksCount
}

// GetForksCountOk returns a tuple with the ForksCount field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetForksCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForksCount, true
}

// SetForksCount sets field value
func (o *NullableRepository) SetForksCount(v int32) {
	o.ForksCount = v
}

// GetStargazersCount returns the StargazersCount field value
func (o *NullableRepository) GetStargazersCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StargazersCount
}

// GetStargazersCountOk returns a tuple with the StargazersCount field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetStargazersCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StargazersCount, true
}

// SetStargazersCount sets field value
func (o *NullableRepository) SetStargazersCount(v int32) {
	o.StargazersCount = v
}

// GetWatchersCount returns the WatchersCount field value
func (o *NullableRepository) GetWatchersCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WatchersCount
}

// GetWatchersCountOk returns a tuple with the WatchersCount field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetWatchersCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WatchersCount, true
}

// SetWatchersCount sets field value
func (o *NullableRepository) SetWatchersCount(v int32) {
	o.WatchersCount = v
}

// GetSize returns the Size field value
func (o *NullableRepository) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *NullableRepository) SetSize(v int32) {
	o.Size = v
}

// GetDefaultBranch returns the DefaultBranch field value
func (o *NullableRepository) GetDefaultBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultBranch
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetDefaultBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultBranch, true
}

// SetDefaultBranch sets field value
func (o *NullableRepository) SetDefaultBranch(v string) {
	o.DefaultBranch = v
}

// GetOpenIssuesCount returns the OpenIssuesCount field value
func (o *NullableRepository) GetOpenIssuesCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OpenIssuesCount
}

// GetOpenIssuesCountOk returns a tuple with the OpenIssuesCount field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetOpenIssuesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenIssuesCount, true
}

// SetOpenIssuesCount sets field value
func (o *NullableRepository) SetOpenIssuesCount(v int32) {
	o.OpenIssuesCount = v
}

// GetIsTemplate returns the IsTemplate field value if set, zero value otherwise.
func (o *NullableRepository) GetIsTemplate() bool {
	if o == nil || o.IsTemplate == nil {
		var ret bool
		return ret
	}
	return *o.IsTemplate
}

// GetIsTemplateOk returns a tuple with the IsTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetIsTemplateOk() (*bool, bool) {
	if o == nil || o.IsTemplate == nil {
		return nil, false
	}
	return o.IsTemplate, true
}

// HasIsTemplate returns a boolean if a field has been set.
func (o *NullableRepository) HasIsTemplate() bool {
	if o != nil && o.IsTemplate != nil {
		return true
	}

	return false
}

// SetIsTemplate gets a reference to the given bool and assigns it to the IsTemplate field.
func (o *NullableRepository) SetIsTemplate(v bool) {
	o.IsTemplate = &v
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *NullableRepository) GetTopics() []string {
	if o == nil || o.Topics == nil {
		var ret []string
		return ret
	}
	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetTopicsOk() ([]string, bool) {
	if o == nil || o.Topics == nil {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *NullableRepository) HasTopics() bool {
	if o != nil && o.Topics != nil {
		return true
	}

	return false
}

// SetTopics gets a reference to the given []string and assigns it to the Topics field.
func (o *NullableRepository) SetTopics(v []string) {
	o.Topics = v
}

// GetHasIssues returns the HasIssues field value
func (o *NullableRepository) GetHasIssues() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasIssues
}

// GetHasIssuesOk returns a tuple with the HasIssues field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetHasIssuesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasIssues, true
}

// SetHasIssues sets field value
func (o *NullableRepository) SetHasIssues(v bool) {
	o.HasIssues = v
}

// GetHasProjects returns the HasProjects field value
func (o *NullableRepository) GetHasProjects() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasProjects
}

// GetHasProjectsOk returns a tuple with the HasProjects field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetHasProjectsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasProjects, true
}

// SetHasProjects sets field value
func (o *NullableRepository) SetHasProjects(v bool) {
	o.HasProjects = v
}

// GetHasWiki returns the HasWiki field value
func (o *NullableRepository) GetHasWiki() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasWiki
}

// GetHasWikiOk returns a tuple with the HasWiki field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetHasWikiOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasWiki, true
}

// SetHasWiki sets field value
func (o *NullableRepository) SetHasWiki(v bool) {
	o.HasWiki = v
}

// GetHasPages returns the HasPages field value
func (o *NullableRepository) GetHasPages() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasPages
}

// GetHasPagesOk returns a tuple with the HasPages field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetHasPagesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasPages, true
}

// SetHasPages sets field value
func (o *NullableRepository) SetHasPages(v bool) {
	o.HasPages = v
}

// GetHasDownloads returns the HasDownloads field value
func (o *NullableRepository) GetHasDownloads() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasDownloads
}

// GetHasDownloadsOk returns a tuple with the HasDownloads field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetHasDownloadsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasDownloads, true
}

// SetHasDownloads sets field value
func (o *NullableRepository) SetHasDownloads(v bool) {
	o.HasDownloads = v
}

// GetArchived returns the Archived field value
func (o *NullableRepository) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *NullableRepository) SetArchived(v bool) {
	o.Archived = v
}

// GetDisabled returns the Disabled field value
func (o *NullableRepository) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *NullableRepository) SetDisabled(v bool) {
	o.Disabled = v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *NullableRepository) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *NullableRepository) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *NullableRepository) SetVisibility(v string) {
	o.Visibility = &v
}

// GetPushedAt returns the PushedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *NullableRepository) GetPushedAt() time.Time {
	if o == nil || o.PushedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.PushedAt.Get()
}

// GetPushedAtOk returns a tuple with the PushedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NullableRepository) GetPushedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.PushedAt.Get(), o.PushedAt.IsSet()
}

// SetPushedAt sets field value
func (o *NullableRepository) SetPushedAt(v time.Time) {
	o.PushedAt.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *NullableRepository) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NullableRepository) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// SetCreatedAt sets field value
func (o *NullableRepository) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// GetUpdatedAt returns the UpdatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *NullableRepository) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NullableRepository) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// SetUpdatedAt sets field value
func (o *NullableRepository) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// GetAllowRebaseMerge returns the AllowRebaseMerge field value if set, zero value otherwise.
func (o *NullableRepository) GetAllowRebaseMerge() bool {
	if o == nil || o.AllowRebaseMerge == nil {
		var ret bool
		return ret
	}
	return *o.AllowRebaseMerge
}

// GetAllowRebaseMergeOk returns a tuple with the AllowRebaseMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetAllowRebaseMergeOk() (*bool, bool) {
	if o == nil || o.AllowRebaseMerge == nil {
		return nil, false
	}
	return o.AllowRebaseMerge, true
}

// HasAllowRebaseMerge returns a boolean if a field has been set.
func (o *NullableRepository) HasAllowRebaseMerge() bool {
	if o != nil && o.AllowRebaseMerge != nil {
		return true
	}

	return false
}

// SetAllowRebaseMerge gets a reference to the given bool and assigns it to the AllowRebaseMerge field.
func (o *NullableRepository) SetAllowRebaseMerge(v bool) {
	o.AllowRebaseMerge = &v
}

// GetTemplateRepository returns the TemplateRepository field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NullableRepository) GetTemplateRepository() RepositoryTemplateRepository {
	if o == nil || o.TemplateRepository.Get() == nil {
		var ret RepositoryTemplateRepository
		return ret
	}
	return *o.TemplateRepository.Get()
}

// GetTemplateRepositoryOk returns a tuple with the TemplateRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NullableRepository) GetTemplateRepositoryOk() (*RepositoryTemplateRepository, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateRepository.Get(), o.TemplateRepository.IsSet()
}

// HasTemplateRepository returns a boolean if a field has been set.
func (o *NullableRepository) HasTemplateRepository() bool {
	if o != nil && o.TemplateRepository.IsSet() {
		return true
	}

	return false
}

// SetTemplateRepository gets a reference to the given NullableRepositoryTemplateRepository and assigns it to the TemplateRepository field.
func (o *NullableRepository) SetTemplateRepository(v RepositoryTemplateRepository) {
	o.TemplateRepository.Set(&v)
}
// SetTemplateRepositoryNil sets the value for TemplateRepository to be an explicit nil
func (o *NullableRepository) SetTemplateRepositoryNil() {
	o.TemplateRepository.Set(nil)
}

// UnsetTemplateRepository ensures that no value is present for TemplateRepository, not even an explicit nil
func (o *NullableRepository) UnsetTemplateRepository() {
	o.TemplateRepository.Unset()
}

// GetTempCloneToken returns the TempCloneToken field value if set, zero value otherwise.
func (o *NullableRepository) GetTempCloneToken() string {
	if o == nil || o.TempCloneToken == nil {
		var ret string
		return ret
	}
	return *o.TempCloneToken
}

// GetTempCloneTokenOk returns a tuple with the TempCloneToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetTempCloneTokenOk() (*string, bool) {
	if o == nil || o.TempCloneToken == nil {
		return nil, false
	}
	return o.TempCloneToken, true
}

// HasTempCloneToken returns a boolean if a field has been set.
func (o *NullableRepository) HasTempCloneToken() bool {
	if o != nil && o.TempCloneToken != nil {
		return true
	}

	return false
}

// SetTempCloneToken gets a reference to the given string and assigns it to the TempCloneToken field.
func (o *NullableRepository) SetTempCloneToken(v string) {
	o.TempCloneToken = &v
}

// GetAllowSquashMerge returns the AllowSquashMerge field value if set, zero value otherwise.
func (o *NullableRepository) GetAllowSquashMerge() bool {
	if o == nil || o.AllowSquashMerge == nil {
		var ret bool
		return ret
	}
	return *o.AllowSquashMerge
}

// GetAllowSquashMergeOk returns a tuple with the AllowSquashMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetAllowSquashMergeOk() (*bool, bool) {
	if o == nil || o.AllowSquashMerge == nil {
		return nil, false
	}
	return o.AllowSquashMerge, true
}

// HasAllowSquashMerge returns a boolean if a field has been set.
func (o *NullableRepository) HasAllowSquashMerge() bool {
	if o != nil && o.AllowSquashMerge != nil {
		return true
	}

	return false
}

// SetAllowSquashMerge gets a reference to the given bool and assigns it to the AllowSquashMerge field.
func (o *NullableRepository) SetAllowSquashMerge(v bool) {
	o.AllowSquashMerge = &v
}

// GetAllowAutoMerge returns the AllowAutoMerge field value if set, zero value otherwise.
func (o *NullableRepository) GetAllowAutoMerge() bool {
	if o == nil || o.AllowAutoMerge == nil {
		var ret bool
		return ret
	}
	return *o.AllowAutoMerge
}

// GetAllowAutoMergeOk returns a tuple with the AllowAutoMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetAllowAutoMergeOk() (*bool, bool) {
	if o == nil || o.AllowAutoMerge == nil {
		return nil, false
	}
	return o.AllowAutoMerge, true
}

// HasAllowAutoMerge returns a boolean if a field has been set.
func (o *NullableRepository) HasAllowAutoMerge() bool {
	if o != nil && o.AllowAutoMerge != nil {
		return true
	}

	return false
}

// SetAllowAutoMerge gets a reference to the given bool and assigns it to the AllowAutoMerge field.
func (o *NullableRepository) SetAllowAutoMerge(v bool) {
	o.AllowAutoMerge = &v
}

// GetDeleteBranchOnMerge returns the DeleteBranchOnMerge field value if set, zero value otherwise.
func (o *NullableRepository) GetDeleteBranchOnMerge() bool {
	if o == nil || o.DeleteBranchOnMerge == nil {
		var ret bool
		return ret
	}
	return *o.DeleteBranchOnMerge
}

// GetDeleteBranchOnMergeOk returns a tuple with the DeleteBranchOnMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetDeleteBranchOnMergeOk() (*bool, bool) {
	if o == nil || o.DeleteBranchOnMerge == nil {
		return nil, false
	}
	return o.DeleteBranchOnMerge, true
}

// HasDeleteBranchOnMerge returns a boolean if a field has been set.
func (o *NullableRepository) HasDeleteBranchOnMerge() bool {
	if o != nil && o.DeleteBranchOnMerge != nil {
		return true
	}

	return false
}

// SetDeleteBranchOnMerge gets a reference to the given bool and assigns it to the DeleteBranchOnMerge field.
func (o *NullableRepository) SetDeleteBranchOnMerge(v bool) {
	o.DeleteBranchOnMerge = &v
}

// GetAllowUpdateBranch returns the AllowUpdateBranch field value if set, zero value otherwise.
func (o *NullableRepository) GetAllowUpdateBranch() bool {
	if o == nil || o.AllowUpdateBranch == nil {
		var ret bool
		return ret
	}
	return *o.AllowUpdateBranch
}

// GetAllowUpdateBranchOk returns a tuple with the AllowUpdateBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetAllowUpdateBranchOk() (*bool, bool) {
	if o == nil || o.AllowUpdateBranch == nil {
		return nil, false
	}
	return o.AllowUpdateBranch, true
}

// HasAllowUpdateBranch returns a boolean if a field has been set.
func (o *NullableRepository) HasAllowUpdateBranch() bool {
	if o != nil && o.AllowUpdateBranch != nil {
		return true
	}

	return false
}

// SetAllowUpdateBranch gets a reference to the given bool and assigns it to the AllowUpdateBranch field.
func (o *NullableRepository) SetAllowUpdateBranch(v bool) {
	o.AllowUpdateBranch = &v
}

// GetUseSquashPrTitleAsDefault returns the UseSquashPrTitleAsDefault field value if set, zero value otherwise.
func (o *NullableRepository) GetUseSquashPrTitleAsDefault() bool {
	if o == nil || o.UseSquashPrTitleAsDefault == nil {
		var ret bool
		return ret
	}
	return *o.UseSquashPrTitleAsDefault
}

// GetUseSquashPrTitleAsDefaultOk returns a tuple with the UseSquashPrTitleAsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetUseSquashPrTitleAsDefaultOk() (*bool, bool) {
	if o == nil || o.UseSquashPrTitleAsDefault == nil {
		return nil, false
	}
	return o.UseSquashPrTitleAsDefault, true
}

// HasUseSquashPrTitleAsDefault returns a boolean if a field has been set.
func (o *NullableRepository) HasUseSquashPrTitleAsDefault() bool {
	if o != nil && o.UseSquashPrTitleAsDefault != nil {
		return true
	}

	return false
}

// SetUseSquashPrTitleAsDefault gets a reference to the given bool and assigns it to the UseSquashPrTitleAsDefault field.
func (o *NullableRepository) SetUseSquashPrTitleAsDefault(v bool) {
	o.UseSquashPrTitleAsDefault = &v
}

// GetAllowMergeCommit returns the AllowMergeCommit field value if set, zero value otherwise.
func (o *NullableRepository) GetAllowMergeCommit() bool {
	if o == nil || o.AllowMergeCommit == nil {
		var ret bool
		return ret
	}
	return *o.AllowMergeCommit
}

// GetAllowMergeCommitOk returns a tuple with the AllowMergeCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetAllowMergeCommitOk() (*bool, bool) {
	if o == nil || o.AllowMergeCommit == nil {
		return nil, false
	}
	return o.AllowMergeCommit, true
}

// HasAllowMergeCommit returns a boolean if a field has been set.
func (o *NullableRepository) HasAllowMergeCommit() bool {
	if o != nil && o.AllowMergeCommit != nil {
		return true
	}

	return false
}

// SetAllowMergeCommit gets a reference to the given bool and assigns it to the AllowMergeCommit field.
func (o *NullableRepository) SetAllowMergeCommit(v bool) {
	o.AllowMergeCommit = &v
}

// GetAllowForking returns the AllowForking field value if set, zero value otherwise.
func (o *NullableRepository) GetAllowForking() bool {
	if o == nil || o.AllowForking == nil {
		var ret bool
		return ret
	}
	return *o.AllowForking
}

// GetAllowForkingOk returns a tuple with the AllowForking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetAllowForkingOk() (*bool, bool) {
	if o == nil || o.AllowForking == nil {
		return nil, false
	}
	return o.AllowForking, true
}

// HasAllowForking returns a boolean if a field has been set.
func (o *NullableRepository) HasAllowForking() bool {
	if o != nil && o.AllowForking != nil {
		return true
	}

	return false
}

// SetAllowForking gets a reference to the given bool and assigns it to the AllowForking field.
func (o *NullableRepository) SetAllowForking(v bool) {
	o.AllowForking = &v
}

// GetSubscribersCount returns the SubscribersCount field value if set, zero value otherwise.
func (o *NullableRepository) GetSubscribersCount() int32 {
	if o == nil || o.SubscribersCount == nil {
		var ret int32
		return ret
	}
	return *o.SubscribersCount
}

// GetSubscribersCountOk returns a tuple with the SubscribersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetSubscribersCountOk() (*int32, bool) {
	if o == nil || o.SubscribersCount == nil {
		return nil, false
	}
	return o.SubscribersCount, true
}

// HasSubscribersCount returns a boolean if a field has been set.
func (o *NullableRepository) HasSubscribersCount() bool {
	if o != nil && o.SubscribersCount != nil {
		return true
	}

	return false
}

// SetSubscribersCount gets a reference to the given int32 and assigns it to the SubscribersCount field.
func (o *NullableRepository) SetSubscribersCount(v int32) {
	o.SubscribersCount = &v
}

// GetNetworkCount returns the NetworkCount field value if set, zero value otherwise.
func (o *NullableRepository) GetNetworkCount() int32 {
	if o == nil || o.NetworkCount == nil {
		var ret int32
		return ret
	}
	return *o.NetworkCount
}

// GetNetworkCountOk returns a tuple with the NetworkCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetNetworkCountOk() (*int32, bool) {
	if o == nil || o.NetworkCount == nil {
		return nil, false
	}
	return o.NetworkCount, true
}

// HasNetworkCount returns a boolean if a field has been set.
func (o *NullableRepository) HasNetworkCount() bool {
	if o != nil && o.NetworkCount != nil {
		return true
	}

	return false
}

// SetNetworkCount gets a reference to the given int32 and assigns it to the NetworkCount field.
func (o *NullableRepository) SetNetworkCount(v int32) {
	o.NetworkCount = &v
}

// GetOpenIssues returns the OpenIssues field value
func (o *NullableRepository) GetOpenIssues() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OpenIssues
}

// GetOpenIssuesOk returns a tuple with the OpenIssues field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetOpenIssuesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenIssues, true
}

// SetOpenIssues sets field value
func (o *NullableRepository) SetOpenIssues(v int32) {
	o.OpenIssues = v
}

// GetWatchers returns the Watchers field value
func (o *NullableRepository) GetWatchers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Watchers
}

// GetWatchersOk returns a tuple with the Watchers field value
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetWatchersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Watchers, true
}

// SetWatchers sets field value
func (o *NullableRepository) SetWatchers(v int32) {
	o.Watchers = v
}

// GetMasterBranch returns the MasterBranch field value if set, zero value otherwise.
func (o *NullableRepository) GetMasterBranch() string {
	if o == nil || o.MasterBranch == nil {
		var ret string
		return ret
	}
	return *o.MasterBranch
}

// GetMasterBranchOk returns a tuple with the MasterBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetMasterBranchOk() (*string, bool) {
	if o == nil || o.MasterBranch == nil {
		return nil, false
	}
	return o.MasterBranch, true
}

// HasMasterBranch returns a boolean if a field has been set.
func (o *NullableRepository) HasMasterBranch() bool {
	if o != nil && o.MasterBranch != nil {
		return true
	}

	return false
}

// SetMasterBranch gets a reference to the given string and assigns it to the MasterBranch field.
func (o *NullableRepository) SetMasterBranch(v string) {
	o.MasterBranch = &v
}

// GetStarredAt returns the StarredAt field value if set, zero value otherwise.
func (o *NullableRepository) GetStarredAt() string {
	if o == nil || o.StarredAt == nil {
		var ret string
		return ret
	}
	return *o.StarredAt
}

// GetStarredAtOk returns a tuple with the StarredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableRepository) GetStarredAtOk() (*string, bool) {
	if o == nil || o.StarredAt == nil {
		return nil, false
	}
	return o.StarredAt, true
}

// HasStarredAt returns a boolean if a field has been set.
func (o *NullableRepository) HasStarredAt() bool {
	if o != nil && o.StarredAt != nil {
		return true
	}

	return false
}

// SetStarredAt gets a reference to the given string and assigns it to the StarredAt field.
func (o *NullableRepository) SetStarredAt(v string) {
	o.StarredAt = &v
}

func (o NullableRepository) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["full_name"] = o.FullName
	}
	if true {
		toSerialize["license"] = o.License.Get()
	}
	if o.Organization.IsSet() {
		toSerialize["organization"] = o.Organization.Get()
	}
	if true {
		toSerialize["forks"] = o.Forks
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["private"] = o.Private
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if true {
		toSerialize["description"] = o.Description.Get()
	}
	if true {
		toSerialize["fork"] = o.Fork
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["archive_url"] = o.ArchiveUrl
	}
	if true {
		toSerialize["assignees_url"] = o.AssigneesUrl
	}
	if true {
		toSerialize["blobs_url"] = o.BlobsUrl
	}
	if true {
		toSerialize["branches_url"] = o.BranchesUrl
	}
	if true {
		toSerialize["collaborators_url"] = o.CollaboratorsUrl
	}
	if true {
		toSerialize["comments_url"] = o.CommentsUrl
	}
	if true {
		toSerialize["commits_url"] = o.CommitsUrl
	}
	if true {
		toSerialize["compare_url"] = o.CompareUrl
	}
	if true {
		toSerialize["contents_url"] = o.ContentsUrl
	}
	if true {
		toSerialize["contributors_url"] = o.ContributorsUrl
	}
	if true {
		toSerialize["deployments_url"] = o.DeploymentsUrl
	}
	if true {
		toSerialize["downloads_url"] = o.DownloadsUrl
	}
	if true {
		toSerialize["events_url"] = o.EventsUrl
	}
	if true {
		toSerialize["forks_url"] = o.ForksUrl
	}
	if true {
		toSerialize["git_commits_url"] = o.GitCommitsUrl
	}
	if true {
		toSerialize["git_refs_url"] = o.GitRefsUrl
	}
	if true {
		toSerialize["git_tags_url"] = o.GitTagsUrl
	}
	if true {
		toSerialize["git_url"] = o.GitUrl
	}
	if true {
		toSerialize["issue_comment_url"] = o.IssueCommentUrl
	}
	if true {
		toSerialize["issue_events_url"] = o.IssueEventsUrl
	}
	if true {
		toSerialize["issues_url"] = o.IssuesUrl
	}
	if true {
		toSerialize["keys_url"] = o.KeysUrl
	}
	if true {
		toSerialize["labels_url"] = o.LabelsUrl
	}
	if true {
		toSerialize["languages_url"] = o.LanguagesUrl
	}
	if true {
		toSerialize["merges_url"] = o.MergesUrl
	}
	if true {
		toSerialize["milestones_url"] = o.MilestonesUrl
	}
	if true {
		toSerialize["notifications_url"] = o.NotificationsUrl
	}
	if true {
		toSerialize["pulls_url"] = o.PullsUrl
	}
	if true {
		toSerialize["releases_url"] = o.ReleasesUrl
	}
	if true {
		toSerialize["ssh_url"] = o.SshUrl
	}
	if true {
		toSerialize["stargazers_url"] = o.StargazersUrl
	}
	if true {
		toSerialize["statuses_url"] = o.StatusesUrl
	}
	if true {
		toSerialize["subscribers_url"] = o.SubscribersUrl
	}
	if true {
		toSerialize["subscription_url"] = o.SubscriptionUrl
	}
	if true {
		toSerialize["tags_url"] = o.TagsUrl
	}
	if true {
		toSerialize["teams_url"] = o.TeamsUrl
	}
	if true {
		toSerialize["trees_url"] = o.TreesUrl
	}
	if true {
		toSerialize["clone_url"] = o.CloneUrl
	}
	if true {
		toSerialize["mirror_url"] = o.MirrorUrl.Get()
	}
	if true {
		toSerialize["hooks_url"] = o.HooksUrl
	}
	if true {
		toSerialize["svn_url"] = o.SvnUrl
	}
	if true {
		toSerialize["homepage"] = o.Homepage.Get()
	}
	if true {
		toSerialize["language"] = o.Language.Get()
	}
	if true {
		toSerialize["forks_count"] = o.ForksCount
	}
	if true {
		toSerialize["stargazers_count"] = o.StargazersCount
	}
	if true {
		toSerialize["watchers_count"] = o.WatchersCount
	}
	if true {
		toSerialize["size"] = o.Size
	}
	if true {
		toSerialize["default_branch"] = o.DefaultBranch
	}
	if true {
		toSerialize["open_issues_count"] = o.OpenIssuesCount
	}
	if o.IsTemplate != nil {
		toSerialize["is_template"] = o.IsTemplate
	}
	if o.Topics != nil {
		toSerialize["topics"] = o.Topics
	}
	if true {
		toSerialize["has_issues"] = o.HasIssues
	}
	if true {
		toSerialize["has_projects"] = o.HasProjects
	}
	if true {
		toSerialize["has_wiki"] = o.HasWiki
	}
	if true {
		toSerialize["has_pages"] = o.HasPages
	}
	if true {
		toSerialize["has_downloads"] = o.HasDownloads
	}
	if true {
		toSerialize["archived"] = o.Archived
	}
	if true {
		toSerialize["disabled"] = o.Disabled
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if true {
		toSerialize["pushed_at"] = o.PushedAt.Get()
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt.Get()
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt.Get()
	}
	if o.AllowRebaseMerge != nil {
		toSerialize["allow_rebase_merge"] = o.AllowRebaseMerge
	}
	if o.TemplateRepository.IsSet() {
		toSerialize["template_repository"] = o.TemplateRepository.Get()
	}
	if o.TempCloneToken != nil {
		toSerialize["temp_clone_token"] = o.TempCloneToken
	}
	if o.AllowSquashMerge != nil {
		toSerialize["allow_squash_merge"] = o.AllowSquashMerge
	}
	if o.AllowAutoMerge != nil {
		toSerialize["allow_auto_merge"] = o.AllowAutoMerge
	}
	if o.DeleteBranchOnMerge != nil {
		toSerialize["delete_branch_on_merge"] = o.DeleteBranchOnMerge
	}
	if o.AllowUpdateBranch != nil {
		toSerialize["allow_update_branch"] = o.AllowUpdateBranch
	}
	if o.UseSquashPrTitleAsDefault != nil {
		toSerialize["use_squash_pr_title_as_default"] = o.UseSquashPrTitleAsDefault
	}
	if o.AllowMergeCommit != nil {
		toSerialize["allow_merge_commit"] = o.AllowMergeCommit
	}
	if o.AllowForking != nil {
		toSerialize["allow_forking"] = o.AllowForking
	}
	if o.SubscribersCount != nil {
		toSerialize["subscribers_count"] = o.SubscribersCount
	}
	if o.NetworkCount != nil {
		toSerialize["network_count"] = o.NetworkCount
	}
	if true {
		toSerialize["open_issues"] = o.OpenIssues
	}
	if true {
		toSerialize["watchers"] = o.Watchers
	}
	if o.MasterBranch != nil {
		toSerialize["master_branch"] = o.MasterBranch
	}
	if o.StarredAt != nil {
		toSerialize["starred_at"] = o.StarredAt
	}
	return json.Marshal(toSerialize)
}

type NullableNullableRepository struct {
	value *NullableRepository
	isSet bool
}

func (v NullableNullableRepository) Get() *NullableRepository {
	return v.value
}

func (v *NullableNullableRepository) Set(val *NullableRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableNullableRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableNullableRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNullableRepository(val *NullableRepository) *NullableNullableRepository {
	return &NullableNullableRepository{value: val, isSet: true}
}

func (v NullableNullableRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNullableRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


