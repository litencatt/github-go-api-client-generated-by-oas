/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// CheckAnnotation Check Annotation
type CheckAnnotation struct {
	Path string `json:"path"`
	StartLine int32 `json:"start_line"`
	EndLine int32 `json:"end_line"`
	StartColumn NullableInt32 `json:"start_column"`
	EndColumn NullableInt32 `json:"end_column"`
	AnnotationLevel NullableString `json:"annotation_level"`
	Title NullableString `json:"title"`
	Message NullableString `json:"message"`
	RawDetails NullableString `json:"raw_details"`
	BlobHref string `json:"blob_href"`
}

// NewCheckAnnotation instantiates a new CheckAnnotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckAnnotation(path string, startLine int32, endLine int32, startColumn NullableInt32, endColumn NullableInt32, annotationLevel NullableString, title NullableString, message NullableString, rawDetails NullableString, blobHref string) *CheckAnnotation {
	this := CheckAnnotation{}
	this.Path = path
	this.StartLine = startLine
	this.EndLine = endLine
	this.StartColumn = startColumn
	this.EndColumn = endColumn
	this.AnnotationLevel = annotationLevel
	this.Title = title
	this.Message = message
	this.RawDetails = rawDetails
	this.BlobHref = blobHref
	return &this
}

// NewCheckAnnotationWithDefaults instantiates a new CheckAnnotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckAnnotationWithDefaults() *CheckAnnotation {
	this := CheckAnnotation{}
	return &this
}

// GetPath returns the Path field value
func (o *CheckAnnotation) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *CheckAnnotation) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *CheckAnnotation) SetPath(v string) {
	o.Path = v
}

// GetStartLine returns the StartLine field value
func (o *CheckAnnotation) GetStartLine() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartLine
}

// GetStartLineOk returns a tuple with the StartLine field value
// and a boolean to check if the value has been set.
func (o *CheckAnnotation) GetStartLineOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartLine, true
}

// SetStartLine sets field value
func (o *CheckAnnotation) SetStartLine(v int32) {
	o.StartLine = v
}

// GetEndLine returns the EndLine field value
func (o *CheckAnnotation) GetEndLine() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EndLine
}

// GetEndLineOk returns a tuple with the EndLine field value
// and a boolean to check if the value has been set.
func (o *CheckAnnotation) GetEndLineOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndLine, true
}

// SetEndLine sets field value
func (o *CheckAnnotation) SetEndLine(v int32) {
	o.EndLine = v
}

// GetStartColumn returns the StartColumn field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *CheckAnnotation) GetStartColumn() int32 {
	if o == nil || o.StartColumn.Get() == nil {
		var ret int32
		return ret
	}

	return *o.StartColumn.Get()
}

// GetStartColumnOk returns a tuple with the StartColumn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckAnnotation) GetStartColumnOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartColumn.Get(), o.StartColumn.IsSet()
}

// SetStartColumn sets field value
func (o *CheckAnnotation) SetStartColumn(v int32) {
	o.StartColumn.Set(&v)
}

// GetEndColumn returns the EndColumn field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *CheckAnnotation) GetEndColumn() int32 {
	if o == nil || o.EndColumn.Get() == nil {
		var ret int32
		return ret
	}

	return *o.EndColumn.Get()
}

// GetEndColumnOk returns a tuple with the EndColumn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckAnnotation) GetEndColumnOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndColumn.Get(), o.EndColumn.IsSet()
}

// SetEndColumn sets field value
func (o *CheckAnnotation) SetEndColumn(v int32) {
	o.EndColumn.Set(&v)
}

// GetAnnotationLevel returns the AnnotationLevel field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CheckAnnotation) GetAnnotationLevel() string {
	if o == nil || o.AnnotationLevel.Get() == nil {
		var ret string
		return ret
	}

	return *o.AnnotationLevel.Get()
}

// GetAnnotationLevelOk returns a tuple with the AnnotationLevel field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckAnnotation) GetAnnotationLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnnotationLevel.Get(), o.AnnotationLevel.IsSet()
}

// SetAnnotationLevel sets field value
func (o *CheckAnnotation) SetAnnotationLevel(v string) {
	o.AnnotationLevel.Set(&v)
}

// GetTitle returns the Title field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CheckAnnotation) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}

	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckAnnotation) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// SetTitle sets field value
func (o *CheckAnnotation) SetTitle(v string) {
	o.Title.Set(&v)
}

// GetMessage returns the Message field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CheckAnnotation) GetMessage() string {
	if o == nil || o.Message.Get() == nil {
		var ret string
		return ret
	}

	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckAnnotation) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// SetMessage sets field value
func (o *CheckAnnotation) SetMessage(v string) {
	o.Message.Set(&v)
}

// GetRawDetails returns the RawDetails field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CheckAnnotation) GetRawDetails() string {
	if o == nil || o.RawDetails.Get() == nil {
		var ret string
		return ret
	}

	return *o.RawDetails.Get()
}

// GetRawDetailsOk returns a tuple with the RawDetails field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckAnnotation) GetRawDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RawDetails.Get(), o.RawDetails.IsSet()
}

// SetRawDetails sets field value
func (o *CheckAnnotation) SetRawDetails(v string) {
	o.RawDetails.Set(&v)
}

// GetBlobHref returns the BlobHref field value
func (o *CheckAnnotation) GetBlobHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlobHref
}

// GetBlobHrefOk returns a tuple with the BlobHref field value
// and a boolean to check if the value has been set.
func (o *CheckAnnotation) GetBlobHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlobHref, true
}

// SetBlobHref sets field value
func (o *CheckAnnotation) SetBlobHref(v string) {
	o.BlobHref = v
}

func (o CheckAnnotation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["path"] = o.Path
	}
	if true {
		toSerialize["start_line"] = o.StartLine
	}
	if true {
		toSerialize["end_line"] = o.EndLine
	}
	if true {
		toSerialize["start_column"] = o.StartColumn.Get()
	}
	if true {
		toSerialize["end_column"] = o.EndColumn.Get()
	}
	if true {
		toSerialize["annotation_level"] = o.AnnotationLevel.Get()
	}
	if true {
		toSerialize["title"] = o.Title.Get()
	}
	if true {
		toSerialize["message"] = o.Message.Get()
	}
	if true {
		toSerialize["raw_details"] = o.RawDetails.Get()
	}
	if true {
		toSerialize["blob_href"] = o.BlobHref
	}
	return json.Marshal(toSerialize)
}

type NullableCheckAnnotation struct {
	value *CheckAnnotation
	isSet bool
}

func (v NullableCheckAnnotation) Get() *CheckAnnotation {
	return v.value
}

func (v *NullableCheckAnnotation) Set(val *CheckAnnotation) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckAnnotation) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckAnnotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckAnnotation(val *CheckAnnotation) *NullableCheckAnnotation {
	return &NullableCheckAnnotation{value: val, isSet: true}
}

func (v NullableCheckAnnotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckAnnotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


