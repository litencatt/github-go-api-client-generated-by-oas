/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// GitTree The hierarchy between files in a Git repository.
type GitTree struct {
	Sha string `json:"sha"`
	Url string `json:"url"`
	Truncated bool `json:"truncated"`
	// Objects specifying a tree structure
	Tree []GitTreeTreeInner `json:"tree"`
}

// NewGitTree instantiates a new GitTree object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitTree(sha string, url string, truncated bool, tree []GitTreeTreeInner) *GitTree {
	this := GitTree{}
	this.Sha = sha
	this.Url = url
	this.Truncated = truncated
	this.Tree = tree
	return &this
}

// NewGitTreeWithDefaults instantiates a new GitTree object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitTreeWithDefaults() *GitTree {
	this := GitTree{}
	return &this
}

// GetSha returns the Sha field value
func (o *GitTree) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *GitTree) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *GitTree) SetSha(v string) {
	o.Sha = v
}

// GetUrl returns the Url field value
func (o *GitTree) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *GitTree) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *GitTree) SetUrl(v string) {
	o.Url = v
}

// GetTruncated returns the Truncated field value
func (o *GitTree) GetTruncated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Truncated
}

// GetTruncatedOk returns a tuple with the Truncated field value
// and a boolean to check if the value has been set.
func (o *GitTree) GetTruncatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Truncated, true
}

// SetTruncated sets field value
func (o *GitTree) SetTruncated(v bool) {
	o.Truncated = v
}

// GetTree returns the Tree field value
func (o *GitTree) GetTree() []GitTreeTreeInner {
	if o == nil {
		var ret []GitTreeTreeInner
		return ret
	}

	return o.Tree
}

// GetTreeOk returns a tuple with the Tree field value
// and a boolean to check if the value has been set.
func (o *GitTree) GetTreeOk() ([]GitTreeTreeInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tree, true
}

// SetTree sets field value
func (o *GitTree) SetTree(v []GitTreeTreeInner) {
	o.Tree = v
}

func (o GitTree) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sha"] = o.Sha
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["truncated"] = o.Truncated
	}
	if true {
		toSerialize["tree"] = o.Tree
	}
	return json.Marshal(toSerialize)
}

type NullableGitTree struct {
	value *GitTree
	isSet bool
}

func (v NullableGitTree) Get() *GitTree {
	return v.value
}

func (v *NullableGitTree) Set(val *GitTree) {
	v.value = val
	v.isSet = true
}

func (v NullableGitTree) IsSet() bool {
	return v.isSet
}

func (v *NullableGitTree) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitTree(val *GitTree) *NullableGitTree {
	return &NullableGitTree{value: val, isSet: true}
}

func (v NullableGitTree) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitTree) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


