/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// ReposSetStatusCheckContextsRequest - struct for ReposSetStatusCheckContextsRequest
type ReposSetStatusCheckContextsRequest struct {
	ReposSetStatusCheckContextsRequestOneOf *ReposSetStatusCheckContextsRequestOneOf
	ArrayOfString *[]string
}

// ReposSetStatusCheckContextsRequestOneOfAsReposSetStatusCheckContextsRequest is a convenience function that returns ReposSetStatusCheckContextsRequestOneOf wrapped in ReposSetStatusCheckContextsRequest
func ReposSetStatusCheckContextsRequestOneOfAsReposSetStatusCheckContextsRequest(v *ReposSetStatusCheckContextsRequestOneOf) ReposSetStatusCheckContextsRequest {
	return ReposSetStatusCheckContextsRequest{
		ReposSetStatusCheckContextsRequestOneOf: v,
	}
}

// []stringAsReposSetStatusCheckContextsRequest is a convenience function that returns []string wrapped in ReposSetStatusCheckContextsRequest
func ArrayOfStringAsReposSetStatusCheckContextsRequest(v *[]string) ReposSetStatusCheckContextsRequest {
	return ReposSetStatusCheckContextsRequest{
		ArrayOfString: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReposSetStatusCheckContextsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ReposSetStatusCheckContextsRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.ReposSetStatusCheckContextsRequestOneOf)
	if err == nil {
		jsonReposSetStatusCheckContextsRequestOneOf, _ := json.Marshal(dst.ReposSetStatusCheckContextsRequestOneOf)
		if string(jsonReposSetStatusCheckContextsRequestOneOf) == "{}" { // empty struct
			dst.ReposSetStatusCheckContextsRequestOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ReposSetStatusCheckContextsRequestOneOf = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ReposSetStatusCheckContextsRequestOneOf = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ReposSetStatusCheckContextsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ReposSetStatusCheckContextsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReposSetStatusCheckContextsRequest) MarshalJSON() ([]byte, error) {
	if src.ReposSetStatusCheckContextsRequestOneOf != nil {
		return json.Marshal(&src.ReposSetStatusCheckContextsRequestOneOf)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReposSetStatusCheckContextsRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ReposSetStatusCheckContextsRequestOneOf != nil {
		return obj.ReposSetStatusCheckContextsRequestOneOf
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableReposSetStatusCheckContextsRequest struct {
	value *ReposSetStatusCheckContextsRequest
	isSet bool
}

func (v NullableReposSetStatusCheckContextsRequest) Get() *ReposSetStatusCheckContextsRequest {
	return v.value
}

func (v *NullableReposSetStatusCheckContextsRequest) Set(val *ReposSetStatusCheckContextsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReposSetStatusCheckContextsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReposSetStatusCheckContextsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposSetStatusCheckContextsRequest(val *ReposSetStatusCheckContextsRequest) *NullableReposSetStatusCheckContextsRequest {
	return &NullableReposSetStatusCheckContextsRequest{value: val, isSet: true}
}

func (v NullableReposSetStatusCheckContextsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposSetStatusCheckContextsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


