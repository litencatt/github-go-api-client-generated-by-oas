/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReactionsCreateForIssueCommentRequest struct for ReactionsCreateForIssueCommentRequest
type ReactionsCreateForIssueCommentRequest struct {
	// The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
	Content string `json:"content"`
}

// NewReactionsCreateForIssueCommentRequest instantiates a new ReactionsCreateForIssueCommentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactionsCreateForIssueCommentRequest(content string) *ReactionsCreateForIssueCommentRequest {
	this := ReactionsCreateForIssueCommentRequest{}
	this.Content = content
	return &this
}

// NewReactionsCreateForIssueCommentRequestWithDefaults instantiates a new ReactionsCreateForIssueCommentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionsCreateForIssueCommentRequestWithDefaults() *ReactionsCreateForIssueCommentRequest {
	this := ReactionsCreateForIssueCommentRequest{}
	return &this
}

// GetContent returns the Content field value
func (o *ReactionsCreateForIssueCommentRequest) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *ReactionsCreateForIssueCommentRequest) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *ReactionsCreateForIssueCommentRequest) SetContent(v string) {
	o.Content = v
}

func (o ReactionsCreateForIssueCommentRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableReactionsCreateForIssueCommentRequest struct {
	value *ReactionsCreateForIssueCommentRequest
	isSet bool
}

func (v NullableReactionsCreateForIssueCommentRequest) Get() *ReactionsCreateForIssueCommentRequest {
	return v.value
}

func (v *NullableReactionsCreateForIssueCommentRequest) Set(val *ReactionsCreateForIssueCommentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReactionsCreateForIssueCommentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReactionsCreateForIssueCommentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactionsCreateForIssueCommentRequest(val *ReactionsCreateForIssueCommentRequest) *NullableReactionsCreateForIssueCommentRequest {
	return &NullableReactionsCreateForIssueCommentRequest{value: val, isSet: true}
}

func (v NullableReactionsCreateForIssueCommentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactionsCreateForIssueCommentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


