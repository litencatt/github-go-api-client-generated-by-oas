/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// IssuesAddLabelsRequestOneOf struct for IssuesAddLabelsRequestOneOf
type IssuesAddLabelsRequestOneOf struct {
	// The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see \"[Set labels for an issue](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue).\"
	Labels []string `json:"labels,omitempty"`
}

// NewIssuesAddLabelsRequestOneOf instantiates a new IssuesAddLabelsRequestOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesAddLabelsRequestOneOf() *IssuesAddLabelsRequestOneOf {
	this := IssuesAddLabelsRequestOneOf{}
	return &this
}

// NewIssuesAddLabelsRequestOneOfWithDefaults instantiates a new IssuesAddLabelsRequestOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesAddLabelsRequestOneOfWithDefaults() *IssuesAddLabelsRequestOneOf {
	this := IssuesAddLabelsRequestOneOf{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *IssuesAddLabelsRequestOneOf) GetLabels() []string {
	if o == nil || o.Labels == nil {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesAddLabelsRequestOneOf) GetLabelsOk() ([]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *IssuesAddLabelsRequestOneOf) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *IssuesAddLabelsRequestOneOf) SetLabels(v []string) {
	o.Labels = v
}

func (o IssuesAddLabelsRequestOneOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	return json.Marshal(toSerialize)
}

type NullableIssuesAddLabelsRequestOneOf struct {
	value *IssuesAddLabelsRequestOneOf
	isSet bool
}

func (v NullableIssuesAddLabelsRequestOneOf) Get() *IssuesAddLabelsRequestOneOf {
	return v.value
}

func (v *NullableIssuesAddLabelsRequestOneOf) Set(val *IssuesAddLabelsRequestOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesAddLabelsRequestOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesAddLabelsRequestOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesAddLabelsRequestOneOf(val *IssuesAddLabelsRequestOneOf) *NullableIssuesAddLabelsRequestOneOf {
	return &NullableIssuesAddLabelsRequestOneOf{value: val, isSet: true}
}

func (v NullableIssuesAddLabelsRequestOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesAddLabelsRequestOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


