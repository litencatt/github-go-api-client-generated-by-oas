/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// SecretScanningAlertResolution **Required when the `state` is `resolved`.** The reason for resolving the alert.
type SecretScanningAlertResolution string

// List of secret-scanning-alert-resolution
const (
	NULL SecretScanningAlertResolution = "null"
	FALSE_POSITIVE SecretScanningAlertResolution = "false_positive"
	WONT_FIX SecretScanningAlertResolution = "wont_fix"
	REVOKED SecretScanningAlertResolution = "revoked"
	USED_IN_TESTS SecretScanningAlertResolution = "used_in_tests"
)

// All allowed values of SecretScanningAlertResolution enum
var AllowedSecretScanningAlertResolutionEnumValues = []SecretScanningAlertResolution{
	"null",
	"false_positive",
	"wont_fix",
	"revoked",
	"used_in_tests",
}

func (v *SecretScanningAlertResolution) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecretScanningAlertResolution(value)
	for _, existing := range AllowedSecretScanningAlertResolutionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecretScanningAlertResolution", value)
}

// NewSecretScanningAlertResolutionFromValue returns a pointer to a valid SecretScanningAlertResolution
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecretScanningAlertResolutionFromValue(v string) (*SecretScanningAlertResolution, error) {
	ev := SecretScanningAlertResolution(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SecretScanningAlertResolution: valid values are %v", v, AllowedSecretScanningAlertResolutionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecretScanningAlertResolution) IsValid() bool {
	for _, existing := range AllowedSecretScanningAlertResolutionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to secret-scanning-alert-resolution value
func (v SecretScanningAlertResolution) Ptr() *SecretScanningAlertResolution {
	return &v
}

type NullableSecretScanningAlertResolution struct {
	value *SecretScanningAlertResolution
	isSet bool
}

func (v NullableSecretScanningAlertResolution) Get() *SecretScanningAlertResolution {
	return v.value
}

func (v *NullableSecretScanningAlertResolution) Set(val *SecretScanningAlertResolution) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretScanningAlertResolution) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretScanningAlertResolution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretScanningAlertResolution(val *SecretScanningAlertResolution) *NullableSecretScanningAlertResolution {
	return &NullableSecretScanningAlertResolution{value: val, isSet: true}
}

func (v NullableSecretScanningAlertResolution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretScanningAlertResolution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

