/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// PullsCreateReviewRequest struct for PullsCreateReviewRequest
type PullsCreateReviewRequest struct {
	// The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
	CommitId *string `json:"commit_id,omitempty"`
	// **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
	Body *string `json:"body,omitempty"`
	// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
	Event *string `json:"event,omitempty"`
	// Use the following table to specify the location, destination, and contents of the draft review comment.
	Comments []PullsCreateReviewRequestCommentsInner `json:"comments,omitempty"`
}

// NewPullsCreateReviewRequest instantiates a new PullsCreateReviewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPullsCreateReviewRequest() *PullsCreateReviewRequest {
	this := PullsCreateReviewRequest{}
	return &this
}

// NewPullsCreateReviewRequestWithDefaults instantiates a new PullsCreateReviewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPullsCreateReviewRequestWithDefaults() *PullsCreateReviewRequest {
	this := PullsCreateReviewRequest{}
	return &this
}

// GetCommitId returns the CommitId field value if set, zero value otherwise.
func (o *PullsCreateReviewRequest) GetCommitId() string {
	if o == nil || o.CommitId == nil {
		var ret string
		return ret
	}
	return *o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsCreateReviewRequest) GetCommitIdOk() (*string, bool) {
	if o == nil || o.CommitId == nil {
		return nil, false
	}
	return o.CommitId, true
}

// HasCommitId returns a boolean if a field has been set.
func (o *PullsCreateReviewRequest) HasCommitId() bool {
	if o != nil && o.CommitId != nil {
		return true
	}

	return false
}

// SetCommitId gets a reference to the given string and assigns it to the CommitId field.
func (o *PullsCreateReviewRequest) SetCommitId(v string) {
	o.CommitId = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *PullsCreateReviewRequest) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsCreateReviewRequest) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *PullsCreateReviewRequest) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *PullsCreateReviewRequest) SetBody(v string) {
	o.Body = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *PullsCreateReviewRequest) GetEvent() string {
	if o == nil || o.Event == nil {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsCreateReviewRequest) GetEventOk() (*string, bool) {
	if o == nil || o.Event == nil {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *PullsCreateReviewRequest) HasEvent() bool {
	if o != nil && o.Event != nil {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *PullsCreateReviewRequest) SetEvent(v string) {
	o.Event = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *PullsCreateReviewRequest) GetComments() []PullsCreateReviewRequestCommentsInner {
	if o == nil || o.Comments == nil {
		var ret []PullsCreateReviewRequestCommentsInner
		return ret
	}
	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsCreateReviewRequest) GetCommentsOk() ([]PullsCreateReviewRequestCommentsInner, bool) {
	if o == nil || o.Comments == nil {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *PullsCreateReviewRequest) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given []PullsCreateReviewRequestCommentsInner and assigns it to the Comments field.
func (o *PullsCreateReviewRequest) SetComments(v []PullsCreateReviewRequestCommentsInner) {
	o.Comments = v
}

func (o PullsCreateReviewRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommitId != nil {
		toSerialize["commit_id"] = o.CommitId
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.Event != nil {
		toSerialize["event"] = o.Event
	}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	return json.Marshal(toSerialize)
}

type NullablePullsCreateReviewRequest struct {
	value *PullsCreateReviewRequest
	isSet bool
}

func (v NullablePullsCreateReviewRequest) Get() *PullsCreateReviewRequest {
	return v.value
}

func (v *NullablePullsCreateReviewRequest) Set(val *PullsCreateReviewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePullsCreateReviewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePullsCreateReviewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePullsCreateReviewRequest(val *PullsCreateReviewRequest) *NullablePullsCreateReviewRequest {
	return &NullablePullsCreateReviewRequest{value: val, isSet: true}
}

func (v NullablePullsCreateReviewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePullsCreateReviewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


