/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// CommitCommit struct for CommitCommit
type CommitCommit struct {
	Url string `json:"url"`
	Author NullableNullableGitUser `json:"author"`
	Committer NullableNullableGitUser `json:"committer"`
	Message string `json:"message"`
	CommentCount int32 `json:"comment_count"`
	Tree CommitCommitTree `json:"tree"`
	Verification *Verification `json:"verification,omitempty"`
}

// NewCommitCommit instantiates a new CommitCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitCommit(url string, author NullableNullableGitUser, committer NullableNullableGitUser, message string, commentCount int32, tree CommitCommitTree) *CommitCommit {
	this := CommitCommit{}
	this.Url = url
	this.Author = author
	this.Committer = committer
	this.Message = message
	this.CommentCount = commentCount
	this.Tree = tree
	return &this
}

// NewCommitCommitWithDefaults instantiates a new CommitCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitCommitWithDefaults() *CommitCommit {
	this := CommitCommit{}
	return &this
}

// GetUrl returns the Url field value
func (o *CommitCommit) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CommitCommit) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CommitCommit) SetUrl(v string) {
	o.Url = v
}

// GetAuthor returns the Author field value
// If the value is explicit nil, the zero value for NullableGitUser will be returned
func (o *CommitCommit) GetAuthor() NullableGitUser {
	if o == nil || o.Author.Get() == nil {
		var ret NullableGitUser
		return ret
	}

	return *o.Author.Get()
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommitCommit) GetAuthorOk() (*NullableGitUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Author.Get(), o.Author.IsSet()
}

// SetAuthor sets field value
func (o *CommitCommit) SetAuthor(v NullableGitUser) {
	o.Author.Set(&v)
}

// GetCommitter returns the Committer field value
// If the value is explicit nil, the zero value for NullableGitUser will be returned
func (o *CommitCommit) GetCommitter() NullableGitUser {
	if o == nil || o.Committer.Get() == nil {
		var ret NullableGitUser
		return ret
	}

	return *o.Committer.Get()
}

// GetCommitterOk returns a tuple with the Committer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommitCommit) GetCommitterOk() (*NullableGitUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Committer.Get(), o.Committer.IsSet()
}

// SetCommitter sets field value
func (o *CommitCommit) SetCommitter(v NullableGitUser) {
	o.Committer.Set(&v)
}

// GetMessage returns the Message field value
func (o *CommitCommit) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CommitCommit) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CommitCommit) SetMessage(v string) {
	o.Message = v
}

// GetCommentCount returns the CommentCount field value
func (o *CommitCommit) GetCommentCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CommentCount
}

// GetCommentCountOk returns a tuple with the CommentCount field value
// and a boolean to check if the value has been set.
func (o *CommitCommit) GetCommentCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommentCount, true
}

// SetCommentCount sets field value
func (o *CommitCommit) SetCommentCount(v int32) {
	o.CommentCount = v
}

// GetTree returns the Tree field value
func (o *CommitCommit) GetTree() CommitCommitTree {
	if o == nil {
		var ret CommitCommitTree
		return ret
	}

	return o.Tree
}

// GetTreeOk returns a tuple with the Tree field value
// and a boolean to check if the value has been set.
func (o *CommitCommit) GetTreeOk() (*CommitCommitTree, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tree, true
}

// SetTree sets field value
func (o *CommitCommit) SetTree(v CommitCommitTree) {
	o.Tree = v
}

// GetVerification returns the Verification field value if set, zero value otherwise.
func (o *CommitCommit) GetVerification() Verification {
	if o == nil || o.Verification == nil {
		var ret Verification
		return ret
	}
	return *o.Verification
}

// GetVerificationOk returns a tuple with the Verification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitCommit) GetVerificationOk() (*Verification, bool) {
	if o == nil || o.Verification == nil {
		return nil, false
	}
	return o.Verification, true
}

// HasVerification returns a boolean if a field has been set.
func (o *CommitCommit) HasVerification() bool {
	if o != nil && o.Verification != nil {
		return true
	}

	return false
}

// SetVerification gets a reference to the given Verification and assigns it to the Verification field.
func (o *CommitCommit) SetVerification(v Verification) {
	o.Verification = &v
}

func (o CommitCommit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["author"] = o.Author.Get()
	}
	if true {
		toSerialize["committer"] = o.Committer.Get()
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["comment_count"] = o.CommentCount
	}
	if true {
		toSerialize["tree"] = o.Tree
	}
	if o.Verification != nil {
		toSerialize["verification"] = o.Verification
	}
	return json.Marshal(toSerialize)
}

type NullableCommitCommit struct {
	value *CommitCommit
	isSet bool
}

func (v NullableCommitCommit) Get() *CommitCommit {
	return v.value
}

func (v *NullableCommitCommit) Set(val *CommitCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitCommit(val *CommitCommit) *NullableCommitCommit {
	return &NullableCommitCommit{value: val, isSet: true}
}

func (v NullableCommitCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


