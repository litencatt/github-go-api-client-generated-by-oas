/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// GistHistory Gist History
type GistHistory struct {
	User NullableNullableSimpleUser `json:"user,omitempty"`
	Version *string `json:"version,omitempty"`
	CommittedAt *time.Time `json:"committed_at,omitempty"`
	ChangeStatus *GistHistoryChangeStatus `json:"change_status,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewGistHistory instantiates a new GistHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGistHistory() *GistHistory {
	this := GistHistory{}
	return &this
}

// NewGistHistoryWithDefaults instantiates a new GistHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGistHistoryWithDefaults() *GistHistory {
	this := GistHistory{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GistHistory) GetUser() NullableSimpleUser {
	if o == nil || o.User.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GistHistory) GetUserOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *GistHistory) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableNullableSimpleUser and assigns it to the User field.
func (o *GistHistory) SetUser(v NullableSimpleUser) {
	o.User.Set(&v)
}
// SetUserNil sets the value for User to be an explicit nil
func (o *GistHistory) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *GistHistory) UnsetUser() {
	o.User.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *GistHistory) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistHistory) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *GistHistory) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *GistHistory) SetVersion(v string) {
	o.Version = &v
}

// GetCommittedAt returns the CommittedAt field value if set, zero value otherwise.
func (o *GistHistory) GetCommittedAt() time.Time {
	if o == nil || o.CommittedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CommittedAt
}

// GetCommittedAtOk returns a tuple with the CommittedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistHistory) GetCommittedAtOk() (*time.Time, bool) {
	if o == nil || o.CommittedAt == nil {
		return nil, false
	}
	return o.CommittedAt, true
}

// HasCommittedAt returns a boolean if a field has been set.
func (o *GistHistory) HasCommittedAt() bool {
	if o != nil && o.CommittedAt != nil {
		return true
	}

	return false
}

// SetCommittedAt gets a reference to the given time.Time and assigns it to the CommittedAt field.
func (o *GistHistory) SetCommittedAt(v time.Time) {
	o.CommittedAt = &v
}

// GetChangeStatus returns the ChangeStatus field value if set, zero value otherwise.
func (o *GistHistory) GetChangeStatus() GistHistoryChangeStatus {
	if o == nil || o.ChangeStatus == nil {
		var ret GistHistoryChangeStatus
		return ret
	}
	return *o.ChangeStatus
}

// GetChangeStatusOk returns a tuple with the ChangeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistHistory) GetChangeStatusOk() (*GistHistoryChangeStatus, bool) {
	if o == nil || o.ChangeStatus == nil {
		return nil, false
	}
	return o.ChangeStatus, true
}

// HasChangeStatus returns a boolean if a field has been set.
func (o *GistHistory) HasChangeStatus() bool {
	if o != nil && o.ChangeStatus != nil {
		return true
	}

	return false
}

// SetChangeStatus gets a reference to the given GistHistoryChangeStatus and assigns it to the ChangeStatus field.
func (o *GistHistory) SetChangeStatus(v GistHistoryChangeStatus) {
	o.ChangeStatus = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GistHistory) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistHistory) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GistHistory) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GistHistory) SetUrl(v string) {
	o.Url = &v
}

func (o GistHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.CommittedAt != nil {
		toSerialize["committed_at"] = o.CommittedAt
	}
	if o.ChangeStatus != nil {
		toSerialize["change_status"] = o.ChangeStatus
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableGistHistory struct {
	value *GistHistory
	isSet bool
}

func (v NullableGistHistory) Get() *GistHistory {
	return v.value
}

func (v *NullableGistHistory) Set(val *GistHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableGistHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableGistHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGistHistory(val *GistHistory) *NullableGistHistory {
	return &NullableGistHistory{value: val, isSet: true}
}

func (v NullableGistHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGistHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


