/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ManifestFile struct for ManifestFile
type ManifestFile struct {
	// The path of the manifest file relative to the root of the Git repository.
	SourceLocation *string `json:"source_location,omitempty"`
}

// NewManifestFile instantiates a new ManifestFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManifestFile() *ManifestFile {
	this := ManifestFile{}
	return &this
}

// NewManifestFileWithDefaults instantiates a new ManifestFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManifestFileWithDefaults() *ManifestFile {
	this := ManifestFile{}
	return &this
}

// GetSourceLocation returns the SourceLocation field value if set, zero value otherwise.
func (o *ManifestFile) GetSourceLocation() string {
	if o == nil || o.SourceLocation == nil {
		var ret string
		return ret
	}
	return *o.SourceLocation
}

// GetSourceLocationOk returns a tuple with the SourceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManifestFile) GetSourceLocationOk() (*string, bool) {
	if o == nil || o.SourceLocation == nil {
		return nil, false
	}
	return o.SourceLocation, true
}

// HasSourceLocation returns a boolean if a field has been set.
func (o *ManifestFile) HasSourceLocation() bool {
	if o != nil && o.SourceLocation != nil {
		return true
	}

	return false
}

// SetSourceLocation gets a reference to the given string and assigns it to the SourceLocation field.
func (o *ManifestFile) SetSourceLocation(v string) {
	o.SourceLocation = &v
}

func (o ManifestFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceLocation != nil {
		toSerialize["source_location"] = o.SourceLocation
	}
	return json.Marshal(toSerialize)
}

type NullableManifestFile struct {
	value *ManifestFile
	isSet bool
}

func (v NullableManifestFile) Get() *ManifestFile {
	return v.value
}

func (v *NullableManifestFile) Set(val *ManifestFile) {
	v.value = val
	v.isSet = true
}

func (v NullableManifestFile) IsSet() bool {
	return v.isSet
}

func (v *NullableManifestFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManifestFile(val *ManifestFile) *NullableManifestFile {
	return &NullableManifestFile{value: val, isSet: true}
}

func (v NullableManifestFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManifestFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


