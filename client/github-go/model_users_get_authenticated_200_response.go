/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
	"fmt"
)

// UsersGetAuthenticated200Response - struct for UsersGetAuthenticated200Response
type UsersGetAuthenticated200Response struct {
	PrivateUser *PrivateUser
	PublicUser *PublicUser
}

// PrivateUserAsUsersGetAuthenticated200Response is a convenience function that returns PrivateUser wrapped in UsersGetAuthenticated200Response
func PrivateUserAsUsersGetAuthenticated200Response(v *PrivateUser) UsersGetAuthenticated200Response {
	return UsersGetAuthenticated200Response{
		PrivateUser: v,
	}
}

// PublicUserAsUsersGetAuthenticated200Response is a convenience function that returns PublicUser wrapped in UsersGetAuthenticated200Response
func PublicUserAsUsersGetAuthenticated200Response(v *PublicUser) UsersGetAuthenticated200Response {
	return UsersGetAuthenticated200Response{
		PublicUser: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UsersGetAuthenticated200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PrivateUser
	err = newStrictDecoder(data).Decode(&dst.PrivateUser)
	if err == nil {
		jsonPrivateUser, _ := json.Marshal(dst.PrivateUser)
		if string(jsonPrivateUser) == "{}" { // empty struct
			dst.PrivateUser = nil
		} else {
			match++
		}
	} else {
		dst.PrivateUser = nil
	}

	// try to unmarshal data into PublicUser
	err = newStrictDecoder(data).Decode(&dst.PublicUser)
	if err == nil {
		jsonPublicUser, _ := json.Marshal(dst.PublicUser)
		if string(jsonPublicUser) == "{}" { // empty struct
			dst.PublicUser = nil
		} else {
			match++
		}
	} else {
		dst.PublicUser = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PrivateUser = nil
		dst.PublicUser = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(UsersGetAuthenticated200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(UsersGetAuthenticated200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UsersGetAuthenticated200Response) MarshalJSON() ([]byte, error) {
	if src.PrivateUser != nil {
		return json.Marshal(&src.PrivateUser)
	}

	if src.PublicUser != nil {
		return json.Marshal(&src.PublicUser)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UsersGetAuthenticated200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PrivateUser != nil {
		return obj.PrivateUser
	}

	if obj.PublicUser != nil {
		return obj.PublicUser
	}

	// all schemas are nil
	return nil
}

type NullableUsersGetAuthenticated200Response struct {
	value *UsersGetAuthenticated200Response
	isSet bool
}

func (v NullableUsersGetAuthenticated200Response) Get() *UsersGetAuthenticated200Response {
	return v.value
}

func (v *NullableUsersGetAuthenticated200Response) Set(val *UsersGetAuthenticated200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersGetAuthenticated200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersGetAuthenticated200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersGetAuthenticated200Response(val *UsersGetAuthenticated200Response) *NullableUsersGetAuthenticated200Response {
	return &NullableUsersGetAuthenticated200Response{value: val, isSet: true}
}

func (v NullableUsersGetAuthenticated200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersGetAuthenticated200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


