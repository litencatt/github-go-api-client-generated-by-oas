/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// RepositorySubscription Repository invitations let you manage who you collaborate with.
type RepositorySubscription struct {
	// Determines if notifications should be received from this repository.
	Subscribed bool `json:"subscribed"`
	// Determines if all notifications should be blocked from this repository.
	Ignored bool `json:"ignored"`
	Reason NullableString `json:"reason"`
	CreatedAt time.Time `json:"created_at"`
	Url string `json:"url"`
	RepositoryUrl string `json:"repository_url"`
}

// NewRepositorySubscription instantiates a new RepositorySubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositorySubscription(subscribed bool, ignored bool, reason NullableString, createdAt time.Time, url string, repositoryUrl string) *RepositorySubscription {
	this := RepositorySubscription{}
	this.Subscribed = subscribed
	this.Ignored = ignored
	this.Reason = reason
	this.CreatedAt = createdAt
	this.Url = url
	this.RepositoryUrl = repositoryUrl
	return &this
}

// NewRepositorySubscriptionWithDefaults instantiates a new RepositorySubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositorySubscriptionWithDefaults() *RepositorySubscription {
	this := RepositorySubscription{}
	return &this
}

// GetSubscribed returns the Subscribed field value
func (o *RepositorySubscription) GetSubscribed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Subscribed
}

// GetSubscribedOk returns a tuple with the Subscribed field value
// and a boolean to check if the value has been set.
func (o *RepositorySubscription) GetSubscribedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscribed, true
}

// SetSubscribed sets field value
func (o *RepositorySubscription) SetSubscribed(v bool) {
	o.Subscribed = v
}

// GetIgnored returns the Ignored field value
func (o *RepositorySubscription) GetIgnored() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ignored
}

// GetIgnoredOk returns a tuple with the Ignored field value
// and a boolean to check if the value has been set.
func (o *RepositorySubscription) GetIgnoredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ignored, true
}

// SetIgnored sets field value
func (o *RepositorySubscription) SetIgnored(v bool) {
	o.Ignored = v
}

// GetReason returns the Reason field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RepositorySubscription) GetReason() string {
	if o == nil || o.Reason.Get() == nil {
		var ret string
		return ret
	}

	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositorySubscription) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// SetReason sets field value
func (o *RepositorySubscription) SetReason(v string) {
	o.Reason.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *RepositorySubscription) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RepositorySubscription) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RepositorySubscription) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUrl returns the Url field value
func (o *RepositorySubscription) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RepositorySubscription) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RepositorySubscription) SetUrl(v string) {
	o.Url = v
}

// GetRepositoryUrl returns the RepositoryUrl field value
func (o *RepositorySubscription) GetRepositoryUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositoryUrl
}

// GetRepositoryUrlOk returns a tuple with the RepositoryUrl field value
// and a boolean to check if the value has been set.
func (o *RepositorySubscription) GetRepositoryUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoryUrl, true
}

// SetRepositoryUrl sets field value
func (o *RepositorySubscription) SetRepositoryUrl(v string) {
	o.RepositoryUrl = v
}

func (o RepositorySubscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["subscribed"] = o.Subscribed
	}
	if true {
		toSerialize["ignored"] = o.Ignored
	}
	if true {
		toSerialize["reason"] = o.Reason.Get()
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["repository_url"] = o.RepositoryUrl
	}
	return json.Marshal(toSerialize)
}

type NullableRepositorySubscription struct {
	value *RepositorySubscription
	isSet bool
}

func (v NullableRepositorySubscription) Get() *RepositorySubscription {
	return v.value
}

func (v *NullableRepositorySubscription) Set(val *RepositorySubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositorySubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositorySubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositorySubscription(val *RepositorySubscription) *NullableRepositorySubscription {
	return &NullableRepositorySubscription{value: val, isSet: true}
}

func (v NullableRepositorySubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositorySubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


