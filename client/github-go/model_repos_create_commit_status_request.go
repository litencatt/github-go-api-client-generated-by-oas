/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReposCreateCommitStatusRequest struct for ReposCreateCommitStatusRequest
type ReposCreateCommitStatusRequest struct {
	// The state of the status.
	State string `json:"state"`
	// The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.   For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:   `http://ci.example.com/user/repo/build/sha`
	TargetUrl NullableString `json:"target_url,omitempty"`
	// A short description of the status.
	Description NullableString `json:"description,omitempty"`
	// A string label to differentiate this status from the status of other systems. This field is case-insensitive.
	Context *string `json:"context,omitempty"`
}

// NewReposCreateCommitStatusRequest instantiates a new ReposCreateCommitStatusRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReposCreateCommitStatusRequest(state string) *ReposCreateCommitStatusRequest {
	this := ReposCreateCommitStatusRequest{}
	this.State = state
	var context string = "default"
	this.Context = &context
	return &this
}

// NewReposCreateCommitStatusRequestWithDefaults instantiates a new ReposCreateCommitStatusRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReposCreateCommitStatusRequestWithDefaults() *ReposCreateCommitStatusRequest {
	this := ReposCreateCommitStatusRequest{}
	var context string = "default"
	this.Context = &context
	return &this
}

// GetState returns the State field value
func (o *ReposCreateCommitStatusRequest) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ReposCreateCommitStatusRequest) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ReposCreateCommitStatusRequest) SetState(v string) {
	o.State = v
}

// GetTargetUrl returns the TargetUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReposCreateCommitStatusRequest) GetTargetUrl() string {
	if o == nil || o.TargetUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetUrl.Get()
}

// GetTargetUrlOk returns a tuple with the TargetUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReposCreateCommitStatusRequest) GetTargetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetUrl.Get(), o.TargetUrl.IsSet()
}

// HasTargetUrl returns a boolean if a field has been set.
func (o *ReposCreateCommitStatusRequest) HasTargetUrl() bool {
	if o != nil && o.TargetUrl.IsSet() {
		return true
	}

	return false
}

// SetTargetUrl gets a reference to the given NullableString and assigns it to the TargetUrl field.
func (o *ReposCreateCommitStatusRequest) SetTargetUrl(v string) {
	o.TargetUrl.Set(&v)
}
// SetTargetUrlNil sets the value for TargetUrl to be an explicit nil
func (o *ReposCreateCommitStatusRequest) SetTargetUrlNil() {
	o.TargetUrl.Set(nil)
}

// UnsetTargetUrl ensures that no value is present for TargetUrl, not even an explicit nil
func (o *ReposCreateCommitStatusRequest) UnsetTargetUrl() {
	o.TargetUrl.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReposCreateCommitStatusRequest) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReposCreateCommitStatusRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ReposCreateCommitStatusRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ReposCreateCommitStatusRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ReposCreateCommitStatusRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ReposCreateCommitStatusRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ReposCreateCommitStatusRequest) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateCommitStatusRequest) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ReposCreateCommitStatusRequest) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *ReposCreateCommitStatusRequest) SetContext(v string) {
	o.Context = &v
}

func (o ReposCreateCommitStatusRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["state"] = o.State
	}
	if o.TargetUrl.IsSet() {
		toSerialize["target_url"] = o.TargetUrl.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	return json.Marshal(toSerialize)
}

type NullableReposCreateCommitStatusRequest struct {
	value *ReposCreateCommitStatusRequest
	isSet bool
}

func (v NullableReposCreateCommitStatusRequest) Get() *ReposCreateCommitStatusRequest {
	return v.value
}

func (v *NullableReposCreateCommitStatusRequest) Set(val *ReposCreateCommitStatusRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReposCreateCommitStatusRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReposCreateCommitStatusRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposCreateCommitStatusRequest(val *ReposCreateCommitStatusRequest) *NullableReposCreateCommitStatusRequest {
	return &NullableReposCreateCommitStatusRequest{value: val, isSet: true}
}

func (v NullableReposCreateCommitStatusRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposCreateCommitStatusRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


