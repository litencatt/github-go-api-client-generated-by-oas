/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// MergedUpstream Results of a successful merge upstream request
type MergedUpstream struct {
	Message *string `json:"message,omitempty"`
	MergeType *string `json:"merge_type,omitempty"`
	BaseBranch *string `json:"base_branch,omitempty"`
}

// NewMergedUpstream instantiates a new MergedUpstream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergedUpstream() *MergedUpstream {
	this := MergedUpstream{}
	return &this
}

// NewMergedUpstreamWithDefaults instantiates a new MergedUpstream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergedUpstreamWithDefaults() *MergedUpstream {
	this := MergedUpstream{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *MergedUpstream) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergedUpstream) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *MergedUpstream) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *MergedUpstream) SetMessage(v string) {
	o.Message = &v
}

// GetMergeType returns the MergeType field value if set, zero value otherwise.
func (o *MergedUpstream) GetMergeType() string {
	if o == nil || o.MergeType == nil {
		var ret string
		return ret
	}
	return *o.MergeType
}

// GetMergeTypeOk returns a tuple with the MergeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergedUpstream) GetMergeTypeOk() (*string, bool) {
	if o == nil || o.MergeType == nil {
		return nil, false
	}
	return o.MergeType, true
}

// HasMergeType returns a boolean if a field has been set.
func (o *MergedUpstream) HasMergeType() bool {
	if o != nil && o.MergeType != nil {
		return true
	}

	return false
}

// SetMergeType gets a reference to the given string and assigns it to the MergeType field.
func (o *MergedUpstream) SetMergeType(v string) {
	o.MergeType = &v
}

// GetBaseBranch returns the BaseBranch field value if set, zero value otherwise.
func (o *MergedUpstream) GetBaseBranch() string {
	if o == nil || o.BaseBranch == nil {
		var ret string
		return ret
	}
	return *o.BaseBranch
}

// GetBaseBranchOk returns a tuple with the BaseBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergedUpstream) GetBaseBranchOk() (*string, bool) {
	if o == nil || o.BaseBranch == nil {
		return nil, false
	}
	return o.BaseBranch, true
}

// HasBaseBranch returns a boolean if a field has been set.
func (o *MergedUpstream) HasBaseBranch() bool {
	if o != nil && o.BaseBranch != nil {
		return true
	}

	return false
}

// SetBaseBranch gets a reference to the given string and assigns it to the BaseBranch field.
func (o *MergedUpstream) SetBaseBranch(v string) {
	o.BaseBranch = &v
}

func (o MergedUpstream) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.MergeType != nil {
		toSerialize["merge_type"] = o.MergeType
	}
	if o.BaseBranch != nil {
		toSerialize["base_branch"] = o.BaseBranch
	}
	return json.Marshal(toSerialize)
}

type NullableMergedUpstream struct {
	value *MergedUpstream
	isSet bool
}

func (v NullableMergedUpstream) Get() *MergedUpstream {
	return v.value
}

func (v *NullableMergedUpstream) Set(val *MergedUpstream) {
	v.value = val
	v.isSet = true
}

func (v NullableMergedUpstream) IsSet() bool {
	return v.isSet
}

func (v *NullableMergedUpstream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergedUpstream(val *MergedUpstream) *NullableMergedUpstream {
	return &NullableMergedUpstream{value: val, isSet: true}
}

func (v NullableMergedUpstream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergedUpstream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


