/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// AuthenticationToken Authentication Token
type AuthenticationToken struct {
	// The token used for authentication
	Token string `json:"token"`
	// The time this token expires
	ExpiresAt time.Time `json:"expires_at"`
	Permissions map[string]interface{} `json:"permissions,omitempty"`
	// The repositories this token has access to
	Repositories []Repository `json:"repositories,omitempty"`
	SingleFile NullableString `json:"single_file,omitempty"`
	// Describe whether all repositories have been selected or there's a selection involved
	RepositorySelection *string `json:"repository_selection,omitempty"`
}

// NewAuthenticationToken instantiates a new AuthenticationToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationToken(token string, expiresAt time.Time) *AuthenticationToken {
	this := AuthenticationToken{}
	this.Token = token
	this.ExpiresAt = expiresAt
	return &this
}

// NewAuthenticationTokenWithDefaults instantiates a new AuthenticationToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationTokenWithDefaults() *AuthenticationToken {
	this := AuthenticationToken{}
	return &this
}

// GetToken returns the Token field value
func (o *AuthenticationToken) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *AuthenticationToken) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *AuthenticationToken) SetToken(v string) {
	o.Token = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *AuthenticationToken) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *AuthenticationToken) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *AuthenticationToken) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *AuthenticationToken) GetPermissions() map[string]interface{} {
	if o == nil || o.Permissions == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationToken) GetPermissionsOk() (map[string]interface{}, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *AuthenticationToken) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given map[string]interface{} and assigns it to the Permissions field.
func (o *AuthenticationToken) SetPermissions(v map[string]interface{}) {
	o.Permissions = v
}

// GetRepositories returns the Repositories field value if set, zero value otherwise.
func (o *AuthenticationToken) GetRepositories() []Repository {
	if o == nil || o.Repositories == nil {
		var ret []Repository
		return ret
	}
	return o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationToken) GetRepositoriesOk() ([]Repository, bool) {
	if o == nil || o.Repositories == nil {
		return nil, false
	}
	return o.Repositories, true
}

// HasRepositories returns a boolean if a field has been set.
func (o *AuthenticationToken) HasRepositories() bool {
	if o != nil && o.Repositories != nil {
		return true
	}

	return false
}

// SetRepositories gets a reference to the given []Repository and assigns it to the Repositories field.
func (o *AuthenticationToken) SetRepositories(v []Repository) {
	o.Repositories = v
}

// GetSingleFile returns the SingleFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthenticationToken) GetSingleFile() string {
	if o == nil || o.SingleFile.Get() == nil {
		var ret string
		return ret
	}
	return *o.SingleFile.Get()
}

// GetSingleFileOk returns a tuple with the SingleFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthenticationToken) GetSingleFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SingleFile.Get(), o.SingleFile.IsSet()
}

// HasSingleFile returns a boolean if a field has been set.
func (o *AuthenticationToken) HasSingleFile() bool {
	if o != nil && o.SingleFile.IsSet() {
		return true
	}

	return false
}

// SetSingleFile gets a reference to the given NullableString and assigns it to the SingleFile field.
func (o *AuthenticationToken) SetSingleFile(v string) {
	o.SingleFile.Set(&v)
}
// SetSingleFileNil sets the value for SingleFile to be an explicit nil
func (o *AuthenticationToken) SetSingleFileNil() {
	o.SingleFile.Set(nil)
}

// UnsetSingleFile ensures that no value is present for SingleFile, not even an explicit nil
func (o *AuthenticationToken) UnsetSingleFile() {
	o.SingleFile.Unset()
}

// GetRepositorySelection returns the RepositorySelection field value if set, zero value otherwise.
func (o *AuthenticationToken) GetRepositorySelection() string {
	if o == nil || o.RepositorySelection == nil {
		var ret string
		return ret
	}
	return *o.RepositorySelection
}

// GetRepositorySelectionOk returns a tuple with the RepositorySelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationToken) GetRepositorySelectionOk() (*string, bool) {
	if o == nil || o.RepositorySelection == nil {
		return nil, false
	}
	return o.RepositorySelection, true
}

// HasRepositorySelection returns a boolean if a field has been set.
func (o *AuthenticationToken) HasRepositorySelection() bool {
	if o != nil && o.RepositorySelection != nil {
		return true
	}

	return false
}

// SetRepositorySelection gets a reference to the given string and assigns it to the RepositorySelection field.
func (o *AuthenticationToken) SetRepositorySelection(v string) {
	o.RepositorySelection = &v
}

func (o AuthenticationToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["token"] = o.Token
	}
	if true {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	if o.Repositories != nil {
		toSerialize["repositories"] = o.Repositories
	}
	if o.SingleFile.IsSet() {
		toSerialize["single_file"] = o.SingleFile.Get()
	}
	if o.RepositorySelection != nil {
		toSerialize["repository_selection"] = o.RepositorySelection
	}
	return json.Marshal(toSerialize)
}

type NullableAuthenticationToken struct {
	value *AuthenticationToken
	isSet bool
}

func (v NullableAuthenticationToken) Get() *AuthenticationToken {
	return v.value
}

func (v *NullableAuthenticationToken) Set(val *AuthenticationToken) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationToken) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationToken(val *AuthenticationToken) *NullableAuthenticationToken {
	return &NullableAuthenticationToken{value: val, isSet: true}
}

func (v NullableAuthenticationToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


