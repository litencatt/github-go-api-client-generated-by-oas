/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// CodeScanningAlertDismissedReason **Required when the state is dismissed.** The reason for dismissing or closing the alert.
type CodeScanningAlertDismissedReason string

// List of code-scanning-alert-dismissed-reason
const (
	NULL CodeScanningAlertDismissedReason = "null"
	FALSE_POSITIVE CodeScanningAlertDismissedReason = "false positive"
	WONT_FIX CodeScanningAlertDismissedReason = "won't fix"
	USED_IN_TESTS CodeScanningAlertDismissedReason = "used in tests"
)

// All allowed values of CodeScanningAlertDismissedReason enum
var AllowedCodeScanningAlertDismissedReasonEnumValues = []CodeScanningAlertDismissedReason{
	"null",
	"false positive",
	"won't fix",
	"used in tests",
}

func (v *CodeScanningAlertDismissedReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CodeScanningAlertDismissedReason(value)
	for _, existing := range AllowedCodeScanningAlertDismissedReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CodeScanningAlertDismissedReason", value)
}

// NewCodeScanningAlertDismissedReasonFromValue returns a pointer to a valid CodeScanningAlertDismissedReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCodeScanningAlertDismissedReasonFromValue(v string) (*CodeScanningAlertDismissedReason, error) {
	ev := CodeScanningAlertDismissedReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CodeScanningAlertDismissedReason: valid values are %v", v, AllowedCodeScanningAlertDismissedReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CodeScanningAlertDismissedReason) IsValid() bool {
	for _, existing := range AllowedCodeScanningAlertDismissedReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to code-scanning-alert-dismissed-reason value
func (v CodeScanningAlertDismissedReason) Ptr() *CodeScanningAlertDismissedReason {
	return &v
}

type NullableCodeScanningAlertDismissedReason struct {
	value *CodeScanningAlertDismissedReason
	isSet bool
}

func (v NullableCodeScanningAlertDismissedReason) Get() *CodeScanningAlertDismissedReason {
	return v.value
}

func (v *NullableCodeScanningAlertDismissedReason) Set(val *CodeScanningAlertDismissedReason) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeScanningAlertDismissedReason) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeScanningAlertDismissedReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeScanningAlertDismissedReason(val *CodeScanningAlertDismissedReason) *NullableCodeScanningAlertDismissedReason {
	return &NullableCodeScanningAlertDismissedReason{value: val, isSet: true}
}

func (v NullableCodeScanningAlertDismissedReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeScanningAlertDismissedReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

