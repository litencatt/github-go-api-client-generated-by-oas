/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// GitCreateCommitRequestAuthor Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
type GitCreateCommitRequestAuthor struct {
	// The name of the author (or committer) of the commit
	Name string `json:"name"`
	// The email of the author (or committer) of the commit
	Email string `json:"email"`
	// Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Date *time.Time `json:"date,omitempty"`
}

// NewGitCreateCommitRequestAuthor instantiates a new GitCreateCommitRequestAuthor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitCreateCommitRequestAuthor(name string, email string) *GitCreateCommitRequestAuthor {
	this := GitCreateCommitRequestAuthor{}
	this.Name = name
	this.Email = email
	return &this
}

// NewGitCreateCommitRequestAuthorWithDefaults instantiates a new GitCreateCommitRequestAuthor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitCreateCommitRequestAuthorWithDefaults() *GitCreateCommitRequestAuthor {
	this := GitCreateCommitRequestAuthor{}
	return &this
}

// GetName returns the Name field value
func (o *GitCreateCommitRequestAuthor) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GitCreateCommitRequestAuthor) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GitCreateCommitRequestAuthor) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *GitCreateCommitRequestAuthor) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *GitCreateCommitRequestAuthor) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *GitCreateCommitRequestAuthor) SetEmail(v string) {
	o.Email = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *GitCreateCommitRequestAuthor) GetDate() time.Time {
	if o == nil || o.Date == nil {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateCommitRequestAuthor) GetDateOk() (*time.Time, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *GitCreateCommitRequestAuthor) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *GitCreateCommitRequestAuthor) SetDate(v time.Time) {
	o.Date = &v
}

func (o GitCreateCommitRequestAuthor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

type NullableGitCreateCommitRequestAuthor struct {
	value *GitCreateCommitRequestAuthor
	isSet bool
}

func (v NullableGitCreateCommitRequestAuthor) Get() *GitCreateCommitRequestAuthor {
	return v.value
}

func (v *NullableGitCreateCommitRequestAuthor) Set(val *GitCreateCommitRequestAuthor) {
	v.value = val
	v.isSet = true
}

func (v NullableGitCreateCommitRequestAuthor) IsSet() bool {
	return v.isSet
}

func (v *NullableGitCreateCommitRequestAuthor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitCreateCommitRequestAuthor(val *GitCreateCommitRequestAuthor) *NullableGitCreateCommitRequestAuthor {
	return &NullableGitCreateCommitRequestAuthor{value: val, isSet: true}
}

func (v NullableGitCreateCommitRequestAuthor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitCreateCommitRequestAuthor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


