/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReposMergeRequest struct for ReposMergeRequest
type ReposMergeRequest struct {
	// The name of the base branch that the head will be merged into.
	Base string `json:"base"`
	// The head to merge. This can be a branch name or a commit SHA1.
	Head string `json:"head"`
	// Commit message to use for the merge commit. If omitted, a default message will be used.
	CommitMessage *string `json:"commit_message,omitempty"`
}

// NewReposMergeRequest instantiates a new ReposMergeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReposMergeRequest(base string, head string) *ReposMergeRequest {
	this := ReposMergeRequest{}
	this.Base = base
	this.Head = head
	return &this
}

// NewReposMergeRequestWithDefaults instantiates a new ReposMergeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReposMergeRequestWithDefaults() *ReposMergeRequest {
	this := ReposMergeRequest{}
	return &this
}

// GetBase returns the Base field value
func (o *ReposMergeRequest) GetBase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Base
}

// GetBaseOk returns a tuple with the Base field value
// and a boolean to check if the value has been set.
func (o *ReposMergeRequest) GetBaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Base, true
}

// SetBase sets field value
func (o *ReposMergeRequest) SetBase(v string) {
	o.Base = v
}

// GetHead returns the Head field value
func (o *ReposMergeRequest) GetHead() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Head
}

// GetHeadOk returns a tuple with the Head field value
// and a boolean to check if the value has been set.
func (o *ReposMergeRequest) GetHeadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Head, true
}

// SetHead sets field value
func (o *ReposMergeRequest) SetHead(v string) {
	o.Head = v
}

// GetCommitMessage returns the CommitMessage field value if set, zero value otherwise.
func (o *ReposMergeRequest) GetCommitMessage() string {
	if o == nil || o.CommitMessage == nil {
		var ret string
		return ret
	}
	return *o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposMergeRequest) GetCommitMessageOk() (*string, bool) {
	if o == nil || o.CommitMessage == nil {
		return nil, false
	}
	return o.CommitMessage, true
}

// HasCommitMessage returns a boolean if a field has been set.
func (o *ReposMergeRequest) HasCommitMessage() bool {
	if o != nil && o.CommitMessage != nil {
		return true
	}

	return false
}

// SetCommitMessage gets a reference to the given string and assigns it to the CommitMessage field.
func (o *ReposMergeRequest) SetCommitMessage(v string) {
	o.CommitMessage = &v
}

func (o ReposMergeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["base"] = o.Base
	}
	if true {
		toSerialize["head"] = o.Head
	}
	if o.CommitMessage != nil {
		toSerialize["commit_message"] = o.CommitMessage
	}
	return json.Marshal(toSerialize)
}

type NullableReposMergeRequest struct {
	value *ReposMergeRequest
	isSet bool
}

func (v NullableReposMergeRequest) Get() *ReposMergeRequest {
	return v.value
}

func (v *NullableReposMergeRequest) Set(val *ReposMergeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReposMergeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReposMergeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposMergeRequest(val *ReposMergeRequest) *NullableReposMergeRequest {
	return &NullableReposMergeRequest{value: val, isSet: true}
}

func (v NullableReposMergeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposMergeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


