/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReposRenameBranchRequest struct for ReposRenameBranchRequest
type ReposRenameBranchRequest struct {
	// The new name of the branch.
	NewName string `json:"new_name"`
}

// NewReposRenameBranchRequest instantiates a new ReposRenameBranchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReposRenameBranchRequest(newName string) *ReposRenameBranchRequest {
	this := ReposRenameBranchRequest{}
	this.NewName = newName
	return &this
}

// NewReposRenameBranchRequestWithDefaults instantiates a new ReposRenameBranchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReposRenameBranchRequestWithDefaults() *ReposRenameBranchRequest {
	this := ReposRenameBranchRequest{}
	return &this
}

// GetNewName returns the NewName field value
func (o *ReposRenameBranchRequest) GetNewName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewName
}

// GetNewNameOk returns a tuple with the NewName field value
// and a boolean to check if the value has been set.
func (o *ReposRenameBranchRequest) GetNewNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewName, true
}

// SetNewName sets field value
func (o *ReposRenameBranchRequest) SetNewName(v string) {
	o.NewName = v
}

func (o ReposRenameBranchRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["new_name"] = o.NewName
	}
	return json.Marshal(toSerialize)
}

type NullableReposRenameBranchRequest struct {
	value *ReposRenameBranchRequest
	isSet bool
}

func (v NullableReposRenameBranchRequest) Get() *ReposRenameBranchRequest {
	return v.value
}

func (v *NullableReposRenameBranchRequest) Set(val *ReposRenameBranchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReposRenameBranchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReposRenameBranchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposRenameBranchRequest(val *ReposRenameBranchRequest) *NullableReposRenameBranchRequest {
	return &NullableReposRenameBranchRequest{value: val, isSet: true}
}

func (v NullableReposRenameBranchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposRenameBranchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


