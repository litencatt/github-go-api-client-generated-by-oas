/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// Blob Blob
type Blob struct {
	Content string `json:"content"`
	Encoding string `json:"encoding"`
	Url string `json:"url"`
	Sha string `json:"sha"`
	Size NullableInt32 `json:"size"`
	NodeId string `json:"node_id"`
	HighlightedContent *string `json:"highlighted_content,omitempty"`
}

// NewBlob instantiates a new Blob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlob(content string, encoding string, url string, sha string, size NullableInt32, nodeId string) *Blob {
	this := Blob{}
	this.Content = content
	this.Encoding = encoding
	this.Url = url
	this.Sha = sha
	this.Size = size
	this.NodeId = nodeId
	return &this
}

// NewBlobWithDefaults instantiates a new Blob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlobWithDefaults() *Blob {
	this := Blob{}
	return &this
}

// GetContent returns the Content field value
func (o *Blob) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *Blob) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *Blob) SetContent(v string) {
	o.Content = v
}

// GetEncoding returns the Encoding field value
func (o *Blob) GetEncoding() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value
// and a boolean to check if the value has been set.
func (o *Blob) GetEncodingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Encoding, true
}

// SetEncoding sets field value
func (o *Blob) SetEncoding(v string) {
	o.Encoding = v
}

// GetUrl returns the Url field value
func (o *Blob) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Blob) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Blob) SetUrl(v string) {
	o.Url = v
}

// GetSha returns the Sha field value
func (o *Blob) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *Blob) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *Blob) SetSha(v string) {
	o.Sha = v
}

// GetSize returns the Size field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Blob) GetSize() int32 {
	if o == nil || o.Size.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Blob) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// SetSize sets field value
func (o *Blob) SetSize(v int32) {
	o.Size.Set(&v)
}

// GetNodeId returns the NodeId field value
func (o *Blob) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *Blob) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *Blob) SetNodeId(v string) {
	o.NodeId = v
}

// GetHighlightedContent returns the HighlightedContent field value if set, zero value otherwise.
func (o *Blob) GetHighlightedContent() string {
	if o == nil || o.HighlightedContent == nil {
		var ret string
		return ret
	}
	return *o.HighlightedContent
}

// GetHighlightedContentOk returns a tuple with the HighlightedContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Blob) GetHighlightedContentOk() (*string, bool) {
	if o == nil || o.HighlightedContent == nil {
		return nil, false
	}
	return o.HighlightedContent, true
}

// HasHighlightedContent returns a boolean if a field has been set.
func (o *Blob) HasHighlightedContent() bool {
	if o != nil && o.HighlightedContent != nil {
		return true
	}

	return false
}

// SetHighlightedContent gets a reference to the given string and assigns it to the HighlightedContent field.
func (o *Blob) SetHighlightedContent(v string) {
	o.HighlightedContent = &v
}

func (o Blob) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["content"] = o.Content
	}
	if true {
		toSerialize["encoding"] = o.Encoding
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["sha"] = o.Sha
	}
	if true {
		toSerialize["size"] = o.Size.Get()
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if o.HighlightedContent != nil {
		toSerialize["highlighted_content"] = o.HighlightedContent
	}
	return json.Marshal(toSerialize)
}

type NullableBlob struct {
	value *Blob
	isSet bool
}

func (v NullableBlob) Get() *Blob {
	return v.value
}

func (v *NullableBlob) Set(val *Blob) {
	v.value = val
	v.isSet = true
}

func (v NullableBlob) IsSet() bool {
	return v.isSet
}

func (v *NullableBlob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlob(val *Blob) *NullableBlob {
	return &NullableBlob{value: val, isSet: true}
}

func (v NullableBlob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


