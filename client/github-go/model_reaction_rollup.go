/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReactionRollup struct for ReactionRollup
type ReactionRollup struct {
	Url string `json:"url"`
	TotalCount int32 `json:"total_count"`
	Var1 int32 `json:"+1"`
	Var1 int32 `json:"-1"`
	Laugh int32 `json:"laugh"`
	Confused int32 `json:"confused"`
	Heart int32 `json:"heart"`
	Hooray int32 `json:"hooray"`
	Eyes int32 `json:"eyes"`
	Rocket int32 `json:"rocket"`
}

// NewReactionRollup instantiates a new ReactionRollup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactionRollup(url string, totalCount int32, var1 int32, var1 int32, laugh int32, confused int32, heart int32, hooray int32, eyes int32, rocket int32) *ReactionRollup {
	this := ReactionRollup{}
	this.Url = url
	this.TotalCount = totalCount
	this.Var1 = var1
	this.Var1 = var1
	this.Laugh = laugh
	this.Confused = confused
	this.Heart = heart
	this.Hooray = hooray
	this.Eyes = eyes
	this.Rocket = rocket
	return &this
}

// NewReactionRollupWithDefaults instantiates a new ReactionRollup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactionRollupWithDefaults() *ReactionRollup {
	this := ReactionRollup{}
	return &this
}

// GetUrl returns the Url field value
func (o *ReactionRollup) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ReactionRollup) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ReactionRollup) SetUrl(v string) {
	o.Url = v
}

// GetTotalCount returns the TotalCount field value
func (o *ReactionRollup) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *ReactionRollup) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *ReactionRollup) SetTotalCount(v int32) {
	o.TotalCount = v
}

// GetVar1 returns the Var1 field value
func (o *ReactionRollup) GetVar1() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Var1
}

// GetVar1Ok returns a tuple with the Var1 field value
// and a boolean to check if the value has been set.
func (o *ReactionRollup) GetVar1Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Var1, true
}

// SetVar1 sets field value
func (o *ReactionRollup) SetVar1(v int32) {
	o.Var1 = v
}

// GetVar1 returns the Var1 field value
func (o *ReactionRollup) GetVar1() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Var1
}

// GetVar1Ok returns a tuple with the Var1 field value
// and a boolean to check if the value has been set.
func (o *ReactionRollup) GetVar1Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Var1, true
}

// SetVar1 sets field value
func (o *ReactionRollup) SetVar1(v int32) {
	o.Var1 = v
}

// GetLaugh returns the Laugh field value
func (o *ReactionRollup) GetLaugh() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Laugh
}

// GetLaughOk returns a tuple with the Laugh field value
// and a boolean to check if the value has been set.
func (o *ReactionRollup) GetLaughOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Laugh, true
}

// SetLaugh sets field value
func (o *ReactionRollup) SetLaugh(v int32) {
	o.Laugh = v
}

// GetConfused returns the Confused field value
func (o *ReactionRollup) GetConfused() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Confused
}

// GetConfusedOk returns a tuple with the Confused field value
// and a boolean to check if the value has been set.
func (o *ReactionRollup) GetConfusedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Confused, true
}

// SetConfused sets field value
func (o *ReactionRollup) SetConfused(v int32) {
	o.Confused = v
}

// GetHeart returns the Heart field value
func (o *ReactionRollup) GetHeart() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Heart
}

// GetHeartOk returns a tuple with the Heart field value
// and a boolean to check if the value has been set.
func (o *ReactionRollup) GetHeartOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Heart, true
}

// SetHeart sets field value
func (o *ReactionRollup) SetHeart(v int32) {
	o.Heart = v
}

// GetHooray returns the Hooray field value
func (o *ReactionRollup) GetHooray() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Hooray
}

// GetHoorayOk returns a tuple with the Hooray field value
// and a boolean to check if the value has been set.
func (o *ReactionRollup) GetHoorayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hooray, true
}

// SetHooray sets field value
func (o *ReactionRollup) SetHooray(v int32) {
	o.Hooray = v
}

// GetEyes returns the Eyes field value
func (o *ReactionRollup) GetEyes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Eyes
}

// GetEyesOk returns a tuple with the Eyes field value
// and a boolean to check if the value has been set.
func (o *ReactionRollup) GetEyesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Eyes, true
}

// SetEyes sets field value
func (o *ReactionRollup) SetEyes(v int32) {
	o.Eyes = v
}

// GetRocket returns the Rocket field value
func (o *ReactionRollup) GetRocket() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rocket
}

// GetRocketOk returns a tuple with the Rocket field value
// and a boolean to check if the value has been set.
func (o *ReactionRollup) GetRocketOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rocket, true
}

// SetRocket sets field value
func (o *ReactionRollup) SetRocket(v int32) {
	o.Rocket = v
}

func (o ReactionRollup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["total_count"] = o.TotalCount
	}
	if true {
		toSerialize["+1"] = o.Var1
	}
	if true {
		toSerialize["-1"] = o.Var1
	}
	if true {
		toSerialize["laugh"] = o.Laugh
	}
	if true {
		toSerialize["confused"] = o.Confused
	}
	if true {
		toSerialize["heart"] = o.Heart
	}
	if true {
		toSerialize["hooray"] = o.Hooray
	}
	if true {
		toSerialize["eyes"] = o.Eyes
	}
	if true {
		toSerialize["rocket"] = o.Rocket
	}
	return json.Marshal(toSerialize)
}

type NullableReactionRollup struct {
	value *ReactionRollup
	isSet bool
}

func (v NullableReactionRollup) Get() *ReactionRollup {
	return v.value
}

func (v *NullableReactionRollup) Set(val *ReactionRollup) {
	v.value = val
	v.isSet = true
}

func (v NullableReactionRollup) IsSet() bool {
	return v.isSet
}

func (v *NullableReactionRollup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactionRollup(val *ReactionRollup) *NullableReactionRollup {
	return &NullableReactionRollup{value: val, isSet: true}
}

func (v NullableReactionRollup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactionRollup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


