/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReviewRequestRemovedIssueEvent Review Request Removed Issue Event
type ReviewRequestRemovedIssueEvent struct {
	Id int32 `json:"id"`
	NodeId string `json:"node_id"`
	Url string `json:"url"`
	Actor SimpleUser `json:"actor"`
	Event string `json:"event"`
	CommitId NullableString `json:"commit_id"`
	CommitUrl NullableString `json:"commit_url"`
	CreatedAt string `json:"created_at"`
	PerformedViaGithubApp NullableNullableIntegration `json:"performed_via_github_app"`
	ReviewRequester SimpleUser `json:"review_requester"`
	RequestedTeam *Team `json:"requested_team,omitempty"`
	RequestedReviewer *SimpleUser `json:"requested_reviewer,omitempty"`
}

// NewReviewRequestRemovedIssueEvent instantiates a new ReviewRequestRemovedIssueEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewRequestRemovedIssueEvent(id int32, nodeId string, url string, actor SimpleUser, event string, commitId NullableString, commitUrl NullableString, createdAt string, performedViaGithubApp NullableNullableIntegration, reviewRequester SimpleUser) *ReviewRequestRemovedIssueEvent {
	this := ReviewRequestRemovedIssueEvent{}
	this.Id = id
	this.NodeId = nodeId
	this.Url = url
	this.Actor = actor
	this.Event = event
	this.CommitId = commitId
	this.CommitUrl = commitUrl
	this.CreatedAt = createdAt
	this.PerformedViaGithubApp = performedViaGithubApp
	this.ReviewRequester = reviewRequester
	return &this
}

// NewReviewRequestRemovedIssueEventWithDefaults instantiates a new ReviewRequestRemovedIssueEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewRequestRemovedIssueEventWithDefaults() *ReviewRequestRemovedIssueEvent {
	this := ReviewRequestRemovedIssueEvent{}
	return &this
}

// GetId returns the Id field value
func (o *ReviewRequestRemovedIssueEvent) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReviewRequestRemovedIssueEvent) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReviewRequestRemovedIssueEvent) SetId(v int32) {
	o.Id = v
}

// GetNodeId returns the NodeId field value
func (o *ReviewRequestRemovedIssueEvent) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *ReviewRequestRemovedIssueEvent) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *ReviewRequestRemovedIssueEvent) SetNodeId(v string) {
	o.NodeId = v
}

// GetUrl returns the Url field value
func (o *ReviewRequestRemovedIssueEvent) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ReviewRequestRemovedIssueEvent) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ReviewRequestRemovedIssueEvent) SetUrl(v string) {
	o.Url = v
}

// GetActor returns the Actor field value
func (o *ReviewRequestRemovedIssueEvent) GetActor() SimpleUser {
	if o == nil {
		var ret SimpleUser
		return ret
	}

	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value
// and a boolean to check if the value has been set.
func (o *ReviewRequestRemovedIssueEvent) GetActorOk() (*SimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actor, true
}

// SetActor sets field value
func (o *ReviewRequestRemovedIssueEvent) SetActor(v SimpleUser) {
	o.Actor = v
}

// GetEvent returns the Event field value
func (o *ReviewRequestRemovedIssueEvent) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *ReviewRequestRemovedIssueEvent) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *ReviewRequestRemovedIssueEvent) SetEvent(v string) {
	o.Event = v
}

// GetCommitId returns the CommitId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ReviewRequestRemovedIssueEvent) GetCommitId() string {
	if o == nil || o.CommitId.Get() == nil {
		var ret string
		return ret
	}

	return *o.CommitId.Get()
}

// GetCommitIdOk returns a tuple with the CommitId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReviewRequestRemovedIssueEvent) GetCommitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitId.Get(), o.CommitId.IsSet()
}

// SetCommitId sets field value
func (o *ReviewRequestRemovedIssueEvent) SetCommitId(v string) {
	o.CommitId.Set(&v)
}

// GetCommitUrl returns the CommitUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ReviewRequestRemovedIssueEvent) GetCommitUrl() string {
	if o == nil || o.CommitUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.CommitUrl.Get()
}

// GetCommitUrlOk returns a tuple with the CommitUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReviewRequestRemovedIssueEvent) GetCommitUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitUrl.Get(), o.CommitUrl.IsSet()
}

// SetCommitUrl sets field value
func (o *ReviewRequestRemovedIssueEvent) SetCommitUrl(v string) {
	o.CommitUrl.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *ReviewRequestRemovedIssueEvent) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ReviewRequestRemovedIssueEvent) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ReviewRequestRemovedIssueEvent) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetPerformedViaGithubApp returns the PerformedViaGithubApp field value
// If the value is explicit nil, the zero value for NullableIntegration will be returned
func (o *ReviewRequestRemovedIssueEvent) GetPerformedViaGithubApp() NullableIntegration {
	if o == nil || o.PerformedViaGithubApp.Get() == nil {
		var ret NullableIntegration
		return ret
	}

	return *o.PerformedViaGithubApp.Get()
}

// GetPerformedViaGithubAppOk returns a tuple with the PerformedViaGithubApp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReviewRequestRemovedIssueEvent) GetPerformedViaGithubAppOk() (*NullableIntegration, bool) {
	if o == nil {
		return nil, false
	}
	return o.PerformedViaGithubApp.Get(), o.PerformedViaGithubApp.IsSet()
}

// SetPerformedViaGithubApp sets field value
func (o *ReviewRequestRemovedIssueEvent) SetPerformedViaGithubApp(v NullableIntegration) {
	o.PerformedViaGithubApp.Set(&v)
}

// GetReviewRequester returns the ReviewRequester field value
func (o *ReviewRequestRemovedIssueEvent) GetReviewRequester() SimpleUser {
	if o == nil {
		var ret SimpleUser
		return ret
	}

	return o.ReviewRequester
}

// GetReviewRequesterOk returns a tuple with the ReviewRequester field value
// and a boolean to check if the value has been set.
func (o *ReviewRequestRemovedIssueEvent) GetReviewRequesterOk() (*SimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReviewRequester, true
}

// SetReviewRequester sets field value
func (o *ReviewRequestRemovedIssueEvent) SetReviewRequester(v SimpleUser) {
	o.ReviewRequester = v
}

// GetRequestedTeam returns the RequestedTeam field value if set, zero value otherwise.
func (o *ReviewRequestRemovedIssueEvent) GetRequestedTeam() Team {
	if o == nil || o.RequestedTeam == nil {
		var ret Team
		return ret
	}
	return *o.RequestedTeam
}

// GetRequestedTeamOk returns a tuple with the RequestedTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewRequestRemovedIssueEvent) GetRequestedTeamOk() (*Team, bool) {
	if o == nil || o.RequestedTeam == nil {
		return nil, false
	}
	return o.RequestedTeam, true
}

// HasRequestedTeam returns a boolean if a field has been set.
func (o *ReviewRequestRemovedIssueEvent) HasRequestedTeam() bool {
	if o != nil && o.RequestedTeam != nil {
		return true
	}

	return false
}

// SetRequestedTeam gets a reference to the given Team and assigns it to the RequestedTeam field.
func (o *ReviewRequestRemovedIssueEvent) SetRequestedTeam(v Team) {
	o.RequestedTeam = &v
}

// GetRequestedReviewer returns the RequestedReviewer field value if set, zero value otherwise.
func (o *ReviewRequestRemovedIssueEvent) GetRequestedReviewer() SimpleUser {
	if o == nil || o.RequestedReviewer == nil {
		var ret SimpleUser
		return ret
	}
	return *o.RequestedReviewer
}

// GetRequestedReviewerOk returns a tuple with the RequestedReviewer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewRequestRemovedIssueEvent) GetRequestedReviewerOk() (*SimpleUser, bool) {
	if o == nil || o.RequestedReviewer == nil {
		return nil, false
	}
	return o.RequestedReviewer, true
}

// HasRequestedReviewer returns a boolean if a field has been set.
func (o *ReviewRequestRemovedIssueEvent) HasRequestedReviewer() bool {
	if o != nil && o.RequestedReviewer != nil {
		return true
	}

	return false
}

// SetRequestedReviewer gets a reference to the given SimpleUser and assigns it to the RequestedReviewer field.
func (o *ReviewRequestRemovedIssueEvent) SetRequestedReviewer(v SimpleUser) {
	o.RequestedReviewer = &v
}

func (o ReviewRequestRemovedIssueEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["actor"] = o.Actor
	}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["commit_id"] = o.CommitId.Get()
	}
	if true {
		toSerialize["commit_url"] = o.CommitUrl.Get()
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["performed_via_github_app"] = o.PerformedViaGithubApp.Get()
	}
	if true {
		toSerialize["review_requester"] = o.ReviewRequester
	}
	if o.RequestedTeam != nil {
		toSerialize["requested_team"] = o.RequestedTeam
	}
	if o.RequestedReviewer != nil {
		toSerialize["requested_reviewer"] = o.RequestedReviewer
	}
	return json.Marshal(toSerialize)
}

type NullableReviewRequestRemovedIssueEvent struct {
	value *ReviewRequestRemovedIssueEvent
	isSet bool
}

func (v NullableReviewRequestRemovedIssueEvent) Get() *ReviewRequestRemovedIssueEvent {
	return v.value
}

func (v *NullableReviewRequestRemovedIssueEvent) Set(val *ReviewRequestRemovedIssueEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewRequestRemovedIssueEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewRequestRemovedIssueEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewRequestRemovedIssueEvent(val *ReviewRequestRemovedIssueEvent) *NullableReviewRequestRemovedIssueEvent {
	return &NullableReviewRequestRemovedIssueEvent{value: val, isSet: true}
}

func (v NullableReviewRequestRemovedIssueEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewRequestRemovedIssueEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


