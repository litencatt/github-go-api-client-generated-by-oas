/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// IssuesAddLabelsRequest - struct for IssuesAddLabelsRequest
type IssuesAddLabelsRequest struct {
	IssuesAddLabelsRequestOneOf *IssuesAddLabelsRequestOneOf
	IssuesSetLabelsRequestOneOf1 *IssuesSetLabelsRequestOneOf1
	ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner *[]IssuesSetLabelsRequestOneOf1LabelsInner
	ArrayOfString *[]string
	String *string
}

// IssuesAddLabelsRequestOneOfAsIssuesAddLabelsRequest is a convenience function that returns IssuesAddLabelsRequestOneOf wrapped in IssuesAddLabelsRequest
func IssuesAddLabelsRequestOneOfAsIssuesAddLabelsRequest(v *IssuesAddLabelsRequestOneOf) IssuesAddLabelsRequest {
	return IssuesAddLabelsRequest{
		IssuesAddLabelsRequestOneOf: v,
	}
}

// IssuesSetLabelsRequestOneOf1AsIssuesAddLabelsRequest is a convenience function that returns IssuesSetLabelsRequestOneOf1 wrapped in IssuesAddLabelsRequest
func IssuesSetLabelsRequestOneOf1AsIssuesAddLabelsRequest(v *IssuesSetLabelsRequestOneOf1) IssuesAddLabelsRequest {
	return IssuesAddLabelsRequest{
		IssuesSetLabelsRequestOneOf1: v,
	}
}

// []IssuesSetLabelsRequestOneOf1LabelsInnerAsIssuesAddLabelsRequest is a convenience function that returns []IssuesSetLabelsRequestOneOf1LabelsInner wrapped in IssuesAddLabelsRequest
func ArrayOfIssuesSetLabelsRequestOneOf1LabelsInnerAsIssuesAddLabelsRequest(v *[]IssuesSetLabelsRequestOneOf1LabelsInner) IssuesAddLabelsRequest {
	return IssuesAddLabelsRequest{
		ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner: v,
	}
}

// []stringAsIssuesAddLabelsRequest is a convenience function that returns []string wrapped in IssuesAddLabelsRequest
func ArrayOfStringAsIssuesAddLabelsRequest(v *[]string) IssuesAddLabelsRequest {
	return IssuesAddLabelsRequest{
		ArrayOfString: v,
	}
}

// stringAsIssuesAddLabelsRequest is a convenience function that returns string wrapped in IssuesAddLabelsRequest
func StringAsIssuesAddLabelsRequest(v *string) IssuesAddLabelsRequest {
	return IssuesAddLabelsRequest{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IssuesAddLabelsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IssuesAddLabelsRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.IssuesAddLabelsRequestOneOf)
	if err == nil {
		jsonIssuesAddLabelsRequestOneOf, _ := json.Marshal(dst.IssuesAddLabelsRequestOneOf)
		if string(jsonIssuesAddLabelsRequestOneOf) == "{}" { // empty struct
			dst.IssuesAddLabelsRequestOneOf = nil
		} else {
			match++
		}
	} else {
		dst.IssuesAddLabelsRequestOneOf = nil
	}

	// try to unmarshal data into IssuesSetLabelsRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.IssuesSetLabelsRequestOneOf1)
	if err == nil {
		jsonIssuesSetLabelsRequestOneOf1, _ := json.Marshal(dst.IssuesSetLabelsRequestOneOf1)
		if string(jsonIssuesSetLabelsRequestOneOf1) == "{}" { // empty struct
			dst.IssuesSetLabelsRequestOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.IssuesSetLabelsRequestOneOf1 = nil
	}

	// try to unmarshal data into ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner)
	if err == nil {
		jsonArrayOfIssuesSetLabelsRequestOneOf1LabelsInner, _ := json.Marshal(dst.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner)
		if string(jsonArrayOfIssuesSetLabelsRequestOneOf1LabelsInner) == "{}" { // empty struct
			dst.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IssuesAddLabelsRequestOneOf = nil
		dst.IssuesSetLabelsRequestOneOf1 = nil
		dst.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner = nil
		dst.ArrayOfString = nil
		dst.String = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(IssuesAddLabelsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(IssuesAddLabelsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IssuesAddLabelsRequest) MarshalJSON() ([]byte, error) {
	if src.IssuesAddLabelsRequestOneOf != nil {
		return json.Marshal(&src.IssuesAddLabelsRequestOneOf)
	}

	if src.IssuesSetLabelsRequestOneOf1 != nil {
		return json.Marshal(&src.IssuesSetLabelsRequestOneOf1)
	}

	if src.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner != nil {
		return json.Marshal(&src.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IssuesAddLabelsRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IssuesAddLabelsRequestOneOf != nil {
		return obj.IssuesAddLabelsRequestOneOf
	}

	if obj.IssuesSetLabelsRequestOneOf1 != nil {
		return obj.IssuesSetLabelsRequestOneOf1
	}

	if obj.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner != nil {
		return obj.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableIssuesAddLabelsRequest struct {
	value *IssuesAddLabelsRequest
	isSet bool
}

func (v NullableIssuesAddLabelsRequest) Get() *IssuesAddLabelsRequest {
	return v.value
}

func (v *NullableIssuesAddLabelsRequest) Set(val *IssuesAddLabelsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesAddLabelsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesAddLabelsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesAddLabelsRequest(val *IssuesAddLabelsRequest) *NullableIssuesAddLabelsRequest {
	return &NullableIssuesAddLabelsRequest{value: val, isSet: true}
}

func (v NullableIssuesAddLabelsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesAddLabelsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


