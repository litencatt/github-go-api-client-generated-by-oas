/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// CodeScanningAlertInstance struct for CodeScanningAlertInstance
type CodeScanningAlertInstance struct {
	// The full Git reference, formatted as `refs/heads/<branch name>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
	Ref *string `json:"ref,omitempty"`
	// Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
	AnalysisKey *string `json:"analysis_key,omitempty"`
	// Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
	Environment *string `json:"environment,omitempty"`
	// Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
	Category *string `json:"category,omitempty"`
	State *CodeScanningAlertState `json:"state,omitempty"`
	CommitSha *string `json:"commit_sha,omitempty"`
	Message *CodeScanningAlertInstanceMessage `json:"message,omitempty"`
	Location *CodeScanningAlertLocation `json:"location,omitempty"`
	HtmlUrl *string `json:"html_url,omitempty"`
	// Classifications that have been applied to the file that triggered the alert. For example identifying it as documentation, or a generated file.
	Classifications []CodeScanningAlertClassification `json:"classifications,omitempty"`
}

// NewCodeScanningAlertInstance instantiates a new CodeScanningAlertInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeScanningAlertInstance() *CodeScanningAlertInstance {
	this := CodeScanningAlertInstance{}
	return &this
}

// NewCodeScanningAlertInstanceWithDefaults instantiates a new CodeScanningAlertInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeScanningAlertInstanceWithDefaults() *CodeScanningAlertInstance {
	this := CodeScanningAlertInstance{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *CodeScanningAlertInstance) GetRef() string {
	if o == nil || o.Ref == nil {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertInstance) GetRefOk() (*string, bool) {
	if o == nil || o.Ref == nil {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *CodeScanningAlertInstance) HasRef() bool {
	if o != nil && o.Ref != nil {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *CodeScanningAlertInstance) SetRef(v string) {
	o.Ref = &v
}

// GetAnalysisKey returns the AnalysisKey field value if set, zero value otherwise.
func (o *CodeScanningAlertInstance) GetAnalysisKey() string {
	if o == nil || o.AnalysisKey == nil {
		var ret string
		return ret
	}
	return *o.AnalysisKey
}

// GetAnalysisKeyOk returns a tuple with the AnalysisKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertInstance) GetAnalysisKeyOk() (*string, bool) {
	if o == nil || o.AnalysisKey == nil {
		return nil, false
	}
	return o.AnalysisKey, true
}

// HasAnalysisKey returns a boolean if a field has been set.
func (o *CodeScanningAlertInstance) HasAnalysisKey() bool {
	if o != nil && o.AnalysisKey != nil {
		return true
	}

	return false
}

// SetAnalysisKey gets a reference to the given string and assigns it to the AnalysisKey field.
func (o *CodeScanningAlertInstance) SetAnalysisKey(v string) {
	o.AnalysisKey = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *CodeScanningAlertInstance) GetEnvironment() string {
	if o == nil || o.Environment == nil {
		var ret string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertInstance) GetEnvironmentOk() (*string, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *CodeScanningAlertInstance) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given string and assigns it to the Environment field.
func (o *CodeScanningAlertInstance) SetEnvironment(v string) {
	o.Environment = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *CodeScanningAlertInstance) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertInstance) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *CodeScanningAlertInstance) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *CodeScanningAlertInstance) SetCategory(v string) {
	o.Category = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CodeScanningAlertInstance) GetState() CodeScanningAlertState {
	if o == nil || o.State == nil {
		var ret CodeScanningAlertState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertInstance) GetStateOk() (*CodeScanningAlertState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CodeScanningAlertInstance) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given CodeScanningAlertState and assigns it to the State field.
func (o *CodeScanningAlertInstance) SetState(v CodeScanningAlertState) {
	o.State = &v
}

// GetCommitSha returns the CommitSha field value if set, zero value otherwise.
func (o *CodeScanningAlertInstance) GetCommitSha() string {
	if o == nil || o.CommitSha == nil {
		var ret string
		return ret
	}
	return *o.CommitSha
}

// GetCommitShaOk returns a tuple with the CommitSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertInstance) GetCommitShaOk() (*string, bool) {
	if o == nil || o.CommitSha == nil {
		return nil, false
	}
	return o.CommitSha, true
}

// HasCommitSha returns a boolean if a field has been set.
func (o *CodeScanningAlertInstance) HasCommitSha() bool {
	if o != nil && o.CommitSha != nil {
		return true
	}

	return false
}

// SetCommitSha gets a reference to the given string and assigns it to the CommitSha field.
func (o *CodeScanningAlertInstance) SetCommitSha(v string) {
	o.CommitSha = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CodeScanningAlertInstance) GetMessage() CodeScanningAlertInstanceMessage {
	if o == nil || o.Message == nil {
		var ret CodeScanningAlertInstanceMessage
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertInstance) GetMessageOk() (*CodeScanningAlertInstanceMessage, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CodeScanningAlertInstance) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given CodeScanningAlertInstanceMessage and assigns it to the Message field.
func (o *CodeScanningAlertInstance) SetMessage(v CodeScanningAlertInstanceMessage) {
	o.Message = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CodeScanningAlertInstance) GetLocation() CodeScanningAlertLocation {
	if o == nil || o.Location == nil {
		var ret CodeScanningAlertLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertInstance) GetLocationOk() (*CodeScanningAlertLocation, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CodeScanningAlertInstance) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given CodeScanningAlertLocation and assigns it to the Location field.
func (o *CodeScanningAlertInstance) SetLocation(v CodeScanningAlertLocation) {
	o.Location = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *CodeScanningAlertInstance) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertInstance) GetHtmlUrlOk() (*string, bool) {
	if o == nil || o.HtmlUrl == nil {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *CodeScanningAlertInstance) HasHtmlUrl() bool {
	if o != nil && o.HtmlUrl != nil {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *CodeScanningAlertInstance) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetClassifications returns the Classifications field value if set, zero value otherwise.
func (o *CodeScanningAlertInstance) GetClassifications() []CodeScanningAlertClassification {
	if o == nil || o.Classifications == nil {
		var ret []CodeScanningAlertClassification
		return ret
	}
	return o.Classifications
}

// GetClassificationsOk returns a tuple with the Classifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertInstance) GetClassificationsOk() ([]CodeScanningAlertClassification, bool) {
	if o == nil || o.Classifications == nil {
		return nil, false
	}
	return o.Classifications, true
}

// HasClassifications returns a boolean if a field has been set.
func (o *CodeScanningAlertInstance) HasClassifications() bool {
	if o != nil && o.Classifications != nil {
		return true
	}

	return false
}

// SetClassifications gets a reference to the given []CodeScanningAlertClassification and assigns it to the Classifications field.
func (o *CodeScanningAlertInstance) SetClassifications(v []CodeScanningAlertClassification) {
	o.Classifications = v
}

func (o CodeScanningAlertInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ref != nil {
		toSerialize["ref"] = o.Ref
	}
	if o.AnalysisKey != nil {
		toSerialize["analysis_key"] = o.AnalysisKey
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.CommitSha != nil {
		toSerialize["commit_sha"] = o.CommitSha
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.HtmlUrl != nil {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if o.Classifications != nil {
		toSerialize["classifications"] = o.Classifications
	}
	return json.Marshal(toSerialize)
}

type NullableCodeScanningAlertInstance struct {
	value *CodeScanningAlertInstance
	isSet bool
}

func (v NullableCodeScanningAlertInstance) Get() *CodeScanningAlertInstance {
	return v.value
}

func (v *NullableCodeScanningAlertInstance) Set(val *CodeScanningAlertInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeScanningAlertInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeScanningAlertInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeScanningAlertInstance(val *CodeScanningAlertInstance) *NullableCodeScanningAlertInstance {
	return &NullableCodeScanningAlertInstance{value: val, isSet: true}
}

func (v NullableCodeScanningAlertInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeScanningAlertInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


