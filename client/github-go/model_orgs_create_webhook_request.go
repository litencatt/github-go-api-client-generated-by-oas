/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// OrgsCreateWebhookRequest struct for OrgsCreateWebhookRequest
type OrgsCreateWebhookRequest struct {
	// Must be passed as \"web\".
	Name string `json:"name"`
	Config OrgsCreateWebhookRequestConfig `json:"config"`
	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
	Events []string `json:"events,omitempty"`
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
	Active *bool `json:"active,omitempty"`
}

// NewOrgsCreateWebhookRequest instantiates a new OrgsCreateWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgsCreateWebhookRequest(name string, config OrgsCreateWebhookRequestConfig) *OrgsCreateWebhookRequest {
	this := OrgsCreateWebhookRequest{}
	this.Name = name
	this.Config = config
	var active bool = true
	this.Active = &active
	return &this
}

// NewOrgsCreateWebhookRequestWithDefaults instantiates a new OrgsCreateWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgsCreateWebhookRequestWithDefaults() *OrgsCreateWebhookRequest {
	this := OrgsCreateWebhookRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// GetName returns the Name field value
func (o *OrgsCreateWebhookRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrgsCreateWebhookRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrgsCreateWebhookRequest) SetName(v string) {
	o.Name = v
}

// GetConfig returns the Config field value
func (o *OrgsCreateWebhookRequest) GetConfig() OrgsCreateWebhookRequestConfig {
	if o == nil {
		var ret OrgsCreateWebhookRequestConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *OrgsCreateWebhookRequest) GetConfigOk() (*OrgsCreateWebhookRequestConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *OrgsCreateWebhookRequest) SetConfig(v OrgsCreateWebhookRequestConfig) {
	o.Config = v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *OrgsCreateWebhookRequest) GetEvents() []string {
	if o == nil || o.Events == nil {
		var ret []string
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsCreateWebhookRequest) GetEventsOk() ([]string, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *OrgsCreateWebhookRequest) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *OrgsCreateWebhookRequest) SetEvents(v []string) {
	o.Events = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *OrgsCreateWebhookRequest) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsCreateWebhookRequest) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *OrgsCreateWebhookRequest) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *OrgsCreateWebhookRequest) SetActive(v bool) {
	o.Active = &v
}

func (o OrgsCreateWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["config"] = o.Config
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	return json.Marshal(toSerialize)
}

type NullableOrgsCreateWebhookRequest struct {
	value *OrgsCreateWebhookRequest
	isSet bool
}

func (v NullableOrgsCreateWebhookRequest) Get() *OrgsCreateWebhookRequest {
	return v.value
}

func (v *NullableOrgsCreateWebhookRequest) Set(val *OrgsCreateWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgsCreateWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgsCreateWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgsCreateWebhookRequest(val *OrgsCreateWebhookRequest) *NullableOrgsCreateWebhookRequest {
	return &NullableOrgsCreateWebhookRequest{value: val, isSet: true}
}

func (v NullableOrgsCreateWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgsCreateWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


