/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// SimpleRepository Simple Repository
type SimpleRepository struct {
	// A unique identifier of the repository.
	Id int32 `json:"id"`
	// The GraphQL identifier of the repository.
	NodeId string `json:"node_id"`
	// The name of the repository.
	Name string `json:"name"`
	// The full, globally unique, name of the repository.
	FullName string `json:"full_name"`
	Owner SimpleUser `json:"owner"`
	// Whether the repository is private.
	Private bool `json:"private"`
	// The URL to view the repository on GitHub.com.
	HtmlUrl string `json:"html_url"`
	// The repository description.
	Description NullableString `json:"description"`
	// Whether the repository is a fork.
	Fork bool `json:"fork"`
	// The URL to get more information about the repository from the GitHub API.
	Url string `json:"url"`
	// A template for the API URL to download the repository as an archive.
	ArchiveUrl string `json:"archive_url"`
	// A template for the API URL to list the available assignees for issues in the repository.
	AssigneesUrl string `json:"assignees_url"`
	// A template for the API URL to create or retrieve a raw Git blob in the repository.
	BlobsUrl string `json:"blobs_url"`
	// A template for the API URL to get information about branches in the repository.
	BranchesUrl string `json:"branches_url"`
	// A template for the API URL to get information about collaborators of the repository.
	CollaboratorsUrl string `json:"collaborators_url"`
	// A template for the API URL to get information about comments on the repository.
	CommentsUrl string `json:"comments_url"`
	// A template for the API URL to get information about commits on the repository.
	CommitsUrl string `json:"commits_url"`
	// A template for the API URL to compare two commits or refs.
	CompareUrl string `json:"compare_url"`
	// A template for the API URL to get the contents of the repository.
	ContentsUrl string `json:"contents_url"`
	// A template for the API URL to list the contributors to the repository.
	ContributorsUrl string `json:"contributors_url"`
	// The API URL to list the deployments of the repository.
	DeploymentsUrl string `json:"deployments_url"`
	// The API URL to list the downloads on the repository.
	DownloadsUrl string `json:"downloads_url"`
	// The API URL to list the events of the repository.
	EventsUrl string `json:"events_url"`
	// The API URL to list the forks of the repository.
	ForksUrl string `json:"forks_url"`
	// A template for the API URL to get information about Git commits of the repository.
	GitCommitsUrl string `json:"git_commits_url"`
	// A template for the API URL to get information about Git refs of the repository.
	GitRefsUrl string `json:"git_refs_url"`
	// A template for the API URL to get information about Git tags of the repository.
	GitTagsUrl string `json:"git_tags_url"`
	// A template for the API URL to get information about issue comments on the repository.
	IssueCommentUrl string `json:"issue_comment_url"`
	// A template for the API URL to get information about issue events on the repository.
	IssueEventsUrl string `json:"issue_events_url"`
	// A template for the API URL to get information about issues on the repository.
	IssuesUrl string `json:"issues_url"`
	// A template for the API URL to get information about deploy keys on the repository.
	KeysUrl string `json:"keys_url"`
	// A template for the API URL to get information about labels of the repository.
	LabelsUrl string `json:"labels_url"`
	// The API URL to get information about the languages of the repository.
	LanguagesUrl string `json:"languages_url"`
	// The API URL to merge branches in the repository.
	MergesUrl string `json:"merges_url"`
	// A template for the API URL to get information about milestones of the repository.
	MilestonesUrl string `json:"milestones_url"`
	// A template for the API URL to get information about notifications on the repository.
	NotificationsUrl string `json:"notifications_url"`
	// A template for the API URL to get information about pull requests on the repository.
	PullsUrl string `json:"pulls_url"`
	// A template for the API URL to get information about releases on the repository.
	ReleasesUrl string `json:"releases_url"`
	// The API URL to list the stargazers on the repository.
	StargazersUrl string `json:"stargazers_url"`
	// A template for the API URL to get information about statuses of a commit.
	StatusesUrl string `json:"statuses_url"`
	// The API URL to list the subscribers on the repository.
	SubscribersUrl string `json:"subscribers_url"`
	// The API URL to subscribe to notifications for this repository.
	SubscriptionUrl string `json:"subscription_url"`
	// The API URL to get information about tags on the repository.
	TagsUrl string `json:"tags_url"`
	// The API URL to list the teams on the repository.
	TeamsUrl string `json:"teams_url"`
	// A template for the API URL to create or retrieve a raw Git tree of the repository.
	TreesUrl string `json:"trees_url"`
	// The API URL to list the hooks on the repository.
	HooksUrl string `json:"hooks_url"`
}

// NewSimpleRepository instantiates a new SimpleRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleRepository(id int32, nodeId string, name string, fullName string, owner SimpleUser, private bool, htmlUrl string, description NullableString, fork bool, url string, archiveUrl string, assigneesUrl string, blobsUrl string, branchesUrl string, collaboratorsUrl string, commentsUrl string, commitsUrl string, compareUrl string, contentsUrl string, contributorsUrl string, deploymentsUrl string, downloadsUrl string, eventsUrl string, forksUrl string, gitCommitsUrl string, gitRefsUrl string, gitTagsUrl string, issueCommentUrl string, issueEventsUrl string, issuesUrl string, keysUrl string, labelsUrl string, languagesUrl string, mergesUrl string, milestonesUrl string, notificationsUrl string, pullsUrl string, releasesUrl string, stargazersUrl string, statusesUrl string, subscribersUrl string, subscriptionUrl string, tagsUrl string, teamsUrl string, treesUrl string, hooksUrl string) *SimpleRepository {
	this := SimpleRepository{}
	this.Id = id
	this.NodeId = nodeId
	this.Name = name
	this.FullName = fullName
	this.Owner = owner
	this.Private = private
	this.HtmlUrl = htmlUrl
	this.Description = description
	this.Fork = fork
	this.Url = url
	this.ArchiveUrl = archiveUrl
	this.AssigneesUrl = assigneesUrl
	this.BlobsUrl = blobsUrl
	this.BranchesUrl = branchesUrl
	this.CollaboratorsUrl = collaboratorsUrl
	this.CommentsUrl = commentsUrl
	this.CommitsUrl = commitsUrl
	this.CompareUrl = compareUrl
	this.ContentsUrl = contentsUrl
	this.ContributorsUrl = contributorsUrl
	this.DeploymentsUrl = deploymentsUrl
	this.DownloadsUrl = downloadsUrl
	this.EventsUrl = eventsUrl
	this.ForksUrl = forksUrl
	this.GitCommitsUrl = gitCommitsUrl
	this.GitRefsUrl = gitRefsUrl
	this.GitTagsUrl = gitTagsUrl
	this.IssueCommentUrl = issueCommentUrl
	this.IssueEventsUrl = issueEventsUrl
	this.IssuesUrl = issuesUrl
	this.KeysUrl = keysUrl
	this.LabelsUrl = labelsUrl
	this.LanguagesUrl = languagesUrl
	this.MergesUrl = mergesUrl
	this.MilestonesUrl = milestonesUrl
	this.NotificationsUrl = notificationsUrl
	this.PullsUrl = pullsUrl
	this.ReleasesUrl = releasesUrl
	this.StargazersUrl = stargazersUrl
	this.StatusesUrl = statusesUrl
	this.SubscribersUrl = subscribersUrl
	this.SubscriptionUrl = subscriptionUrl
	this.TagsUrl = tagsUrl
	this.TeamsUrl = teamsUrl
	this.TreesUrl = treesUrl
	this.HooksUrl = hooksUrl
	return &this
}

// NewSimpleRepositoryWithDefaults instantiates a new SimpleRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleRepositoryWithDefaults() *SimpleRepository {
	this := SimpleRepository{}
	return &this
}

// GetId returns the Id field value
func (o *SimpleRepository) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SimpleRepository) SetId(v int32) {
	o.Id = v
}

// GetNodeId returns the NodeId field value
func (o *SimpleRepository) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *SimpleRepository) SetNodeId(v string) {
	o.NodeId = v
}

// GetName returns the Name field value
func (o *SimpleRepository) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SimpleRepository) SetName(v string) {
	o.Name = v
}

// GetFullName returns the FullName field value
func (o *SimpleRepository) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *SimpleRepository) SetFullName(v string) {
	o.FullName = v
}

// GetOwner returns the Owner field value
func (o *SimpleRepository) GetOwner() SimpleUser {
	if o == nil {
		var ret SimpleUser
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetOwnerOk() (*SimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *SimpleRepository) SetOwner(v SimpleUser) {
	o.Owner = v
}

// GetPrivate returns the Private field value
func (o *SimpleRepository) GetPrivate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Private
}

// GetPrivateOk returns a tuple with the Private field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetPrivateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Private, true
}

// SetPrivate sets field value
func (o *SimpleRepository) SetPrivate(v bool) {
	o.Private = v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *SimpleRepository) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *SimpleRepository) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SimpleRepository) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimpleRepository) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *SimpleRepository) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetFork returns the Fork field value
func (o *SimpleRepository) GetFork() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Fork
}

// GetForkOk returns a tuple with the Fork field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetForkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fork, true
}

// SetFork sets field value
func (o *SimpleRepository) SetFork(v bool) {
	o.Fork = v
}

// GetUrl returns the Url field value
func (o *SimpleRepository) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SimpleRepository) SetUrl(v string) {
	o.Url = v
}

// GetArchiveUrl returns the ArchiveUrl field value
func (o *SimpleRepository) GetArchiveUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArchiveUrl
}

// GetArchiveUrlOk returns a tuple with the ArchiveUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetArchiveUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchiveUrl, true
}

// SetArchiveUrl sets field value
func (o *SimpleRepository) SetArchiveUrl(v string) {
	o.ArchiveUrl = v
}

// GetAssigneesUrl returns the AssigneesUrl field value
func (o *SimpleRepository) GetAssigneesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssigneesUrl
}

// GetAssigneesUrlOk returns a tuple with the AssigneesUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetAssigneesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssigneesUrl, true
}

// SetAssigneesUrl sets field value
func (o *SimpleRepository) SetAssigneesUrl(v string) {
	o.AssigneesUrl = v
}

// GetBlobsUrl returns the BlobsUrl field value
func (o *SimpleRepository) GetBlobsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlobsUrl
}

// GetBlobsUrlOk returns a tuple with the BlobsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetBlobsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlobsUrl, true
}

// SetBlobsUrl sets field value
func (o *SimpleRepository) SetBlobsUrl(v string) {
	o.BlobsUrl = v
}

// GetBranchesUrl returns the BranchesUrl field value
func (o *SimpleRepository) GetBranchesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BranchesUrl
}

// GetBranchesUrlOk returns a tuple with the BranchesUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetBranchesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BranchesUrl, true
}

// SetBranchesUrl sets field value
func (o *SimpleRepository) SetBranchesUrl(v string) {
	o.BranchesUrl = v
}

// GetCollaboratorsUrl returns the CollaboratorsUrl field value
func (o *SimpleRepository) GetCollaboratorsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CollaboratorsUrl
}

// GetCollaboratorsUrlOk returns a tuple with the CollaboratorsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetCollaboratorsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollaboratorsUrl, true
}

// SetCollaboratorsUrl sets field value
func (o *SimpleRepository) SetCollaboratorsUrl(v string) {
	o.CollaboratorsUrl = v
}

// GetCommentsUrl returns the CommentsUrl field value
func (o *SimpleRepository) GetCommentsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommentsUrl
}

// GetCommentsUrlOk returns a tuple with the CommentsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetCommentsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommentsUrl, true
}

// SetCommentsUrl sets field value
func (o *SimpleRepository) SetCommentsUrl(v string) {
	o.CommentsUrl = v
}

// GetCommitsUrl returns the CommitsUrl field value
func (o *SimpleRepository) GetCommitsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitsUrl
}

// GetCommitsUrlOk returns a tuple with the CommitsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetCommitsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitsUrl, true
}

// SetCommitsUrl sets field value
func (o *SimpleRepository) SetCommitsUrl(v string) {
	o.CommitsUrl = v
}

// GetCompareUrl returns the CompareUrl field value
func (o *SimpleRepository) GetCompareUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompareUrl
}

// GetCompareUrlOk returns a tuple with the CompareUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetCompareUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompareUrl, true
}

// SetCompareUrl sets field value
func (o *SimpleRepository) SetCompareUrl(v string) {
	o.CompareUrl = v
}

// GetContentsUrl returns the ContentsUrl field value
func (o *SimpleRepository) GetContentsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentsUrl
}

// GetContentsUrlOk returns a tuple with the ContentsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetContentsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentsUrl, true
}

// SetContentsUrl sets field value
func (o *SimpleRepository) SetContentsUrl(v string) {
	o.ContentsUrl = v
}

// GetContributorsUrl returns the ContributorsUrl field value
func (o *SimpleRepository) GetContributorsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContributorsUrl
}

// GetContributorsUrlOk returns a tuple with the ContributorsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetContributorsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContributorsUrl, true
}

// SetContributorsUrl sets field value
func (o *SimpleRepository) SetContributorsUrl(v string) {
	o.ContributorsUrl = v
}

// GetDeploymentsUrl returns the DeploymentsUrl field value
func (o *SimpleRepository) GetDeploymentsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploymentsUrl
}

// GetDeploymentsUrlOk returns a tuple with the DeploymentsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetDeploymentsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentsUrl, true
}

// SetDeploymentsUrl sets field value
func (o *SimpleRepository) SetDeploymentsUrl(v string) {
	o.DeploymentsUrl = v
}

// GetDownloadsUrl returns the DownloadsUrl field value
func (o *SimpleRepository) GetDownloadsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DownloadsUrl
}

// GetDownloadsUrlOk returns a tuple with the DownloadsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetDownloadsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DownloadsUrl, true
}

// SetDownloadsUrl sets field value
func (o *SimpleRepository) SetDownloadsUrl(v string) {
	o.DownloadsUrl = v
}

// GetEventsUrl returns the EventsUrl field value
func (o *SimpleRepository) GetEventsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventsUrl
}

// GetEventsUrlOk returns a tuple with the EventsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetEventsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventsUrl, true
}

// SetEventsUrl sets field value
func (o *SimpleRepository) SetEventsUrl(v string) {
	o.EventsUrl = v
}

// GetForksUrl returns the ForksUrl field value
func (o *SimpleRepository) GetForksUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForksUrl
}

// GetForksUrlOk returns a tuple with the ForksUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetForksUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForksUrl, true
}

// SetForksUrl sets field value
func (o *SimpleRepository) SetForksUrl(v string) {
	o.ForksUrl = v
}

// GetGitCommitsUrl returns the GitCommitsUrl field value
func (o *SimpleRepository) GetGitCommitsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitCommitsUrl
}

// GetGitCommitsUrlOk returns a tuple with the GitCommitsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetGitCommitsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitCommitsUrl, true
}

// SetGitCommitsUrl sets field value
func (o *SimpleRepository) SetGitCommitsUrl(v string) {
	o.GitCommitsUrl = v
}

// GetGitRefsUrl returns the GitRefsUrl field value
func (o *SimpleRepository) GetGitRefsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitRefsUrl
}

// GetGitRefsUrlOk returns a tuple with the GitRefsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetGitRefsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitRefsUrl, true
}

// SetGitRefsUrl sets field value
func (o *SimpleRepository) SetGitRefsUrl(v string) {
	o.GitRefsUrl = v
}

// GetGitTagsUrl returns the GitTagsUrl field value
func (o *SimpleRepository) GetGitTagsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitTagsUrl
}

// GetGitTagsUrlOk returns a tuple with the GitTagsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetGitTagsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitTagsUrl, true
}

// SetGitTagsUrl sets field value
func (o *SimpleRepository) SetGitTagsUrl(v string) {
	o.GitTagsUrl = v
}

// GetIssueCommentUrl returns the IssueCommentUrl field value
func (o *SimpleRepository) GetIssueCommentUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueCommentUrl
}

// GetIssueCommentUrlOk returns a tuple with the IssueCommentUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetIssueCommentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueCommentUrl, true
}

// SetIssueCommentUrl sets field value
func (o *SimpleRepository) SetIssueCommentUrl(v string) {
	o.IssueCommentUrl = v
}

// GetIssueEventsUrl returns the IssueEventsUrl field value
func (o *SimpleRepository) GetIssueEventsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueEventsUrl
}

// GetIssueEventsUrlOk returns a tuple with the IssueEventsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetIssueEventsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueEventsUrl, true
}

// SetIssueEventsUrl sets field value
func (o *SimpleRepository) SetIssueEventsUrl(v string) {
	o.IssueEventsUrl = v
}

// GetIssuesUrl returns the IssuesUrl field value
func (o *SimpleRepository) GetIssuesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssuesUrl
}

// GetIssuesUrlOk returns a tuple with the IssuesUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetIssuesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssuesUrl, true
}

// SetIssuesUrl sets field value
func (o *SimpleRepository) SetIssuesUrl(v string) {
	o.IssuesUrl = v
}

// GetKeysUrl returns the KeysUrl field value
func (o *SimpleRepository) GetKeysUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeysUrl
}

// GetKeysUrlOk returns a tuple with the KeysUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetKeysUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeysUrl, true
}

// SetKeysUrl sets field value
func (o *SimpleRepository) SetKeysUrl(v string) {
	o.KeysUrl = v
}

// GetLabelsUrl returns the LabelsUrl field value
func (o *SimpleRepository) GetLabelsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LabelsUrl
}

// GetLabelsUrlOk returns a tuple with the LabelsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetLabelsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LabelsUrl, true
}

// SetLabelsUrl sets field value
func (o *SimpleRepository) SetLabelsUrl(v string) {
	o.LabelsUrl = v
}

// GetLanguagesUrl returns the LanguagesUrl field value
func (o *SimpleRepository) GetLanguagesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LanguagesUrl
}

// GetLanguagesUrlOk returns a tuple with the LanguagesUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetLanguagesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LanguagesUrl, true
}

// SetLanguagesUrl sets field value
func (o *SimpleRepository) SetLanguagesUrl(v string) {
	o.LanguagesUrl = v
}

// GetMergesUrl returns the MergesUrl field value
func (o *SimpleRepository) GetMergesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MergesUrl
}

// GetMergesUrlOk returns a tuple with the MergesUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetMergesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MergesUrl, true
}

// SetMergesUrl sets field value
func (o *SimpleRepository) SetMergesUrl(v string) {
	o.MergesUrl = v
}

// GetMilestonesUrl returns the MilestonesUrl field value
func (o *SimpleRepository) GetMilestonesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MilestonesUrl
}

// GetMilestonesUrlOk returns a tuple with the MilestonesUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetMilestonesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MilestonesUrl, true
}

// SetMilestonesUrl sets field value
func (o *SimpleRepository) SetMilestonesUrl(v string) {
	o.MilestonesUrl = v
}

// GetNotificationsUrl returns the NotificationsUrl field value
func (o *SimpleRepository) GetNotificationsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationsUrl
}

// GetNotificationsUrlOk returns a tuple with the NotificationsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetNotificationsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationsUrl, true
}

// SetNotificationsUrl sets field value
func (o *SimpleRepository) SetNotificationsUrl(v string) {
	o.NotificationsUrl = v
}

// GetPullsUrl returns the PullsUrl field value
func (o *SimpleRepository) GetPullsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PullsUrl
}

// GetPullsUrlOk returns a tuple with the PullsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetPullsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PullsUrl, true
}

// SetPullsUrl sets field value
func (o *SimpleRepository) SetPullsUrl(v string) {
	o.PullsUrl = v
}

// GetReleasesUrl returns the ReleasesUrl field value
func (o *SimpleRepository) GetReleasesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleasesUrl
}

// GetReleasesUrlOk returns a tuple with the ReleasesUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetReleasesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleasesUrl, true
}

// SetReleasesUrl sets field value
func (o *SimpleRepository) SetReleasesUrl(v string) {
	o.ReleasesUrl = v
}

// GetStargazersUrl returns the StargazersUrl field value
func (o *SimpleRepository) GetStargazersUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StargazersUrl
}

// GetStargazersUrlOk returns a tuple with the StargazersUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetStargazersUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StargazersUrl, true
}

// SetStargazersUrl sets field value
func (o *SimpleRepository) SetStargazersUrl(v string) {
	o.StargazersUrl = v
}

// GetStatusesUrl returns the StatusesUrl field value
func (o *SimpleRepository) GetStatusesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusesUrl
}

// GetStatusesUrlOk returns a tuple with the StatusesUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetStatusesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusesUrl, true
}

// SetStatusesUrl sets field value
func (o *SimpleRepository) SetStatusesUrl(v string) {
	o.StatusesUrl = v
}

// GetSubscribersUrl returns the SubscribersUrl field value
func (o *SimpleRepository) GetSubscribersUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscribersUrl
}

// GetSubscribersUrlOk returns a tuple with the SubscribersUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetSubscribersUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscribersUrl, true
}

// SetSubscribersUrl sets field value
func (o *SimpleRepository) SetSubscribersUrl(v string) {
	o.SubscribersUrl = v
}

// GetSubscriptionUrl returns the SubscriptionUrl field value
func (o *SimpleRepository) GetSubscriptionUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubscriptionUrl
}

// GetSubscriptionUrlOk returns a tuple with the SubscriptionUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetSubscriptionUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionUrl, true
}

// SetSubscriptionUrl sets field value
func (o *SimpleRepository) SetSubscriptionUrl(v string) {
	o.SubscriptionUrl = v
}

// GetTagsUrl returns the TagsUrl field value
func (o *SimpleRepository) GetTagsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TagsUrl
}

// GetTagsUrlOk returns a tuple with the TagsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetTagsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TagsUrl, true
}

// SetTagsUrl sets field value
func (o *SimpleRepository) SetTagsUrl(v string) {
	o.TagsUrl = v
}

// GetTeamsUrl returns the TeamsUrl field value
func (o *SimpleRepository) GetTeamsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamsUrl
}

// GetTeamsUrlOk returns a tuple with the TeamsUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetTeamsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamsUrl, true
}

// SetTeamsUrl sets field value
func (o *SimpleRepository) SetTeamsUrl(v string) {
	o.TeamsUrl = v
}

// GetTreesUrl returns the TreesUrl field value
func (o *SimpleRepository) GetTreesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TreesUrl
}

// GetTreesUrlOk returns a tuple with the TreesUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetTreesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TreesUrl, true
}

// SetTreesUrl sets field value
func (o *SimpleRepository) SetTreesUrl(v string) {
	o.TreesUrl = v
}

// GetHooksUrl returns the HooksUrl field value
func (o *SimpleRepository) GetHooksUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HooksUrl
}

// GetHooksUrlOk returns a tuple with the HooksUrl field value
// and a boolean to check if the value has been set.
func (o *SimpleRepository) GetHooksUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HooksUrl, true
}

// SetHooksUrl sets field value
func (o *SimpleRepository) SetHooksUrl(v string) {
	o.HooksUrl = v
}

func (o SimpleRepository) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["full_name"] = o.FullName
	}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["private"] = o.Private
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if true {
		toSerialize["description"] = o.Description.Get()
	}
	if true {
		toSerialize["fork"] = o.Fork
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["archive_url"] = o.ArchiveUrl
	}
	if true {
		toSerialize["assignees_url"] = o.AssigneesUrl
	}
	if true {
		toSerialize["blobs_url"] = o.BlobsUrl
	}
	if true {
		toSerialize["branches_url"] = o.BranchesUrl
	}
	if true {
		toSerialize["collaborators_url"] = o.CollaboratorsUrl
	}
	if true {
		toSerialize["comments_url"] = o.CommentsUrl
	}
	if true {
		toSerialize["commits_url"] = o.CommitsUrl
	}
	if true {
		toSerialize["compare_url"] = o.CompareUrl
	}
	if true {
		toSerialize["contents_url"] = o.ContentsUrl
	}
	if true {
		toSerialize["contributors_url"] = o.ContributorsUrl
	}
	if true {
		toSerialize["deployments_url"] = o.DeploymentsUrl
	}
	if true {
		toSerialize["downloads_url"] = o.DownloadsUrl
	}
	if true {
		toSerialize["events_url"] = o.EventsUrl
	}
	if true {
		toSerialize["forks_url"] = o.ForksUrl
	}
	if true {
		toSerialize["git_commits_url"] = o.GitCommitsUrl
	}
	if true {
		toSerialize["git_refs_url"] = o.GitRefsUrl
	}
	if true {
		toSerialize["git_tags_url"] = o.GitTagsUrl
	}
	if true {
		toSerialize["issue_comment_url"] = o.IssueCommentUrl
	}
	if true {
		toSerialize["issue_events_url"] = o.IssueEventsUrl
	}
	if true {
		toSerialize["issues_url"] = o.IssuesUrl
	}
	if true {
		toSerialize["keys_url"] = o.KeysUrl
	}
	if true {
		toSerialize["labels_url"] = o.LabelsUrl
	}
	if true {
		toSerialize["languages_url"] = o.LanguagesUrl
	}
	if true {
		toSerialize["merges_url"] = o.MergesUrl
	}
	if true {
		toSerialize["milestones_url"] = o.MilestonesUrl
	}
	if true {
		toSerialize["notifications_url"] = o.NotificationsUrl
	}
	if true {
		toSerialize["pulls_url"] = o.PullsUrl
	}
	if true {
		toSerialize["releases_url"] = o.ReleasesUrl
	}
	if true {
		toSerialize["stargazers_url"] = o.StargazersUrl
	}
	if true {
		toSerialize["statuses_url"] = o.StatusesUrl
	}
	if true {
		toSerialize["subscribers_url"] = o.SubscribersUrl
	}
	if true {
		toSerialize["subscription_url"] = o.SubscriptionUrl
	}
	if true {
		toSerialize["tags_url"] = o.TagsUrl
	}
	if true {
		toSerialize["teams_url"] = o.TeamsUrl
	}
	if true {
		toSerialize["trees_url"] = o.TreesUrl
	}
	if true {
		toSerialize["hooks_url"] = o.HooksUrl
	}
	return json.Marshal(toSerialize)
}

type NullableSimpleRepository struct {
	value *SimpleRepository
	isSet bool
}

func (v NullableSimpleRepository) Get() *SimpleRepository {
	return v.value
}

func (v *NullableSimpleRepository) Set(val *SimpleRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleRepository(val *SimpleRepository) *NullableSimpleRepository {
	return &NullableSimpleRepository{value: val, isSet: true}
}

func (v NullableSimpleRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


