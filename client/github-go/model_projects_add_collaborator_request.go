/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ProjectsAddCollaboratorRequest struct for ProjectsAddCollaboratorRequest
type ProjectsAddCollaboratorRequest struct {
	// The permission to grant the collaborator.
	Permission *string `json:"permission,omitempty"`
}

// NewProjectsAddCollaboratorRequest instantiates a new ProjectsAddCollaboratorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsAddCollaboratorRequest() *ProjectsAddCollaboratorRequest {
	this := ProjectsAddCollaboratorRequest{}
	var permission string = "write"
	this.Permission = &permission
	return &this
}

// NewProjectsAddCollaboratorRequestWithDefaults instantiates a new ProjectsAddCollaboratorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsAddCollaboratorRequestWithDefaults() *ProjectsAddCollaboratorRequest {
	this := ProjectsAddCollaboratorRequest{}
	var permission string = "write"
	this.Permission = &permission
	return &this
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *ProjectsAddCollaboratorRequest) GetPermission() string {
	if o == nil || o.Permission == nil {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsAddCollaboratorRequest) GetPermissionOk() (*string, bool) {
	if o == nil || o.Permission == nil {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *ProjectsAddCollaboratorRequest) HasPermission() bool {
	if o != nil && o.Permission != nil {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *ProjectsAddCollaboratorRequest) SetPermission(v string) {
	o.Permission = &v
}

func (o ProjectsAddCollaboratorRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Permission != nil {
		toSerialize["permission"] = o.Permission
	}
	return json.Marshal(toSerialize)
}

type NullableProjectsAddCollaboratorRequest struct {
	value *ProjectsAddCollaboratorRequest
	isSet bool
}

func (v NullableProjectsAddCollaboratorRequest) Get() *ProjectsAddCollaboratorRequest {
	return v.value
}

func (v *NullableProjectsAddCollaboratorRequest) Set(val *ProjectsAddCollaboratorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsAddCollaboratorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsAddCollaboratorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsAddCollaboratorRequest(val *ProjectsAddCollaboratorRequest) *NullableProjectsAddCollaboratorRequest {
	return &NullableProjectsAddCollaboratorRequest{value: val, isSet: true}
}

func (v NullableProjectsAddCollaboratorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsAddCollaboratorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


