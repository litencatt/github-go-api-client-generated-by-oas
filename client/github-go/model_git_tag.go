/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// GitTag Metadata for a Git tag
type GitTag struct {
	NodeId string `json:"node_id"`
	// Name of the tag
	Tag string `json:"tag"`
	Sha string `json:"sha"`
	// URL for the tag
	Url string `json:"url"`
	// Message describing the purpose of the tag
	Message string `json:"message"`
	Tagger GitTagTagger `json:"tagger"`
	Object GitTagObject `json:"object"`
	Verification *Verification `json:"verification,omitempty"`
}

// NewGitTag instantiates a new GitTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitTag(nodeId string, tag string, sha string, url string, message string, tagger GitTagTagger, object GitTagObject) *GitTag {
	this := GitTag{}
	this.NodeId = nodeId
	this.Tag = tag
	this.Sha = sha
	this.Url = url
	this.Message = message
	this.Tagger = tagger
	this.Object = object
	return &this
}

// NewGitTagWithDefaults instantiates a new GitTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitTagWithDefaults() *GitTag {
	this := GitTag{}
	return &this
}

// GetNodeId returns the NodeId field value
func (o *GitTag) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *GitTag) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *GitTag) SetNodeId(v string) {
	o.NodeId = v
}

// GetTag returns the Tag field value
func (o *GitTag) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *GitTag) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *GitTag) SetTag(v string) {
	o.Tag = v
}

// GetSha returns the Sha field value
func (o *GitTag) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *GitTag) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *GitTag) SetSha(v string) {
	o.Sha = v
}

// GetUrl returns the Url field value
func (o *GitTag) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *GitTag) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *GitTag) SetUrl(v string) {
	o.Url = v
}

// GetMessage returns the Message field value
func (o *GitTag) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *GitTag) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *GitTag) SetMessage(v string) {
	o.Message = v
}

// GetTagger returns the Tagger field value
func (o *GitTag) GetTagger() GitTagTagger {
	if o == nil {
		var ret GitTagTagger
		return ret
	}

	return o.Tagger
}

// GetTaggerOk returns a tuple with the Tagger field value
// and a boolean to check if the value has been set.
func (o *GitTag) GetTaggerOk() (*GitTagTagger, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tagger, true
}

// SetTagger sets field value
func (o *GitTag) SetTagger(v GitTagTagger) {
	o.Tagger = v
}

// GetObject returns the Object field value
func (o *GitTag) GetObject() GitTagObject {
	if o == nil {
		var ret GitTagObject
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *GitTag) GetObjectOk() (*GitTagObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *GitTag) SetObject(v GitTagObject) {
	o.Object = v
}

// GetVerification returns the Verification field value if set, zero value otherwise.
func (o *GitTag) GetVerification() Verification {
	if o == nil || o.Verification == nil {
		var ret Verification
		return ret
	}
	return *o.Verification
}

// GetVerificationOk returns a tuple with the Verification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitTag) GetVerificationOk() (*Verification, bool) {
	if o == nil || o.Verification == nil {
		return nil, false
	}
	return o.Verification, true
}

// HasVerification returns a boolean if a field has been set.
func (o *GitTag) HasVerification() bool {
	if o != nil && o.Verification != nil {
		return true
	}

	return false
}

// SetVerification gets a reference to the given Verification and assigns it to the Verification field.
func (o *GitTag) SetVerification(v Verification) {
	o.Verification = &v
}

func (o GitTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if true {
		toSerialize["tag"] = o.Tag
	}
	if true {
		toSerialize["sha"] = o.Sha
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["tagger"] = o.Tagger
	}
	if true {
		toSerialize["object"] = o.Object
	}
	if o.Verification != nil {
		toSerialize["verification"] = o.Verification
	}
	return json.Marshal(toSerialize)
}

type NullableGitTag struct {
	value *GitTag
	isSet bool
}

func (v NullableGitTag) Get() *GitTag {
	return v.value
}

func (v *NullableGitTag) Set(val *GitTag) {
	v.value = val
	v.isSet = true
}

func (v NullableGitTag) IsSet() bool {
	return v.isSet
}

func (v *NullableGitTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitTag(val *GitTag) *NullableGitTag {
	return &NullableGitTag{value: val, isSet: true}
}

func (v NullableGitTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


