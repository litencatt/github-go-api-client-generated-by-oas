/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// GitCreateTagRequest struct for GitCreateTagRequest
type GitCreateTagRequest struct {
	// The tag's name. This is typically a version (e.g., \"v0.0.1\").
	Tag string `json:"tag"`
	// The tag message.
	Message string `json:"message"`
	// The SHA of the git object this is tagging.
	Object string `json:"object"`
	// The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
	Type string `json:"type"`
	Tagger *GitCreateTagRequestTagger `json:"tagger,omitempty"`
}

// NewGitCreateTagRequest instantiates a new GitCreateTagRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitCreateTagRequest(tag string, message string, object string, type_ string) *GitCreateTagRequest {
	this := GitCreateTagRequest{}
	this.Tag = tag
	this.Message = message
	this.Object = object
	this.Type = type_
	return &this
}

// NewGitCreateTagRequestWithDefaults instantiates a new GitCreateTagRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitCreateTagRequestWithDefaults() *GitCreateTagRequest {
	this := GitCreateTagRequest{}
	return &this
}

// GetTag returns the Tag field value
func (o *GitCreateTagRequest) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *GitCreateTagRequest) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *GitCreateTagRequest) SetTag(v string) {
	o.Tag = v
}

// GetMessage returns the Message field value
func (o *GitCreateTagRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *GitCreateTagRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *GitCreateTagRequest) SetMessage(v string) {
	o.Message = v
}

// GetObject returns the Object field value
func (o *GitCreateTagRequest) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *GitCreateTagRequest) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *GitCreateTagRequest) SetObject(v string) {
	o.Object = v
}

// GetType returns the Type field value
func (o *GitCreateTagRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GitCreateTagRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GitCreateTagRequest) SetType(v string) {
	o.Type = v
}

// GetTagger returns the Tagger field value if set, zero value otherwise.
func (o *GitCreateTagRequest) GetTagger() GitCreateTagRequestTagger {
	if o == nil || o.Tagger == nil {
		var ret GitCreateTagRequestTagger
		return ret
	}
	return *o.Tagger
}

// GetTaggerOk returns a tuple with the Tagger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateTagRequest) GetTaggerOk() (*GitCreateTagRequestTagger, bool) {
	if o == nil || o.Tagger == nil {
		return nil, false
	}
	return o.Tagger, true
}

// HasTagger returns a boolean if a field has been set.
func (o *GitCreateTagRequest) HasTagger() bool {
	if o != nil && o.Tagger != nil {
		return true
	}

	return false
}

// SetTagger gets a reference to the given GitCreateTagRequestTagger and assigns it to the Tagger field.
func (o *GitCreateTagRequest) SetTagger(v GitCreateTagRequestTagger) {
	o.Tagger = &v
}

func (o GitCreateTagRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tag"] = o.Tag
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["object"] = o.Object
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Tagger != nil {
		toSerialize["tagger"] = o.Tagger
	}
	return json.Marshal(toSerialize)
}

type NullableGitCreateTagRequest struct {
	value *GitCreateTagRequest
	isSet bool
}

func (v NullableGitCreateTagRequest) Get() *GitCreateTagRequest {
	return v.value
}

func (v *NullableGitCreateTagRequest) Set(val *GitCreateTagRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGitCreateTagRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGitCreateTagRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitCreateTagRequest(val *GitCreateTagRequest) *NullableGitCreateTagRequest {
	return &NullableGitCreateTagRequest{value: val, isSet: true}
}

func (v NullableGitCreateTagRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitCreateTagRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


