/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// IssuesUpdateRequest struct for IssuesUpdateRequest
type IssuesUpdateRequest struct {
	Title NullableIssuesUpdateRequestTitle `json:"title,omitempty"`
	// The contents of the issue.
	Body NullableString `json:"body,omitempty"`
	// Login for the user that this issue should be assigned to. **This field is deprecated.**
	Assignee NullableString `json:"assignee,omitempty"`
	// State of the issue. Either `open` or `closed`.
	State *string `json:"state,omitempty"`
	Milestone NullableIssuesUpdateRequestMilestone `json:"milestone,omitempty"`
	// Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
	Labels []IssuesCreateRequestLabelsInner `json:"labels,omitempty"`
	// Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
	Assignees []string `json:"assignees,omitempty"`
}

// NewIssuesUpdateRequest instantiates a new IssuesUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesUpdateRequest() *IssuesUpdateRequest {
	this := IssuesUpdateRequest{}
	return &this
}

// NewIssuesUpdateRequestWithDefaults instantiates a new IssuesUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesUpdateRequestWithDefaults() *IssuesUpdateRequest {
	this := IssuesUpdateRequest{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuesUpdateRequest) GetTitle() IssuesUpdateRequestTitle {
	if o == nil || o.Title.Get() == nil {
		var ret IssuesUpdateRequestTitle
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuesUpdateRequest) GetTitleOk() (*IssuesUpdateRequestTitle, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *IssuesUpdateRequest) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableIssuesUpdateRequestTitle and assigns it to the Title field.
func (o *IssuesUpdateRequest) SetTitle(v IssuesUpdateRequestTitle) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *IssuesUpdateRequest) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *IssuesUpdateRequest) UnsetTitle() {
	o.Title.Unset()
}

// GetBody returns the Body field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuesUpdateRequest) GetBody() string {
	if o == nil || o.Body.Get() == nil {
		var ret string
		return ret
	}
	return *o.Body.Get()
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuesUpdateRequest) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Body.Get(), o.Body.IsSet()
}

// HasBody returns a boolean if a field has been set.
func (o *IssuesUpdateRequest) HasBody() bool {
	if o != nil && o.Body.IsSet() {
		return true
	}

	return false
}

// SetBody gets a reference to the given NullableString and assigns it to the Body field.
func (o *IssuesUpdateRequest) SetBody(v string) {
	o.Body.Set(&v)
}
// SetBodyNil sets the value for Body to be an explicit nil
func (o *IssuesUpdateRequest) SetBodyNil() {
	o.Body.Set(nil)
}

// UnsetBody ensures that no value is present for Body, not even an explicit nil
func (o *IssuesUpdateRequest) UnsetBody() {
	o.Body.Unset()
}

// GetAssignee returns the Assignee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuesUpdateRequest) GetAssignee() string {
	if o == nil || o.Assignee.Get() == nil {
		var ret string
		return ret
	}
	return *o.Assignee.Get()
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuesUpdateRequest) GetAssigneeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assignee.Get(), o.Assignee.IsSet()
}

// HasAssignee returns a boolean if a field has been set.
func (o *IssuesUpdateRequest) HasAssignee() bool {
	if o != nil && o.Assignee.IsSet() {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given NullableString and assigns it to the Assignee field.
func (o *IssuesUpdateRequest) SetAssignee(v string) {
	o.Assignee.Set(&v)
}
// SetAssigneeNil sets the value for Assignee to be an explicit nil
func (o *IssuesUpdateRequest) SetAssigneeNil() {
	o.Assignee.Set(nil)
}

// UnsetAssignee ensures that no value is present for Assignee, not even an explicit nil
func (o *IssuesUpdateRequest) UnsetAssignee() {
	o.Assignee.Unset()
}

// GetState returns the State field value if set, zero value otherwise.
func (o *IssuesUpdateRequest) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesUpdateRequest) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *IssuesUpdateRequest) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *IssuesUpdateRequest) SetState(v string) {
	o.State = &v
}

// GetMilestone returns the Milestone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuesUpdateRequest) GetMilestone() IssuesUpdateRequestMilestone {
	if o == nil || o.Milestone.Get() == nil {
		var ret IssuesUpdateRequestMilestone
		return ret
	}
	return *o.Milestone.Get()
}

// GetMilestoneOk returns a tuple with the Milestone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuesUpdateRequest) GetMilestoneOk() (*IssuesUpdateRequestMilestone, bool) {
	if o == nil {
		return nil, false
	}
	return o.Milestone.Get(), o.Milestone.IsSet()
}

// HasMilestone returns a boolean if a field has been set.
func (o *IssuesUpdateRequest) HasMilestone() bool {
	if o != nil && o.Milestone.IsSet() {
		return true
	}

	return false
}

// SetMilestone gets a reference to the given NullableIssuesUpdateRequestMilestone and assigns it to the Milestone field.
func (o *IssuesUpdateRequest) SetMilestone(v IssuesUpdateRequestMilestone) {
	o.Milestone.Set(&v)
}
// SetMilestoneNil sets the value for Milestone to be an explicit nil
func (o *IssuesUpdateRequest) SetMilestoneNil() {
	o.Milestone.Set(nil)
}

// UnsetMilestone ensures that no value is present for Milestone, not even an explicit nil
func (o *IssuesUpdateRequest) UnsetMilestone() {
	o.Milestone.Unset()
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *IssuesUpdateRequest) GetLabels() []IssuesCreateRequestLabelsInner {
	if o == nil || o.Labels == nil {
		var ret []IssuesCreateRequestLabelsInner
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesUpdateRequest) GetLabelsOk() ([]IssuesCreateRequestLabelsInner, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *IssuesUpdateRequest) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []IssuesCreateRequestLabelsInner and assigns it to the Labels field.
func (o *IssuesUpdateRequest) SetLabels(v []IssuesCreateRequestLabelsInner) {
	o.Labels = v
}

// GetAssignees returns the Assignees field value if set, zero value otherwise.
func (o *IssuesUpdateRequest) GetAssignees() []string {
	if o == nil || o.Assignees == nil {
		var ret []string
		return ret
	}
	return o.Assignees
}

// GetAssigneesOk returns a tuple with the Assignees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesUpdateRequest) GetAssigneesOk() ([]string, bool) {
	if o == nil || o.Assignees == nil {
		return nil, false
	}
	return o.Assignees, true
}

// HasAssignees returns a boolean if a field has been set.
func (o *IssuesUpdateRequest) HasAssignees() bool {
	if o != nil && o.Assignees != nil {
		return true
	}

	return false
}

// SetAssignees gets a reference to the given []string and assigns it to the Assignees field.
func (o *IssuesUpdateRequest) SetAssignees(v []string) {
	o.Assignees = v
}

func (o IssuesUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Body.IsSet() {
		toSerialize["body"] = o.Body.Get()
	}
	if o.Assignee.IsSet() {
		toSerialize["assignee"] = o.Assignee.Get()
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Milestone.IsSet() {
		toSerialize["milestone"] = o.Milestone.Get()
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Assignees != nil {
		toSerialize["assignees"] = o.Assignees
	}
	return json.Marshal(toSerialize)
}

type NullableIssuesUpdateRequest struct {
	value *IssuesUpdateRequest
	isSet bool
}

func (v NullableIssuesUpdateRequest) Get() *IssuesUpdateRequest {
	return v.value
}

func (v *NullableIssuesUpdateRequest) Set(val *IssuesUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesUpdateRequest(val *IssuesUpdateRequest) *NullableIssuesUpdateRequest {
	return &NullableIssuesUpdateRequest{value: val, isSet: true}
}

func (v NullableIssuesUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


