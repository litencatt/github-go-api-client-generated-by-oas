/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// IssuesSetLabelsRequest - struct for IssuesSetLabelsRequest
type IssuesSetLabelsRequest struct {
	IssuesSetLabelsRequestOneOf *IssuesSetLabelsRequestOneOf
	IssuesSetLabelsRequestOneOf1 *IssuesSetLabelsRequestOneOf1
	ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner *[]IssuesSetLabelsRequestOneOf1LabelsInner
	ArrayOfString *[]string
	String *string
}

// IssuesSetLabelsRequestOneOfAsIssuesSetLabelsRequest is a convenience function that returns IssuesSetLabelsRequestOneOf wrapped in IssuesSetLabelsRequest
func IssuesSetLabelsRequestOneOfAsIssuesSetLabelsRequest(v *IssuesSetLabelsRequestOneOf) IssuesSetLabelsRequest {
	return IssuesSetLabelsRequest{
		IssuesSetLabelsRequestOneOf: v,
	}
}

// IssuesSetLabelsRequestOneOf1AsIssuesSetLabelsRequest is a convenience function that returns IssuesSetLabelsRequestOneOf1 wrapped in IssuesSetLabelsRequest
func IssuesSetLabelsRequestOneOf1AsIssuesSetLabelsRequest(v *IssuesSetLabelsRequestOneOf1) IssuesSetLabelsRequest {
	return IssuesSetLabelsRequest{
		IssuesSetLabelsRequestOneOf1: v,
	}
}

// []IssuesSetLabelsRequestOneOf1LabelsInnerAsIssuesSetLabelsRequest is a convenience function that returns []IssuesSetLabelsRequestOneOf1LabelsInner wrapped in IssuesSetLabelsRequest
func ArrayOfIssuesSetLabelsRequestOneOf1LabelsInnerAsIssuesSetLabelsRequest(v *[]IssuesSetLabelsRequestOneOf1LabelsInner) IssuesSetLabelsRequest {
	return IssuesSetLabelsRequest{
		ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner: v,
	}
}

// []stringAsIssuesSetLabelsRequest is a convenience function that returns []string wrapped in IssuesSetLabelsRequest
func ArrayOfStringAsIssuesSetLabelsRequest(v *[]string) IssuesSetLabelsRequest {
	return IssuesSetLabelsRequest{
		ArrayOfString: v,
	}
}

// stringAsIssuesSetLabelsRequest is a convenience function that returns string wrapped in IssuesSetLabelsRequest
func StringAsIssuesSetLabelsRequest(v *string) IssuesSetLabelsRequest {
	return IssuesSetLabelsRequest{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IssuesSetLabelsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IssuesSetLabelsRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.IssuesSetLabelsRequestOneOf)
	if err == nil {
		jsonIssuesSetLabelsRequestOneOf, _ := json.Marshal(dst.IssuesSetLabelsRequestOneOf)
		if string(jsonIssuesSetLabelsRequestOneOf) == "{}" { // empty struct
			dst.IssuesSetLabelsRequestOneOf = nil
		} else {
			match++
		}
	} else {
		dst.IssuesSetLabelsRequestOneOf = nil
	}

	// try to unmarshal data into IssuesSetLabelsRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.IssuesSetLabelsRequestOneOf1)
	if err == nil {
		jsonIssuesSetLabelsRequestOneOf1, _ := json.Marshal(dst.IssuesSetLabelsRequestOneOf1)
		if string(jsonIssuesSetLabelsRequestOneOf1) == "{}" { // empty struct
			dst.IssuesSetLabelsRequestOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.IssuesSetLabelsRequestOneOf1 = nil
	}

	// try to unmarshal data into ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner)
	if err == nil {
		jsonArrayOfIssuesSetLabelsRequestOneOf1LabelsInner, _ := json.Marshal(dst.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner)
		if string(jsonArrayOfIssuesSetLabelsRequestOneOf1LabelsInner) == "{}" { // empty struct
			dst.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IssuesSetLabelsRequestOneOf = nil
		dst.IssuesSetLabelsRequestOneOf1 = nil
		dst.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner = nil
		dst.ArrayOfString = nil
		dst.String = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(IssuesSetLabelsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(IssuesSetLabelsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IssuesSetLabelsRequest) MarshalJSON() ([]byte, error) {
	if src.IssuesSetLabelsRequestOneOf != nil {
		return json.Marshal(&src.IssuesSetLabelsRequestOneOf)
	}

	if src.IssuesSetLabelsRequestOneOf1 != nil {
		return json.Marshal(&src.IssuesSetLabelsRequestOneOf1)
	}

	if src.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner != nil {
		return json.Marshal(&src.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IssuesSetLabelsRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IssuesSetLabelsRequestOneOf != nil {
		return obj.IssuesSetLabelsRequestOneOf
	}

	if obj.IssuesSetLabelsRequestOneOf1 != nil {
		return obj.IssuesSetLabelsRequestOneOf1
	}

	if obj.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner != nil {
		return obj.ArrayOfIssuesSetLabelsRequestOneOf1LabelsInner
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableIssuesSetLabelsRequest struct {
	value *IssuesSetLabelsRequest
	isSet bool
}

func (v NullableIssuesSetLabelsRequest) Get() *IssuesSetLabelsRequest {
	return v.value
}

func (v *NullableIssuesSetLabelsRequest) Set(val *IssuesSetLabelsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesSetLabelsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesSetLabelsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesSetLabelsRequest(val *IssuesSetLabelsRequest) *NullableIssuesSetLabelsRequest {
	return &NullableIssuesSetLabelsRequest{value: val, isSet: true}
}

func (v NullableIssuesSetLabelsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesSetLabelsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


