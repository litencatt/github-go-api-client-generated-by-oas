/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// AuditLogEventActorLocation struct for AuditLogEventActorLocation
type AuditLogEventActorLocation struct {
	CountryName *string `json:"country_name,omitempty"`
}

// NewAuditLogEventActorLocation instantiates a new AuditLogEventActorLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogEventActorLocation() *AuditLogEventActorLocation {
	this := AuditLogEventActorLocation{}
	return &this
}

// NewAuditLogEventActorLocationWithDefaults instantiates a new AuditLogEventActorLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogEventActorLocationWithDefaults() *AuditLogEventActorLocation {
	this := AuditLogEventActorLocation{}
	return &this
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *AuditLogEventActorLocation) GetCountryName() string {
	if o == nil || o.CountryName == nil {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEventActorLocation) GetCountryNameOk() (*string, bool) {
	if o == nil || o.CountryName == nil {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *AuditLogEventActorLocation) HasCountryName() bool {
	if o != nil && o.CountryName != nil {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *AuditLogEventActorLocation) SetCountryName(v string) {
	o.CountryName = &v
}

func (o AuditLogEventActorLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CountryName != nil {
		toSerialize["country_name"] = o.CountryName
	}
	return json.Marshal(toSerialize)
}

type NullableAuditLogEventActorLocation struct {
	value *AuditLogEventActorLocation
	isSet bool
}

func (v NullableAuditLogEventActorLocation) Get() *AuditLogEventActorLocation {
	return v.value
}

func (v *NullableAuditLogEventActorLocation) Set(val *AuditLogEventActorLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogEventActorLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogEventActorLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogEventActorLocation(val *AuditLogEventActorLocation) *NullableAuditLogEventActorLocation {
	return &NullableAuditLogEventActorLocation{value: val, isSet: true}
}

func (v NullableAuditLogEventActorLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogEventActorLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


