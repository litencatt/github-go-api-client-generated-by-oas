/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReposCreateForkRequest struct for ReposCreateForkRequest
type ReposCreateForkRequest struct {
	// Optional parameter to specify the organization name if forking into an organization.
	Organization *string `json:"organization,omitempty"`
	// When forking from an existing repository, a new name for the fork.
	Name *string `json:"name,omitempty"`
}

// NewReposCreateForkRequest instantiates a new ReposCreateForkRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReposCreateForkRequest() *ReposCreateForkRequest {
	this := ReposCreateForkRequest{}
	return &this
}

// NewReposCreateForkRequestWithDefaults instantiates a new ReposCreateForkRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReposCreateForkRequestWithDefaults() *ReposCreateForkRequest {
	this := ReposCreateForkRequest{}
	return &this
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *ReposCreateForkRequest) GetOrganization() string {
	if o == nil || o.Organization == nil {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateForkRequest) GetOrganizationOk() (*string, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *ReposCreateForkRequest) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *ReposCreateForkRequest) SetOrganization(v string) {
	o.Organization = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReposCreateForkRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateForkRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReposCreateForkRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ReposCreateForkRequest) SetName(v string) {
	o.Name = &v
}

func (o ReposCreateForkRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Organization != nil {
		toSerialize["organization"] = o.Organization
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableReposCreateForkRequest struct {
	value *ReposCreateForkRequest
	isSet bool
}

func (v NullableReposCreateForkRequest) Get() *ReposCreateForkRequest {
	return v.value
}

func (v *NullableReposCreateForkRequest) Set(val *ReposCreateForkRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReposCreateForkRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReposCreateForkRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposCreateForkRequest(val *ReposCreateForkRequest) *NullableReposCreateForkRequest {
	return &NullableReposCreateForkRequest{value: val, isSet: true}
}

func (v NullableReposCreateForkRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposCreateForkRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


