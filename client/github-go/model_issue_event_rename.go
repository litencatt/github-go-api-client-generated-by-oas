/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// IssueEventRename Issue Event Rename
type IssueEventRename struct {
	From string `json:"from"`
	To string `json:"to"`
}

// NewIssueEventRename instantiates a new IssueEventRename object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueEventRename(from string, to string) *IssueEventRename {
	this := IssueEventRename{}
	this.From = from
	this.To = to
	return &this
}

// NewIssueEventRenameWithDefaults instantiates a new IssueEventRename object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueEventRenameWithDefaults() *IssueEventRename {
	this := IssueEventRename{}
	return &this
}

// GetFrom returns the From field value
func (o *IssueEventRename) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *IssueEventRename) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *IssueEventRename) SetFrom(v string) {
	o.From = v
}

// GetTo returns the To field value
func (o *IssueEventRename) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *IssueEventRename) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *IssueEventRename) SetTo(v string) {
	o.To = v
}

func (o IssueEventRename) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["to"] = o.To
	}
	return json.Marshal(toSerialize)
}

type NullableIssueEventRename struct {
	value *IssueEventRename
	isSet bool
}

func (v NullableIssueEventRename) Get() *IssueEventRename {
	return v.value
}

func (v *NullableIssueEventRename) Set(val *IssueEventRename) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueEventRename) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueEventRename) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueEventRename(val *IssueEventRename) *NullableIssueEventRename {
	return &NullableIssueEventRename{value: val, isSet: true}
}

func (v NullableIssueEventRename) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueEventRename) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


