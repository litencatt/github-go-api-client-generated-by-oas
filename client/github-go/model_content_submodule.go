/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ContentSubmodule An object describing a symlink
type ContentSubmodule struct {
	Type string `json:"type"`
	SubmoduleGitUrl string `json:"submodule_git_url"`
	Size int32 `json:"size"`
	Name string `json:"name"`
	Path string `json:"path"`
	Sha string `json:"sha"`
	Url string `json:"url"`
	GitUrl NullableString `json:"git_url"`
	HtmlUrl NullableString `json:"html_url"`
	DownloadUrl NullableString `json:"download_url"`
	Links ContentTreeEntriesInnerLinks `json:"_links"`
}

// NewContentSubmodule instantiates a new ContentSubmodule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentSubmodule(type_ string, submoduleGitUrl string, size int32, name string, path string, sha string, url string, gitUrl NullableString, htmlUrl NullableString, downloadUrl NullableString, links ContentTreeEntriesInnerLinks) *ContentSubmodule {
	this := ContentSubmodule{}
	this.Type = type_
	this.SubmoduleGitUrl = submoduleGitUrl
	this.Size = size
	this.Name = name
	this.Path = path
	this.Sha = sha
	this.Url = url
	this.GitUrl = gitUrl
	this.HtmlUrl = htmlUrl
	this.DownloadUrl = downloadUrl
	this.Links = links
	return &this
}

// NewContentSubmoduleWithDefaults instantiates a new ContentSubmodule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentSubmoduleWithDefaults() *ContentSubmodule {
	this := ContentSubmodule{}
	return &this
}

// GetType returns the Type field value
func (o *ContentSubmodule) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContentSubmodule) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContentSubmodule) SetType(v string) {
	o.Type = v
}

// GetSubmoduleGitUrl returns the SubmoduleGitUrl field value
func (o *ContentSubmodule) GetSubmoduleGitUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubmoduleGitUrl
}

// GetSubmoduleGitUrlOk returns a tuple with the SubmoduleGitUrl field value
// and a boolean to check if the value has been set.
func (o *ContentSubmodule) GetSubmoduleGitUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubmoduleGitUrl, true
}

// SetSubmoduleGitUrl sets field value
func (o *ContentSubmodule) SetSubmoduleGitUrl(v string) {
	o.SubmoduleGitUrl = v
}

// GetSize returns the Size field value
func (o *ContentSubmodule) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *ContentSubmodule) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *ContentSubmodule) SetSize(v int32) {
	o.Size = v
}

// GetName returns the Name field value
func (o *ContentSubmodule) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContentSubmodule) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContentSubmodule) SetName(v string) {
	o.Name = v
}

// GetPath returns the Path field value
func (o *ContentSubmodule) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ContentSubmodule) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ContentSubmodule) SetPath(v string) {
	o.Path = v
}

// GetSha returns the Sha field value
func (o *ContentSubmodule) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *ContentSubmodule) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *ContentSubmodule) SetSha(v string) {
	o.Sha = v
}

// GetUrl returns the Url field value
func (o *ContentSubmodule) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ContentSubmodule) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ContentSubmodule) SetUrl(v string) {
	o.Url = v
}

// GetGitUrl returns the GitUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ContentSubmodule) GetGitUrl() string {
	if o == nil || o.GitUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.GitUrl.Get()
}

// GetGitUrlOk returns a tuple with the GitUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentSubmodule) GetGitUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GitUrl.Get(), o.GitUrl.IsSet()
}

// SetGitUrl sets field value
func (o *ContentSubmodule) SetGitUrl(v string) {
	o.GitUrl.Set(&v)
}

// GetHtmlUrl returns the HtmlUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ContentSubmodule) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.HtmlUrl.Get()
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentSubmodule) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HtmlUrl.Get(), o.HtmlUrl.IsSet()
}

// SetHtmlUrl sets field value
func (o *ContentSubmodule) SetHtmlUrl(v string) {
	o.HtmlUrl.Set(&v)
}

// GetDownloadUrl returns the DownloadUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ContentSubmodule) GetDownloadUrl() string {
	if o == nil || o.DownloadUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.DownloadUrl.Get()
}

// GetDownloadUrlOk returns a tuple with the DownloadUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContentSubmodule) GetDownloadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadUrl.Get(), o.DownloadUrl.IsSet()
}

// SetDownloadUrl sets field value
func (o *ContentSubmodule) SetDownloadUrl(v string) {
	o.DownloadUrl.Set(&v)
}

// GetLinks returns the Links field value
func (o *ContentSubmodule) GetLinks() ContentTreeEntriesInnerLinks {
	if o == nil {
		var ret ContentTreeEntriesInnerLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *ContentSubmodule) GetLinksOk() (*ContentTreeEntriesInnerLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *ContentSubmodule) SetLinks(v ContentTreeEntriesInnerLinks) {
	o.Links = v
}

func (o ContentSubmodule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["submodule_git_url"] = o.SubmoduleGitUrl
	}
	if true {
		toSerialize["size"] = o.Size
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["path"] = o.Path
	}
	if true {
		toSerialize["sha"] = o.Sha
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["git_url"] = o.GitUrl.Get()
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl.Get()
	}
	if true {
		toSerialize["download_url"] = o.DownloadUrl.Get()
	}
	if true {
		toSerialize["_links"] = o.Links
	}
	return json.Marshal(toSerialize)
}

type NullableContentSubmodule struct {
	value *ContentSubmodule
	isSet bool
}

func (v NullableContentSubmodule) Get() *ContentSubmodule {
	return v.value
}

func (v *NullableContentSubmodule) Set(val *ContentSubmodule) {
	v.value = val
	v.isSet = true
}

func (v NullableContentSubmodule) IsSet() bool {
	return v.isSet
}

func (v *NullableContentSubmodule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentSubmodule(val *ContentSubmodule) *NullableContentSubmodule {
	return &NullableContentSubmodule{value: val, isSet: true}
}

func (v NullableContentSubmodule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentSubmodule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


