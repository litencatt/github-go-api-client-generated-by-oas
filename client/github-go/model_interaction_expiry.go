/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// InteractionExpiry The duration of the interaction restriction. Default: `one_day`.
type InteractionExpiry string

// List of interaction-expiry
const (
	ONE_DAY InteractionExpiry = "one_day"
	THREE_DAYS InteractionExpiry = "three_days"
	ONE_WEEK InteractionExpiry = "one_week"
	ONE_MONTH InteractionExpiry = "one_month"
	SIX_MONTHS InteractionExpiry = "six_months"
)

// All allowed values of InteractionExpiry enum
var AllowedInteractionExpiryEnumValues = []InteractionExpiry{
	"one_day",
	"three_days",
	"one_week",
	"one_month",
	"six_months",
}

func (v *InteractionExpiry) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InteractionExpiry(value)
	for _, existing := range AllowedInteractionExpiryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InteractionExpiry", value)
}

// NewInteractionExpiryFromValue returns a pointer to a valid InteractionExpiry
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInteractionExpiryFromValue(v string) (*InteractionExpiry, error) {
	ev := InteractionExpiry(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InteractionExpiry: valid values are %v", v, AllowedInteractionExpiryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InteractionExpiry) IsValid() bool {
	for _, existing := range AllowedInteractionExpiryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to interaction-expiry value
func (v InteractionExpiry) Ptr() *InteractionExpiry {
	return &v
}

type NullableInteractionExpiry struct {
	value *InteractionExpiry
	isSet bool
}

func (v NullableInteractionExpiry) Get() *InteractionExpiry {
	return v.value
}

func (v *NullableInteractionExpiry) Set(val *InteractionExpiry) {
	v.value = val
	v.isSet = true
}

func (v NullableInteractionExpiry) IsSet() bool {
	return v.isSet
}

func (v *NullableInteractionExpiry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInteractionExpiry(val *InteractionExpiry) *NullableInteractionExpiry {
	return &NullableInteractionExpiry{value: val, isSet: true}
}

func (v NullableInteractionExpiry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInteractionExpiry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

