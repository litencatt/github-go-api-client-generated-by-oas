/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// Migration A migration.
type Migration struct {
	Id int32 `json:"id"`
	Owner NullableNullableSimpleUser `json:"owner"`
	Guid string `json:"guid"`
	State string `json:"state"`
	LockRepositories bool `json:"lock_repositories"`
	ExcludeMetadata bool `json:"exclude_metadata"`
	ExcludeGitData bool `json:"exclude_git_data"`
	ExcludeAttachments bool `json:"exclude_attachments"`
	ExcludeReleases bool `json:"exclude_releases"`
	ExcludeOwnerProjects bool `json:"exclude_owner_projects"`
	OrgMetadataOnly bool `json:"org_metadata_only"`
	Repositories []Repository `json:"repositories"`
	Url string `json:"url"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	NodeId string `json:"node_id"`
	ArchiveUrl *string `json:"archive_url,omitempty"`
	Exclude []interface{} `json:"exclude,omitempty"`
}

// NewMigration instantiates a new Migration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMigration(id int32, owner NullableNullableSimpleUser, guid string, state string, lockRepositories bool, excludeMetadata bool, excludeGitData bool, excludeAttachments bool, excludeReleases bool, excludeOwnerProjects bool, orgMetadataOnly bool, repositories []Repository, url string, createdAt time.Time, updatedAt time.Time, nodeId string) *Migration {
	this := Migration{}
	this.Id = id
	this.Owner = owner
	this.Guid = guid
	this.State = state
	this.LockRepositories = lockRepositories
	this.ExcludeMetadata = excludeMetadata
	this.ExcludeGitData = excludeGitData
	this.ExcludeAttachments = excludeAttachments
	this.ExcludeReleases = excludeReleases
	this.ExcludeOwnerProjects = excludeOwnerProjects
	this.OrgMetadataOnly = orgMetadataOnly
	this.Repositories = repositories
	this.Url = url
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.NodeId = nodeId
	return &this
}

// NewMigrationWithDefaults instantiates a new Migration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMigrationWithDefaults() *Migration {
	this := Migration{}
	return &this
}

// GetId returns the Id field value
func (o *Migration) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Migration) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Migration) SetId(v int32) {
	o.Id = v
}

// GetOwner returns the Owner field value
// If the value is explicit nil, the zero value for NullableSimpleUser will be returned
func (o *Migration) GetOwner() NullableSimpleUser {
	if o == nil || o.Owner.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}

	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Migration) GetOwnerOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// SetOwner sets field value
func (o *Migration) SetOwner(v NullableSimpleUser) {
	o.Owner.Set(&v)
}

// GetGuid returns the Guid field value
func (o *Migration) GetGuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Guid
}

// GetGuidOk returns a tuple with the Guid field value
// and a boolean to check if the value has been set.
func (o *Migration) GetGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Guid, true
}

// SetGuid sets field value
func (o *Migration) SetGuid(v string) {
	o.Guid = v
}

// GetState returns the State field value
func (o *Migration) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *Migration) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *Migration) SetState(v string) {
	o.State = v
}

// GetLockRepositories returns the LockRepositories field value
func (o *Migration) GetLockRepositories() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LockRepositories
}

// GetLockRepositoriesOk returns a tuple with the LockRepositories field value
// and a boolean to check if the value has been set.
func (o *Migration) GetLockRepositoriesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LockRepositories, true
}

// SetLockRepositories sets field value
func (o *Migration) SetLockRepositories(v bool) {
	o.LockRepositories = v
}

// GetExcludeMetadata returns the ExcludeMetadata field value
func (o *Migration) GetExcludeMetadata() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExcludeMetadata
}

// GetExcludeMetadataOk returns a tuple with the ExcludeMetadata field value
// and a boolean to check if the value has been set.
func (o *Migration) GetExcludeMetadataOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExcludeMetadata, true
}

// SetExcludeMetadata sets field value
func (o *Migration) SetExcludeMetadata(v bool) {
	o.ExcludeMetadata = v
}

// GetExcludeGitData returns the ExcludeGitData field value
func (o *Migration) GetExcludeGitData() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExcludeGitData
}

// GetExcludeGitDataOk returns a tuple with the ExcludeGitData field value
// and a boolean to check if the value has been set.
func (o *Migration) GetExcludeGitDataOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExcludeGitData, true
}

// SetExcludeGitData sets field value
func (o *Migration) SetExcludeGitData(v bool) {
	o.ExcludeGitData = v
}

// GetExcludeAttachments returns the ExcludeAttachments field value
func (o *Migration) GetExcludeAttachments() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExcludeAttachments
}

// GetExcludeAttachmentsOk returns a tuple with the ExcludeAttachments field value
// and a boolean to check if the value has been set.
func (o *Migration) GetExcludeAttachmentsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExcludeAttachments, true
}

// SetExcludeAttachments sets field value
func (o *Migration) SetExcludeAttachments(v bool) {
	o.ExcludeAttachments = v
}

// GetExcludeReleases returns the ExcludeReleases field value
func (o *Migration) GetExcludeReleases() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExcludeReleases
}

// GetExcludeReleasesOk returns a tuple with the ExcludeReleases field value
// and a boolean to check if the value has been set.
func (o *Migration) GetExcludeReleasesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExcludeReleases, true
}

// SetExcludeReleases sets field value
func (o *Migration) SetExcludeReleases(v bool) {
	o.ExcludeReleases = v
}

// GetExcludeOwnerProjects returns the ExcludeOwnerProjects field value
func (o *Migration) GetExcludeOwnerProjects() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExcludeOwnerProjects
}

// GetExcludeOwnerProjectsOk returns a tuple with the ExcludeOwnerProjects field value
// and a boolean to check if the value has been set.
func (o *Migration) GetExcludeOwnerProjectsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExcludeOwnerProjects, true
}

// SetExcludeOwnerProjects sets field value
func (o *Migration) SetExcludeOwnerProjects(v bool) {
	o.ExcludeOwnerProjects = v
}

// GetOrgMetadataOnly returns the OrgMetadataOnly field value
func (o *Migration) GetOrgMetadataOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OrgMetadataOnly
}

// GetOrgMetadataOnlyOk returns a tuple with the OrgMetadataOnly field value
// and a boolean to check if the value has been set.
func (o *Migration) GetOrgMetadataOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgMetadataOnly, true
}

// SetOrgMetadataOnly sets field value
func (o *Migration) SetOrgMetadataOnly(v bool) {
	o.OrgMetadataOnly = v
}

// GetRepositories returns the Repositories field value
func (o *Migration) GetRepositories() []Repository {
	if o == nil {
		var ret []Repository
		return ret
	}

	return o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value
// and a boolean to check if the value has been set.
func (o *Migration) GetRepositoriesOk() ([]Repository, bool) {
	if o == nil {
		return nil, false
	}
	return o.Repositories, true
}

// SetRepositories sets field value
func (o *Migration) SetRepositories(v []Repository) {
	o.Repositories = v
}

// GetUrl returns the Url field value
func (o *Migration) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Migration) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Migration) SetUrl(v string) {
	o.Url = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Migration) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Migration) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Migration) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Migration) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Migration) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Migration) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetNodeId returns the NodeId field value
func (o *Migration) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *Migration) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *Migration) SetNodeId(v string) {
	o.NodeId = v
}

// GetArchiveUrl returns the ArchiveUrl field value if set, zero value otherwise.
func (o *Migration) GetArchiveUrl() string {
	if o == nil || o.ArchiveUrl == nil {
		var ret string
		return ret
	}
	return *o.ArchiveUrl
}

// GetArchiveUrlOk returns a tuple with the ArchiveUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Migration) GetArchiveUrlOk() (*string, bool) {
	if o == nil || o.ArchiveUrl == nil {
		return nil, false
	}
	return o.ArchiveUrl, true
}

// HasArchiveUrl returns a boolean if a field has been set.
func (o *Migration) HasArchiveUrl() bool {
	if o != nil && o.ArchiveUrl != nil {
		return true
	}

	return false
}

// SetArchiveUrl gets a reference to the given string and assigns it to the ArchiveUrl field.
func (o *Migration) SetArchiveUrl(v string) {
	o.ArchiveUrl = &v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *Migration) GetExclude() []interface{} {
	if o == nil || o.Exclude == nil {
		var ret []interface{}
		return ret
	}
	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Migration) GetExcludeOk() ([]interface{}, bool) {
	if o == nil || o.Exclude == nil {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *Migration) HasExclude() bool {
	if o != nil && o.Exclude != nil {
		return true
	}

	return false
}

// SetExclude gets a reference to the given []interface{} and assigns it to the Exclude field.
func (o *Migration) SetExclude(v []interface{}) {
	o.Exclude = v
}

func (o Migration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["owner"] = o.Owner.Get()
	}
	if true {
		toSerialize["guid"] = o.Guid
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["lock_repositories"] = o.LockRepositories
	}
	if true {
		toSerialize["exclude_metadata"] = o.ExcludeMetadata
	}
	if true {
		toSerialize["exclude_git_data"] = o.ExcludeGitData
	}
	if true {
		toSerialize["exclude_attachments"] = o.ExcludeAttachments
	}
	if true {
		toSerialize["exclude_releases"] = o.ExcludeReleases
	}
	if true {
		toSerialize["exclude_owner_projects"] = o.ExcludeOwnerProjects
	}
	if true {
		toSerialize["org_metadata_only"] = o.OrgMetadataOnly
	}
	if true {
		toSerialize["repositories"] = o.Repositories
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if o.ArchiveUrl != nil {
		toSerialize["archive_url"] = o.ArchiveUrl
	}
	if o.Exclude != nil {
		toSerialize["exclude"] = o.Exclude
	}
	return json.Marshal(toSerialize)
}

type NullableMigration struct {
	value *Migration
	isSet bool
}

func (v NullableMigration) Get() *Migration {
	return v.value
}

func (v *NullableMigration) Set(val *Migration) {
	v.value = val
	v.isSet = true
}

func (v NullableMigration) IsSet() bool {
	return v.isSet
}

func (v *NullableMigration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMigration(val *Migration) *NullableMigration {
	return &NullableMigration{value: val, isSet: true}
}

func (v NullableMigration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMigration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


