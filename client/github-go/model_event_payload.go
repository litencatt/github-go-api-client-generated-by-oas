/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// EventPayload struct for EventPayload
type EventPayload struct {
	Action *string `json:"action,omitempty"`
	Issue *Issue `json:"issue,omitempty"`
	Comment *IssueComment `json:"comment,omitempty"`
	Pages []EventPayloadPagesInner `json:"pages,omitempty"`
}

// NewEventPayload instantiates a new EventPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventPayload() *EventPayload {
	this := EventPayload{}
	return &this
}

// NewEventPayloadWithDefaults instantiates a new EventPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventPayloadWithDefaults() *EventPayload {
	this := EventPayload{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *EventPayload) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPayload) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *EventPayload) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *EventPayload) SetAction(v string) {
	o.Action = &v
}

// GetIssue returns the Issue field value if set, zero value otherwise.
func (o *EventPayload) GetIssue() Issue {
	if o == nil || o.Issue == nil {
		var ret Issue
		return ret
	}
	return *o.Issue
}

// GetIssueOk returns a tuple with the Issue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPayload) GetIssueOk() (*Issue, bool) {
	if o == nil || o.Issue == nil {
		return nil, false
	}
	return o.Issue, true
}

// HasIssue returns a boolean if a field has been set.
func (o *EventPayload) HasIssue() bool {
	if o != nil && o.Issue != nil {
		return true
	}

	return false
}

// SetIssue gets a reference to the given Issue and assigns it to the Issue field.
func (o *EventPayload) SetIssue(v Issue) {
	o.Issue = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *EventPayload) GetComment() IssueComment {
	if o == nil || o.Comment == nil {
		var ret IssueComment
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPayload) GetCommentOk() (*IssueComment, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *EventPayload) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given IssueComment and assigns it to the Comment field.
func (o *EventPayload) SetComment(v IssueComment) {
	o.Comment = &v
}

// GetPages returns the Pages field value if set, zero value otherwise.
func (o *EventPayload) GetPages() []EventPayloadPagesInner {
	if o == nil || o.Pages == nil {
		var ret []EventPayloadPagesInner
		return ret
	}
	return o.Pages
}

// GetPagesOk returns a tuple with the Pages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPayload) GetPagesOk() ([]EventPayloadPagesInner, bool) {
	if o == nil || o.Pages == nil {
		return nil, false
	}
	return o.Pages, true
}

// HasPages returns a boolean if a field has been set.
func (o *EventPayload) HasPages() bool {
	if o != nil && o.Pages != nil {
		return true
	}

	return false
}

// SetPages gets a reference to the given []EventPayloadPagesInner and assigns it to the Pages field.
func (o *EventPayload) SetPages(v []EventPayloadPagesInner) {
	o.Pages = v
}

func (o EventPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Issue != nil {
		toSerialize["issue"] = o.Issue
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Pages != nil {
		toSerialize["pages"] = o.Pages
	}
	return json.Marshal(toSerialize)
}

type NullableEventPayload struct {
	value *EventPayload
	isSet bool
}

func (v NullableEventPayload) Get() *EventPayload {
	return v.value
}

func (v *NullableEventPayload) Set(val *EventPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableEventPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableEventPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventPayload(val *EventPayload) *NullableEventPayload {
	return &NullableEventPayload{value: val, isSet: true}
}

func (v NullableEventPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


