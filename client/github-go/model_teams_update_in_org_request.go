/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// TeamsUpdateInOrgRequest struct for TeamsUpdateInOrgRequest
type TeamsUpdateInOrgRequest struct {
	// The name of the team.
	Name *string `json:"name,omitempty"`
	// The description of the team.
	Description *string `json:"description,omitempty"`
	// The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:   **For a non-nested team:**   \\* `secret` - only visible to organization owners and members of this team.   \\* `closed` - visible to all members of this organization.   **For a parent or child team:**   \\* `closed` - visible to all members of this organization.
	Privacy *string `json:"privacy,omitempty"`
	// **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
	Permission *string `json:"permission,omitempty"`
	// The ID of a team to set as the parent team.
	ParentTeamId NullableInt32 `json:"parent_team_id,omitempty"`
}

// NewTeamsUpdateInOrgRequest instantiates a new TeamsUpdateInOrgRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamsUpdateInOrgRequest() *TeamsUpdateInOrgRequest {
	this := TeamsUpdateInOrgRequest{}
	var permission string = "pull"
	this.Permission = &permission
	return &this
}

// NewTeamsUpdateInOrgRequestWithDefaults instantiates a new TeamsUpdateInOrgRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamsUpdateInOrgRequestWithDefaults() *TeamsUpdateInOrgRequest {
	this := TeamsUpdateInOrgRequest{}
	var permission string = "pull"
	this.Permission = &permission
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TeamsUpdateInOrgRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamsUpdateInOrgRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TeamsUpdateInOrgRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TeamsUpdateInOrgRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TeamsUpdateInOrgRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamsUpdateInOrgRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TeamsUpdateInOrgRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TeamsUpdateInOrgRequest) SetDescription(v string) {
	o.Description = &v
}

// GetPrivacy returns the Privacy field value if set, zero value otherwise.
func (o *TeamsUpdateInOrgRequest) GetPrivacy() string {
	if o == nil || o.Privacy == nil {
		var ret string
		return ret
	}
	return *o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamsUpdateInOrgRequest) GetPrivacyOk() (*string, bool) {
	if o == nil || o.Privacy == nil {
		return nil, false
	}
	return o.Privacy, true
}

// HasPrivacy returns a boolean if a field has been set.
func (o *TeamsUpdateInOrgRequest) HasPrivacy() bool {
	if o != nil && o.Privacy != nil {
		return true
	}

	return false
}

// SetPrivacy gets a reference to the given string and assigns it to the Privacy field.
func (o *TeamsUpdateInOrgRequest) SetPrivacy(v string) {
	o.Privacy = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *TeamsUpdateInOrgRequest) GetPermission() string {
	if o == nil || o.Permission == nil {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamsUpdateInOrgRequest) GetPermissionOk() (*string, bool) {
	if o == nil || o.Permission == nil {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *TeamsUpdateInOrgRequest) HasPermission() bool {
	if o != nil && o.Permission != nil {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *TeamsUpdateInOrgRequest) SetPermission(v string) {
	o.Permission = &v
}

// GetParentTeamId returns the ParentTeamId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamsUpdateInOrgRequest) GetParentTeamId() int32 {
	if o == nil || o.ParentTeamId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ParentTeamId.Get()
}

// GetParentTeamIdOk returns a tuple with the ParentTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamsUpdateInOrgRequest) GetParentTeamIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentTeamId.Get(), o.ParentTeamId.IsSet()
}

// HasParentTeamId returns a boolean if a field has been set.
func (o *TeamsUpdateInOrgRequest) HasParentTeamId() bool {
	if o != nil && o.ParentTeamId.IsSet() {
		return true
	}

	return false
}

// SetParentTeamId gets a reference to the given NullableInt32 and assigns it to the ParentTeamId field.
func (o *TeamsUpdateInOrgRequest) SetParentTeamId(v int32) {
	o.ParentTeamId.Set(&v)
}
// SetParentTeamIdNil sets the value for ParentTeamId to be an explicit nil
func (o *TeamsUpdateInOrgRequest) SetParentTeamIdNil() {
	o.ParentTeamId.Set(nil)
}

// UnsetParentTeamId ensures that no value is present for ParentTeamId, not even an explicit nil
func (o *TeamsUpdateInOrgRequest) UnsetParentTeamId() {
	o.ParentTeamId.Unset()
}

func (o TeamsUpdateInOrgRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Privacy != nil {
		toSerialize["privacy"] = o.Privacy
	}
	if o.Permission != nil {
		toSerialize["permission"] = o.Permission
	}
	if o.ParentTeamId.IsSet() {
		toSerialize["parent_team_id"] = o.ParentTeamId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTeamsUpdateInOrgRequest struct {
	value *TeamsUpdateInOrgRequest
	isSet bool
}

func (v NullableTeamsUpdateInOrgRequest) Get() *TeamsUpdateInOrgRequest {
	return v.value
}

func (v *NullableTeamsUpdateInOrgRequest) Set(val *TeamsUpdateInOrgRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamsUpdateInOrgRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamsUpdateInOrgRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamsUpdateInOrgRequest(val *TeamsUpdateInOrgRequest) *NullableTeamsUpdateInOrgRequest {
	return &NullableTeamsUpdateInOrgRequest{value: val, isSet: true}
}

func (v NullableTeamsUpdateInOrgRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamsUpdateInOrgRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


