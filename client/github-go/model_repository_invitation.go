/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// RepositoryInvitation Repository invitations let you manage who you collaborate with.
type RepositoryInvitation struct {
	// Unique identifier of the repository invitation.
	Id int32 `json:"id"`
	Repository MinimalRepository `json:"repository"`
	Invitee NullableNullableSimpleUser `json:"invitee"`
	Inviter NullableNullableSimpleUser `json:"inviter"`
	// The permission associated with the invitation.
	Permissions string `json:"permissions"`
	CreatedAt time.Time `json:"created_at"`
	// Whether or not the invitation has expired
	Expired *bool `json:"expired,omitempty"`
	// URL for the repository invitation
	Url string `json:"url"`
	HtmlUrl string `json:"html_url"`
	NodeId string `json:"node_id"`
}

// NewRepositoryInvitation instantiates a new RepositoryInvitation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryInvitation(id int32, repository MinimalRepository, invitee NullableNullableSimpleUser, inviter NullableNullableSimpleUser, permissions string, createdAt time.Time, url string, htmlUrl string, nodeId string) *RepositoryInvitation {
	this := RepositoryInvitation{}
	this.Id = id
	this.Repository = repository
	this.Invitee = invitee
	this.Inviter = inviter
	this.Permissions = permissions
	this.CreatedAt = createdAt
	this.Url = url
	this.HtmlUrl = htmlUrl
	this.NodeId = nodeId
	return &this
}

// NewRepositoryInvitationWithDefaults instantiates a new RepositoryInvitation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryInvitationWithDefaults() *RepositoryInvitation {
	this := RepositoryInvitation{}
	return &this
}

// GetId returns the Id field value
func (o *RepositoryInvitation) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RepositoryInvitation) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RepositoryInvitation) SetId(v int32) {
	o.Id = v
}

// GetRepository returns the Repository field value
func (o *RepositoryInvitation) GetRepository() MinimalRepository {
	if o == nil {
		var ret MinimalRepository
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *RepositoryInvitation) GetRepositoryOk() (*MinimalRepository, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *RepositoryInvitation) SetRepository(v MinimalRepository) {
	o.Repository = v
}

// GetInvitee returns the Invitee field value
// If the value is explicit nil, the zero value for NullableSimpleUser will be returned
func (o *RepositoryInvitation) GetInvitee() NullableSimpleUser {
	if o == nil || o.Invitee.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}

	return *o.Invitee.Get()
}

// GetInviteeOk returns a tuple with the Invitee field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryInvitation) GetInviteeOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Invitee.Get(), o.Invitee.IsSet()
}

// SetInvitee sets field value
func (o *RepositoryInvitation) SetInvitee(v NullableSimpleUser) {
	o.Invitee.Set(&v)
}

// GetInviter returns the Inviter field value
// If the value is explicit nil, the zero value for NullableSimpleUser will be returned
func (o *RepositoryInvitation) GetInviter() NullableSimpleUser {
	if o == nil || o.Inviter.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}

	return *o.Inviter.Get()
}

// GetInviterOk returns a tuple with the Inviter field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryInvitation) GetInviterOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inviter.Get(), o.Inviter.IsSet()
}

// SetInviter sets field value
func (o *RepositoryInvitation) SetInviter(v NullableSimpleUser) {
	o.Inviter.Set(&v)
}

// GetPermissions returns the Permissions field value
func (o *RepositoryInvitation) GetPermissions() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *RepositoryInvitation) GetPermissionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// SetPermissions sets field value
func (o *RepositoryInvitation) SetPermissions(v string) {
	o.Permissions = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *RepositoryInvitation) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RepositoryInvitation) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RepositoryInvitation) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *RepositoryInvitation) GetExpired() bool {
	if o == nil || o.Expired == nil {
		var ret bool
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryInvitation) GetExpiredOk() (*bool, bool) {
	if o == nil || o.Expired == nil {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *RepositoryInvitation) HasExpired() bool {
	if o != nil && o.Expired != nil {
		return true
	}

	return false
}

// SetExpired gets a reference to the given bool and assigns it to the Expired field.
func (o *RepositoryInvitation) SetExpired(v bool) {
	o.Expired = &v
}

// GetUrl returns the Url field value
func (o *RepositoryInvitation) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RepositoryInvitation) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RepositoryInvitation) SetUrl(v string) {
	o.Url = v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *RepositoryInvitation) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *RepositoryInvitation) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *RepositoryInvitation) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetNodeId returns the NodeId field value
func (o *RepositoryInvitation) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *RepositoryInvitation) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *RepositoryInvitation) SetNodeId(v string) {
	o.NodeId = v
}

func (o RepositoryInvitation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["repository"] = o.Repository
	}
	if true {
		toSerialize["invitee"] = o.Invitee.Get()
	}
	if true {
		toSerialize["inviter"] = o.Inviter.Get()
	}
	if true {
		toSerialize["permissions"] = o.Permissions
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Expired != nil {
		toSerialize["expired"] = o.Expired
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	return json.Marshal(toSerialize)
}

type NullableRepositoryInvitation struct {
	value *RepositoryInvitation
	isSet bool
}

func (v NullableRepositoryInvitation) Get() *RepositoryInvitation {
	return v.value
}

func (v *NullableRepositoryInvitation) Set(val *RepositoryInvitation) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryInvitation) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryInvitation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryInvitation(val *RepositoryInvitation) *NullableRepositoryInvitation {
	return &NullableRepositoryInvitation{value: val, isSet: true}
}

func (v NullableRepositoryInvitation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryInvitation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


