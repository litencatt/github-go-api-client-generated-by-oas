/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// BranchShortCommit struct for BranchShortCommit
type BranchShortCommit struct {
	Sha string `json:"sha"`
	Url string `json:"url"`
}

// NewBranchShortCommit instantiates a new BranchShortCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBranchShortCommit(sha string, url string) *BranchShortCommit {
	this := BranchShortCommit{}
	this.Sha = sha
	this.Url = url
	return &this
}

// NewBranchShortCommitWithDefaults instantiates a new BranchShortCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBranchShortCommitWithDefaults() *BranchShortCommit {
	this := BranchShortCommit{}
	return &this
}

// GetSha returns the Sha field value
func (o *BranchShortCommit) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *BranchShortCommit) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *BranchShortCommit) SetSha(v string) {
	o.Sha = v
}

// GetUrl returns the Url field value
func (o *BranchShortCommit) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *BranchShortCommit) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *BranchShortCommit) SetUrl(v string) {
	o.Url = v
}

func (o BranchShortCommit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sha"] = o.Sha
	}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableBranchShortCommit struct {
	value *BranchShortCommit
	isSet bool
}

func (v NullableBranchShortCommit) Get() *BranchShortCommit {
	return v.value
}

func (v *NullableBranchShortCommit) Set(val *BranchShortCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableBranchShortCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableBranchShortCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBranchShortCommit(val *BranchShortCommit) *NullableBranchShortCommit {
	return &NullableBranchShortCommit{value: val, isSet: true}
}

func (v NullableBranchShortCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBranchShortCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


