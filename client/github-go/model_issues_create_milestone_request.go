/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// IssuesCreateMilestoneRequest struct for IssuesCreateMilestoneRequest
type IssuesCreateMilestoneRequest struct {
	// The title of the milestone.
	Title string `json:"title"`
	// The state of the milestone. Either `open` or `closed`.
	State *string `json:"state,omitempty"`
	// A description of the milestone.
	Description *string `json:"description,omitempty"`
	// The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	DueOn *time.Time `json:"due_on,omitempty"`
}

// NewIssuesCreateMilestoneRequest instantiates a new IssuesCreateMilestoneRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesCreateMilestoneRequest(title string) *IssuesCreateMilestoneRequest {
	this := IssuesCreateMilestoneRequest{}
	this.Title = title
	var state string = "open"
	this.State = &state
	return &this
}

// NewIssuesCreateMilestoneRequestWithDefaults instantiates a new IssuesCreateMilestoneRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesCreateMilestoneRequestWithDefaults() *IssuesCreateMilestoneRequest {
	this := IssuesCreateMilestoneRequest{}
	var state string = "open"
	this.State = &state
	return &this
}

// GetTitle returns the Title field value
func (o *IssuesCreateMilestoneRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *IssuesCreateMilestoneRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *IssuesCreateMilestoneRequest) SetTitle(v string) {
	o.Title = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *IssuesCreateMilestoneRequest) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesCreateMilestoneRequest) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *IssuesCreateMilestoneRequest) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *IssuesCreateMilestoneRequest) SetState(v string) {
	o.State = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IssuesCreateMilestoneRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesCreateMilestoneRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IssuesCreateMilestoneRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IssuesCreateMilestoneRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDueOn returns the DueOn field value if set, zero value otherwise.
func (o *IssuesCreateMilestoneRequest) GetDueOn() time.Time {
	if o == nil || o.DueOn == nil {
		var ret time.Time
		return ret
	}
	return *o.DueOn
}

// GetDueOnOk returns a tuple with the DueOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesCreateMilestoneRequest) GetDueOnOk() (*time.Time, bool) {
	if o == nil || o.DueOn == nil {
		return nil, false
	}
	return o.DueOn, true
}

// HasDueOn returns a boolean if a field has been set.
func (o *IssuesCreateMilestoneRequest) HasDueOn() bool {
	if o != nil && o.DueOn != nil {
		return true
	}

	return false
}

// SetDueOn gets a reference to the given time.Time and assigns it to the DueOn field.
func (o *IssuesCreateMilestoneRequest) SetDueOn(v time.Time) {
	o.DueOn = &v
}

func (o IssuesCreateMilestoneRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["title"] = o.Title
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DueOn != nil {
		toSerialize["due_on"] = o.DueOn
	}
	return json.Marshal(toSerialize)
}

type NullableIssuesCreateMilestoneRequest struct {
	value *IssuesCreateMilestoneRequest
	isSet bool
}

func (v NullableIssuesCreateMilestoneRequest) Get() *IssuesCreateMilestoneRequest {
	return v.value
}

func (v *NullableIssuesCreateMilestoneRequest) Set(val *IssuesCreateMilestoneRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesCreateMilestoneRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesCreateMilestoneRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesCreateMilestoneRequest(val *IssuesCreateMilestoneRequest) *NullableIssuesCreateMilestoneRequest {
	return &NullableIssuesCreateMilestoneRequest{value: val, isSet: true}
}

func (v NullableIssuesCreateMilestoneRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesCreateMilestoneRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


