/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// OrgsUpdate422Response - struct for OrgsUpdate422Response
type OrgsUpdate422Response struct {
	ValidationError *ValidationError
	ValidationErrorSimple *ValidationErrorSimple
}

// ValidationErrorAsOrgsUpdate422Response is a convenience function that returns ValidationError wrapped in OrgsUpdate422Response
func ValidationErrorAsOrgsUpdate422Response(v *ValidationError) OrgsUpdate422Response {
	return OrgsUpdate422Response{
		ValidationError: v,
	}
}

// ValidationErrorSimpleAsOrgsUpdate422Response is a convenience function that returns ValidationErrorSimple wrapped in OrgsUpdate422Response
func ValidationErrorSimpleAsOrgsUpdate422Response(v *ValidationErrorSimple) OrgsUpdate422Response {
	return OrgsUpdate422Response{
		ValidationErrorSimple: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OrgsUpdate422Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ValidationError
	err = newStrictDecoder(data).Decode(&dst.ValidationError)
	if err == nil {
		jsonValidationError, _ := json.Marshal(dst.ValidationError)
		if string(jsonValidationError) == "{}" { // empty struct
			dst.ValidationError = nil
		} else {
			match++
		}
	} else {
		dst.ValidationError = nil
	}

	// try to unmarshal data into ValidationErrorSimple
	err = newStrictDecoder(data).Decode(&dst.ValidationErrorSimple)
	if err == nil {
		jsonValidationErrorSimple, _ := json.Marshal(dst.ValidationErrorSimple)
		if string(jsonValidationErrorSimple) == "{}" { // empty struct
			dst.ValidationErrorSimple = nil
		} else {
			match++
		}
	} else {
		dst.ValidationErrorSimple = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ValidationError = nil
		dst.ValidationErrorSimple = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(OrgsUpdate422Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(OrgsUpdate422Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OrgsUpdate422Response) MarshalJSON() ([]byte, error) {
	if src.ValidationError != nil {
		return json.Marshal(&src.ValidationError)
	}

	if src.ValidationErrorSimple != nil {
		return json.Marshal(&src.ValidationErrorSimple)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OrgsUpdate422Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ValidationError != nil {
		return obj.ValidationError
	}

	if obj.ValidationErrorSimple != nil {
		return obj.ValidationErrorSimple
	}

	// all schemas are nil
	return nil
}

type NullableOrgsUpdate422Response struct {
	value *OrgsUpdate422Response
	isSet bool
}

func (v NullableOrgsUpdate422Response) Get() *OrgsUpdate422Response {
	return v.value
}

func (v *NullableOrgsUpdate422Response) Set(val *OrgsUpdate422Response) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgsUpdate422Response) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgsUpdate422Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgsUpdate422Response(val *OrgsUpdate422Response) *NullableOrgsUpdate422Response {
	return &NullableOrgsUpdate422Response{value: val, isSet: true}
}

func (v NullableOrgsUpdate422Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgsUpdate422Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


