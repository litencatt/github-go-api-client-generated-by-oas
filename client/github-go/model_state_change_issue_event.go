/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// StateChangeIssueEvent State Change Issue Event
type StateChangeIssueEvent struct {
	Id int32 `json:"id"`
	NodeId string `json:"node_id"`
	Url string `json:"url"`
	Actor SimpleUser `json:"actor"`
	Event string `json:"event"`
	CommitId NullableString `json:"commit_id"`
	CommitUrl NullableString `json:"commit_url"`
	CreatedAt string `json:"created_at"`
	PerformedViaGithubApp NullableNullableIntegration `json:"performed_via_github_app"`
	StateReason NullableString `json:"state_reason,omitempty"`
}

// NewStateChangeIssueEvent instantiates a new StateChangeIssueEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStateChangeIssueEvent(id int32, nodeId string, url string, actor SimpleUser, event string, commitId NullableString, commitUrl NullableString, createdAt string, performedViaGithubApp NullableNullableIntegration) *StateChangeIssueEvent {
	this := StateChangeIssueEvent{}
	this.Id = id
	this.NodeId = nodeId
	this.Url = url
	this.Actor = actor
	this.Event = event
	this.CommitId = commitId
	this.CommitUrl = commitUrl
	this.CreatedAt = createdAt
	this.PerformedViaGithubApp = performedViaGithubApp
	return &this
}

// NewStateChangeIssueEventWithDefaults instantiates a new StateChangeIssueEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStateChangeIssueEventWithDefaults() *StateChangeIssueEvent {
	this := StateChangeIssueEvent{}
	return &this
}

// GetId returns the Id field value
func (o *StateChangeIssueEvent) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StateChangeIssueEvent) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StateChangeIssueEvent) SetId(v int32) {
	o.Id = v
}

// GetNodeId returns the NodeId field value
func (o *StateChangeIssueEvent) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *StateChangeIssueEvent) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *StateChangeIssueEvent) SetNodeId(v string) {
	o.NodeId = v
}

// GetUrl returns the Url field value
func (o *StateChangeIssueEvent) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *StateChangeIssueEvent) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *StateChangeIssueEvent) SetUrl(v string) {
	o.Url = v
}

// GetActor returns the Actor field value
func (o *StateChangeIssueEvent) GetActor() SimpleUser {
	if o == nil {
		var ret SimpleUser
		return ret
	}

	return o.Actor
}

// GetActorOk returns a tuple with the Actor field value
// and a boolean to check if the value has been set.
func (o *StateChangeIssueEvent) GetActorOk() (*SimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Actor, true
}

// SetActor sets field value
func (o *StateChangeIssueEvent) SetActor(v SimpleUser) {
	o.Actor = v
}

// GetEvent returns the Event field value
func (o *StateChangeIssueEvent) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *StateChangeIssueEvent) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *StateChangeIssueEvent) SetEvent(v string) {
	o.Event = v
}

// GetCommitId returns the CommitId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StateChangeIssueEvent) GetCommitId() string {
	if o == nil || o.CommitId.Get() == nil {
		var ret string
		return ret
	}

	return *o.CommitId.Get()
}

// GetCommitIdOk returns a tuple with the CommitId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StateChangeIssueEvent) GetCommitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitId.Get(), o.CommitId.IsSet()
}

// SetCommitId sets field value
func (o *StateChangeIssueEvent) SetCommitId(v string) {
	o.CommitId.Set(&v)
}

// GetCommitUrl returns the CommitUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StateChangeIssueEvent) GetCommitUrl() string {
	if o == nil || o.CommitUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.CommitUrl.Get()
}

// GetCommitUrlOk returns a tuple with the CommitUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StateChangeIssueEvent) GetCommitUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitUrl.Get(), o.CommitUrl.IsSet()
}

// SetCommitUrl sets field value
func (o *StateChangeIssueEvent) SetCommitUrl(v string) {
	o.CommitUrl.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *StateChangeIssueEvent) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *StateChangeIssueEvent) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *StateChangeIssueEvent) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetPerformedViaGithubApp returns the PerformedViaGithubApp field value
// If the value is explicit nil, the zero value for NullableIntegration will be returned
func (o *StateChangeIssueEvent) GetPerformedViaGithubApp() NullableIntegration {
	if o == nil || o.PerformedViaGithubApp.Get() == nil {
		var ret NullableIntegration
		return ret
	}

	return *o.PerformedViaGithubApp.Get()
}

// GetPerformedViaGithubAppOk returns a tuple with the PerformedViaGithubApp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StateChangeIssueEvent) GetPerformedViaGithubAppOk() (*NullableIntegration, bool) {
	if o == nil {
		return nil, false
	}
	return o.PerformedViaGithubApp.Get(), o.PerformedViaGithubApp.IsSet()
}

// SetPerformedViaGithubApp sets field value
func (o *StateChangeIssueEvent) SetPerformedViaGithubApp(v NullableIntegration) {
	o.PerformedViaGithubApp.Set(&v)
}

// GetStateReason returns the StateReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StateChangeIssueEvent) GetStateReason() string {
	if o == nil || o.StateReason.Get() == nil {
		var ret string
		return ret
	}
	return *o.StateReason.Get()
}

// GetStateReasonOk returns a tuple with the StateReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StateChangeIssueEvent) GetStateReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateReason.Get(), o.StateReason.IsSet()
}

// HasStateReason returns a boolean if a field has been set.
func (o *StateChangeIssueEvent) HasStateReason() bool {
	if o != nil && o.StateReason.IsSet() {
		return true
	}

	return false
}

// SetStateReason gets a reference to the given NullableString and assigns it to the StateReason field.
func (o *StateChangeIssueEvent) SetStateReason(v string) {
	o.StateReason.Set(&v)
}
// SetStateReasonNil sets the value for StateReason to be an explicit nil
func (o *StateChangeIssueEvent) SetStateReasonNil() {
	o.StateReason.Set(nil)
}

// UnsetStateReason ensures that no value is present for StateReason, not even an explicit nil
func (o *StateChangeIssueEvent) UnsetStateReason() {
	o.StateReason.Unset()
}

func (o StateChangeIssueEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["actor"] = o.Actor
	}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["commit_id"] = o.CommitId.Get()
	}
	if true {
		toSerialize["commit_url"] = o.CommitUrl.Get()
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["performed_via_github_app"] = o.PerformedViaGithubApp.Get()
	}
	if o.StateReason.IsSet() {
		toSerialize["state_reason"] = o.StateReason.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableStateChangeIssueEvent struct {
	value *StateChangeIssueEvent
	isSet bool
}

func (v NullableStateChangeIssueEvent) Get() *StateChangeIssueEvent {
	return v.value
}

func (v *NullableStateChangeIssueEvent) Set(val *StateChangeIssueEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableStateChangeIssueEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableStateChangeIssueEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateChangeIssueEvent(val *StateChangeIssueEvent) *NullableStateChangeIssueEvent {
	return &NullableStateChangeIssueEvent{value: val, isSet: true}
}

func (v NullableStateChangeIssueEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateChangeIssueEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


