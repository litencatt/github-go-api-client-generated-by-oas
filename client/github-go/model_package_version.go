/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// PackageVersion A version of a software package
type PackageVersion struct {
	// Unique identifier of the package version.
	Id int32 `json:"id"`
	// The name of the package version.
	Name string `json:"name"`
	Url string `json:"url"`
	PackageHtmlUrl string `json:"package_html_url"`
	HtmlUrl *string `json:"html_url,omitempty"`
	License *string `json:"license,omitempty"`
	Description *string `json:"description,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	Metadata *PackageVersionMetadata `json:"metadata,omitempty"`
}

// NewPackageVersion instantiates a new PackageVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageVersion(id int32, name string, url string, packageHtmlUrl string, createdAt time.Time, updatedAt time.Time) *PackageVersion {
	this := PackageVersion{}
	this.Id = id
	this.Name = name
	this.Url = url
	this.PackageHtmlUrl = packageHtmlUrl
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewPackageVersionWithDefaults instantiates a new PackageVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageVersionWithDefaults() *PackageVersion {
	this := PackageVersion{}
	return &this
}

// GetId returns the Id field value
func (o *PackageVersion) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PackageVersion) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PackageVersion) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *PackageVersion) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PackageVersion) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PackageVersion) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *PackageVersion) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *PackageVersion) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *PackageVersion) SetUrl(v string) {
	o.Url = v
}

// GetPackageHtmlUrl returns the PackageHtmlUrl field value
func (o *PackageVersion) GetPackageHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageHtmlUrl
}

// GetPackageHtmlUrlOk returns a tuple with the PackageHtmlUrl field value
// and a boolean to check if the value has been set.
func (o *PackageVersion) GetPackageHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageHtmlUrl, true
}

// SetPackageHtmlUrl sets field value
func (o *PackageVersion) SetPackageHtmlUrl(v string) {
	o.PackageHtmlUrl = v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *PackageVersion) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageVersion) GetHtmlUrlOk() (*string, bool) {
	if o == nil || o.HtmlUrl == nil {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *PackageVersion) HasHtmlUrl() bool {
	if o != nil && o.HtmlUrl != nil {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *PackageVersion) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *PackageVersion) GetLicense() string {
	if o == nil || o.License == nil {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageVersion) GetLicenseOk() (*string, bool) {
	if o == nil || o.License == nil {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *PackageVersion) HasLicense() bool {
	if o != nil && o.License != nil {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *PackageVersion) SetLicense(v string) {
	o.License = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PackageVersion) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageVersion) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PackageVersion) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PackageVersion) SetDescription(v string) {
	o.Description = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PackageVersion) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PackageVersion) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PackageVersion) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PackageVersion) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PackageVersion) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PackageVersion) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *PackageVersion) GetDeletedAt() time.Time {
	if o == nil || o.DeletedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageVersion) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *PackageVersion) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *PackageVersion) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PackageVersion) GetMetadata() PackageVersionMetadata {
	if o == nil || o.Metadata == nil {
		var ret PackageVersionMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageVersion) GetMetadataOk() (*PackageVersionMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PackageVersion) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given PackageVersionMetadata and assigns it to the Metadata field.
func (o *PackageVersion) SetMetadata(v PackageVersionMetadata) {
	o.Metadata = &v
}

func (o PackageVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["package_html_url"] = o.PackageHtmlUrl
	}
	if o.HtmlUrl != nil {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if o.License != nil {
		toSerialize["license"] = o.License
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.DeletedAt != nil {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullablePackageVersion struct {
	value *PackageVersion
	isSet bool
}

func (v NullablePackageVersion) Get() *PackageVersion {
	return v.value
}

func (v *NullablePackageVersion) Set(val *PackageVersion) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageVersion) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageVersion(val *PackageVersion) *NullablePackageVersion {
	return &NullablePackageVersion{value: val, isSet: true}
}

func (v NullablePackageVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


