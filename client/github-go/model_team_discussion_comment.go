/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// TeamDiscussionComment A reply to a discussion within a team.
type TeamDiscussionComment struct {
	Author NullableNullableSimpleUser `json:"author"`
	// The main text of the comment.
	Body string `json:"body"`
	BodyHtml string `json:"body_html"`
	// The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
	BodyVersion string `json:"body_version"`
	CreatedAt time.Time `json:"created_at"`
	LastEditedAt NullableTime `json:"last_edited_at"`
	DiscussionUrl string `json:"discussion_url"`
	HtmlUrl string `json:"html_url"`
	NodeId string `json:"node_id"`
	// The unique sequence number of a team discussion comment.
	Number int32 `json:"number"`
	UpdatedAt time.Time `json:"updated_at"`
	Url string `json:"url"`
	Reactions *ReactionRollup `json:"reactions,omitempty"`
}

// NewTeamDiscussionComment instantiates a new TeamDiscussionComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamDiscussionComment(author NullableNullableSimpleUser, body string, bodyHtml string, bodyVersion string, createdAt time.Time, lastEditedAt NullableTime, discussionUrl string, htmlUrl string, nodeId string, number int32, updatedAt time.Time, url string) *TeamDiscussionComment {
	this := TeamDiscussionComment{}
	this.Author = author
	this.Body = body
	this.BodyHtml = bodyHtml
	this.BodyVersion = bodyVersion
	this.CreatedAt = createdAt
	this.LastEditedAt = lastEditedAt
	this.DiscussionUrl = discussionUrl
	this.HtmlUrl = htmlUrl
	this.NodeId = nodeId
	this.Number = number
	this.UpdatedAt = updatedAt
	this.Url = url
	return &this
}

// NewTeamDiscussionCommentWithDefaults instantiates a new TeamDiscussionComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamDiscussionCommentWithDefaults() *TeamDiscussionComment {
	this := TeamDiscussionComment{}
	return &this
}

// GetAuthor returns the Author field value
// If the value is explicit nil, the zero value for NullableSimpleUser will be returned
func (o *TeamDiscussionComment) GetAuthor() NullableSimpleUser {
	if o == nil || o.Author.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}

	return *o.Author.Get()
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamDiscussionComment) GetAuthorOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Author.Get(), o.Author.IsSet()
}

// SetAuthor sets field value
func (o *TeamDiscussionComment) SetAuthor(v NullableSimpleUser) {
	o.Author.Set(&v)
}

// GetBody returns the Body field value
func (o *TeamDiscussionComment) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *TeamDiscussionComment) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *TeamDiscussionComment) SetBody(v string) {
	o.Body = v
}

// GetBodyHtml returns the BodyHtml field value
func (o *TeamDiscussionComment) GetBodyHtml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BodyHtml
}

// GetBodyHtmlOk returns a tuple with the BodyHtml field value
// and a boolean to check if the value has been set.
func (o *TeamDiscussionComment) GetBodyHtmlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BodyHtml, true
}

// SetBodyHtml sets field value
func (o *TeamDiscussionComment) SetBodyHtml(v string) {
	o.BodyHtml = v
}

// GetBodyVersion returns the BodyVersion field value
func (o *TeamDiscussionComment) GetBodyVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BodyVersion
}

// GetBodyVersionOk returns a tuple with the BodyVersion field value
// and a boolean to check if the value has been set.
func (o *TeamDiscussionComment) GetBodyVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BodyVersion, true
}

// SetBodyVersion sets field value
func (o *TeamDiscussionComment) SetBodyVersion(v string) {
	o.BodyVersion = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *TeamDiscussionComment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TeamDiscussionComment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TeamDiscussionComment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetLastEditedAt returns the LastEditedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *TeamDiscussionComment) GetLastEditedAt() time.Time {
	if o == nil || o.LastEditedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastEditedAt.Get()
}

// GetLastEditedAtOk returns a tuple with the LastEditedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamDiscussionComment) GetLastEditedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastEditedAt.Get(), o.LastEditedAt.IsSet()
}

// SetLastEditedAt sets field value
func (o *TeamDiscussionComment) SetLastEditedAt(v time.Time) {
	o.LastEditedAt.Set(&v)
}

// GetDiscussionUrl returns the DiscussionUrl field value
func (o *TeamDiscussionComment) GetDiscussionUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiscussionUrl
}

// GetDiscussionUrlOk returns a tuple with the DiscussionUrl field value
// and a boolean to check if the value has been set.
func (o *TeamDiscussionComment) GetDiscussionUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscussionUrl, true
}

// SetDiscussionUrl sets field value
func (o *TeamDiscussionComment) SetDiscussionUrl(v string) {
	o.DiscussionUrl = v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *TeamDiscussionComment) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *TeamDiscussionComment) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *TeamDiscussionComment) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetNodeId returns the NodeId field value
func (o *TeamDiscussionComment) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *TeamDiscussionComment) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *TeamDiscussionComment) SetNodeId(v string) {
	o.NodeId = v
}

// GetNumber returns the Number field value
func (o *TeamDiscussionComment) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *TeamDiscussionComment) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *TeamDiscussionComment) SetNumber(v int32) {
	o.Number = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *TeamDiscussionComment) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *TeamDiscussionComment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *TeamDiscussionComment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUrl returns the Url field value
func (o *TeamDiscussionComment) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *TeamDiscussionComment) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *TeamDiscussionComment) SetUrl(v string) {
	o.Url = v
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *TeamDiscussionComment) GetReactions() ReactionRollup {
	if o == nil || o.Reactions == nil {
		var ret ReactionRollup
		return ret
	}
	return *o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamDiscussionComment) GetReactionsOk() (*ReactionRollup, bool) {
	if o == nil || o.Reactions == nil {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *TeamDiscussionComment) HasReactions() bool {
	if o != nil && o.Reactions != nil {
		return true
	}

	return false
}

// SetReactions gets a reference to the given ReactionRollup and assigns it to the Reactions field.
func (o *TeamDiscussionComment) SetReactions(v ReactionRollup) {
	o.Reactions = &v
}

func (o TeamDiscussionComment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["author"] = o.Author.Get()
	}
	if true {
		toSerialize["body"] = o.Body
	}
	if true {
		toSerialize["body_html"] = o.BodyHtml
	}
	if true {
		toSerialize["body_version"] = o.BodyVersion
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["last_edited_at"] = o.LastEditedAt.Get()
	}
	if true {
		toSerialize["discussion_url"] = o.DiscussionUrl
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if true {
		toSerialize["number"] = o.Number
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if o.Reactions != nil {
		toSerialize["reactions"] = o.Reactions
	}
	return json.Marshal(toSerialize)
}

type NullableTeamDiscussionComment struct {
	value *TeamDiscussionComment
	isSet bool
}

func (v NullableTeamDiscussionComment) Get() *TeamDiscussionComment {
	return v.value
}

func (v *NullableTeamDiscussionComment) Set(val *TeamDiscussionComment) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamDiscussionComment) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamDiscussionComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamDiscussionComment(val *TeamDiscussionComment) *NullableTeamDiscussionComment {
	return &NullableTeamDiscussionComment{value: val, isSet: true}
}

func (v NullableTeamDiscussionComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamDiscussionComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


