/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// EnvironmentProtectionRulesInner struct for EnvironmentProtectionRulesInner
type EnvironmentProtectionRulesInner struct {
	EnvironmentProtectionRulesInnerAnyOf *EnvironmentProtectionRulesInnerAnyOf
	EnvironmentProtectionRulesInnerAnyOf1 *EnvironmentProtectionRulesInnerAnyOf1
	EnvironmentProtectionRulesInnerAnyOf2 *EnvironmentProtectionRulesInnerAnyOf2
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *EnvironmentProtectionRulesInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into EnvironmentProtectionRulesInnerAnyOf
	err = json.Unmarshal(data, &dst.EnvironmentProtectionRulesInnerAnyOf);
	if err == nil {
		jsonEnvironmentProtectionRulesInnerAnyOf, _ := json.Marshal(dst.EnvironmentProtectionRulesInnerAnyOf)
		if string(jsonEnvironmentProtectionRulesInnerAnyOf) == "{}" { // empty struct
			dst.EnvironmentProtectionRulesInnerAnyOf = nil
		} else {
			return nil // data stored in dst.EnvironmentProtectionRulesInnerAnyOf, return on the first match
		}
	} else {
		dst.EnvironmentProtectionRulesInnerAnyOf = nil
	}

	// try to unmarshal JSON data into EnvironmentProtectionRulesInnerAnyOf1
	err = json.Unmarshal(data, &dst.EnvironmentProtectionRulesInnerAnyOf1);
	if err == nil {
		jsonEnvironmentProtectionRulesInnerAnyOf1, _ := json.Marshal(dst.EnvironmentProtectionRulesInnerAnyOf1)
		if string(jsonEnvironmentProtectionRulesInnerAnyOf1) == "{}" { // empty struct
			dst.EnvironmentProtectionRulesInnerAnyOf1 = nil
		} else {
			return nil // data stored in dst.EnvironmentProtectionRulesInnerAnyOf1, return on the first match
		}
	} else {
		dst.EnvironmentProtectionRulesInnerAnyOf1 = nil
	}

	// try to unmarshal JSON data into EnvironmentProtectionRulesInnerAnyOf2
	err = json.Unmarshal(data, &dst.EnvironmentProtectionRulesInnerAnyOf2);
	if err == nil {
		jsonEnvironmentProtectionRulesInnerAnyOf2, _ := json.Marshal(dst.EnvironmentProtectionRulesInnerAnyOf2)
		if string(jsonEnvironmentProtectionRulesInnerAnyOf2) == "{}" { // empty struct
			dst.EnvironmentProtectionRulesInnerAnyOf2 = nil
		} else {
			return nil // data stored in dst.EnvironmentProtectionRulesInnerAnyOf2, return on the first match
		}
	} else {
		dst.EnvironmentProtectionRulesInnerAnyOf2 = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(EnvironmentProtectionRulesInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *EnvironmentProtectionRulesInner) MarshalJSON() ([]byte, error) {
	if src.EnvironmentProtectionRulesInnerAnyOf != nil {
		return json.Marshal(&src.EnvironmentProtectionRulesInnerAnyOf)
	}

	if src.EnvironmentProtectionRulesInnerAnyOf1 != nil {
		return json.Marshal(&src.EnvironmentProtectionRulesInnerAnyOf1)
	}

	if src.EnvironmentProtectionRulesInnerAnyOf2 != nil {
		return json.Marshal(&src.EnvironmentProtectionRulesInnerAnyOf2)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableEnvironmentProtectionRulesInner struct {
	value *EnvironmentProtectionRulesInner
	isSet bool
}

func (v NullableEnvironmentProtectionRulesInner) Get() *EnvironmentProtectionRulesInner {
	return v.value
}

func (v *NullableEnvironmentProtectionRulesInner) Set(val *EnvironmentProtectionRulesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentProtectionRulesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentProtectionRulesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentProtectionRulesInner(val *EnvironmentProtectionRulesInner) *NullableEnvironmentProtectionRulesInner {
	return &NullableEnvironmentProtectionRulesInner{value: val, isSet: true}
}

func (v NullableEnvironmentProtectionRulesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentProtectionRulesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


