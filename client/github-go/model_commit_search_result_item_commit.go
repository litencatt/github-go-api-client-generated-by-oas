/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// CommitSearchResultItemCommit struct for CommitSearchResultItemCommit
type CommitSearchResultItemCommit struct {
	Author CommitSearchResultItemCommitAuthor `json:"author"`
	Committer NullableNullableGitUser `json:"committer"`
	CommentCount int32 `json:"comment_count"`
	Message string `json:"message"`
	Tree ShortBranchCommit `json:"tree"`
	Url string `json:"url"`
	Verification *Verification `json:"verification,omitempty"`
}

// NewCommitSearchResultItemCommit instantiates a new CommitSearchResultItemCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitSearchResultItemCommit(author CommitSearchResultItemCommitAuthor, committer NullableNullableGitUser, commentCount int32, message string, tree ShortBranchCommit, url string) *CommitSearchResultItemCommit {
	this := CommitSearchResultItemCommit{}
	this.Author = author
	this.Committer = committer
	this.CommentCount = commentCount
	this.Message = message
	this.Tree = tree
	this.Url = url
	return &this
}

// NewCommitSearchResultItemCommitWithDefaults instantiates a new CommitSearchResultItemCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitSearchResultItemCommitWithDefaults() *CommitSearchResultItemCommit {
	this := CommitSearchResultItemCommit{}
	return &this
}

// GetAuthor returns the Author field value
func (o *CommitSearchResultItemCommit) GetAuthor() CommitSearchResultItemCommitAuthor {
	if o == nil {
		var ret CommitSearchResultItemCommitAuthor
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItemCommit) GetAuthorOk() (*CommitSearchResultItemCommitAuthor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *CommitSearchResultItemCommit) SetAuthor(v CommitSearchResultItemCommitAuthor) {
	o.Author = v
}

// GetCommitter returns the Committer field value
// If the value is explicit nil, the zero value for NullableGitUser will be returned
func (o *CommitSearchResultItemCommit) GetCommitter() NullableGitUser {
	if o == nil || o.Committer.Get() == nil {
		var ret NullableGitUser
		return ret
	}

	return *o.Committer.Get()
}

// GetCommitterOk returns a tuple with the Committer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommitSearchResultItemCommit) GetCommitterOk() (*NullableGitUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Committer.Get(), o.Committer.IsSet()
}

// SetCommitter sets field value
func (o *CommitSearchResultItemCommit) SetCommitter(v NullableGitUser) {
	o.Committer.Set(&v)
}

// GetCommentCount returns the CommentCount field value
func (o *CommitSearchResultItemCommit) GetCommentCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CommentCount
}

// GetCommentCountOk returns a tuple with the CommentCount field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItemCommit) GetCommentCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommentCount, true
}

// SetCommentCount sets field value
func (o *CommitSearchResultItemCommit) SetCommentCount(v int32) {
	o.CommentCount = v
}

// GetMessage returns the Message field value
func (o *CommitSearchResultItemCommit) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItemCommit) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CommitSearchResultItemCommit) SetMessage(v string) {
	o.Message = v
}

// GetTree returns the Tree field value
func (o *CommitSearchResultItemCommit) GetTree() ShortBranchCommit {
	if o == nil {
		var ret ShortBranchCommit
		return ret
	}

	return o.Tree
}

// GetTreeOk returns a tuple with the Tree field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItemCommit) GetTreeOk() (*ShortBranchCommit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tree, true
}

// SetTree sets field value
func (o *CommitSearchResultItemCommit) SetTree(v ShortBranchCommit) {
	o.Tree = v
}

// GetUrl returns the Url field value
func (o *CommitSearchResultItemCommit) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItemCommit) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CommitSearchResultItemCommit) SetUrl(v string) {
	o.Url = v
}

// GetVerification returns the Verification field value if set, zero value otherwise.
func (o *CommitSearchResultItemCommit) GetVerification() Verification {
	if o == nil || o.Verification == nil {
		var ret Verification
		return ret
	}
	return *o.Verification
}

// GetVerificationOk returns a tuple with the Verification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItemCommit) GetVerificationOk() (*Verification, bool) {
	if o == nil || o.Verification == nil {
		return nil, false
	}
	return o.Verification, true
}

// HasVerification returns a boolean if a field has been set.
func (o *CommitSearchResultItemCommit) HasVerification() bool {
	if o != nil && o.Verification != nil {
		return true
	}

	return false
}

// SetVerification gets a reference to the given Verification and assigns it to the Verification field.
func (o *CommitSearchResultItemCommit) SetVerification(v Verification) {
	o.Verification = &v
}

func (o CommitSearchResultItemCommit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["author"] = o.Author
	}
	if true {
		toSerialize["committer"] = o.Committer.Get()
	}
	if true {
		toSerialize["comment_count"] = o.CommentCount
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["tree"] = o.Tree
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if o.Verification != nil {
		toSerialize["verification"] = o.Verification
	}
	return json.Marshal(toSerialize)
}

type NullableCommitSearchResultItemCommit struct {
	value *CommitSearchResultItemCommit
	isSet bool
}

func (v NullableCommitSearchResultItemCommit) Get() *CommitSearchResultItemCommit {
	return v.value
}

func (v *NullableCommitSearchResultItemCommit) Set(val *CommitSearchResultItemCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitSearchResultItemCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitSearchResultItemCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitSearchResultItemCommit(val *CommitSearchResultItemCommit) *NullableCommitSearchResultItemCommit {
	return &NullableCommitSearchResultItemCommit{value: val, isSet: true}
}

func (v NullableCommitSearchResultItemCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitSearchResultItemCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


