/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// IssueEventForIssue Issue Event for Issue
type IssueEventForIssue struct {
	AddedToProjectIssueEvent *AddedToProjectIssueEvent
	AssignedIssueEvent *AssignedIssueEvent
	ConvertedNoteToIssueIssueEvent *ConvertedNoteToIssueIssueEvent
	DemilestonedIssueEvent *DemilestonedIssueEvent
	LabeledIssueEvent *LabeledIssueEvent
	LockedIssueEvent *LockedIssueEvent
	MilestonedIssueEvent *MilestonedIssueEvent
	MovedColumnInProjectIssueEvent *MovedColumnInProjectIssueEvent
	RemovedFromProjectIssueEvent *RemovedFromProjectIssueEvent
	RenamedIssueEvent *RenamedIssueEvent
	ReviewDismissedIssueEvent *ReviewDismissedIssueEvent
	ReviewRequestRemovedIssueEvent *ReviewRequestRemovedIssueEvent
	ReviewRequestedIssueEvent *ReviewRequestedIssueEvent
	UnassignedIssueEvent *UnassignedIssueEvent
	UnlabeledIssueEvent *UnlabeledIssueEvent
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *IssueEventForIssue) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AddedToProjectIssueEvent
	err = json.Unmarshal(data, &dst.AddedToProjectIssueEvent);
	if err == nil {
		jsonAddedToProjectIssueEvent, _ := json.Marshal(dst.AddedToProjectIssueEvent)
		if string(jsonAddedToProjectIssueEvent) == "{}" { // empty struct
			dst.AddedToProjectIssueEvent = nil
		} else {
			return nil // data stored in dst.AddedToProjectIssueEvent, return on the first match
		}
	} else {
		dst.AddedToProjectIssueEvent = nil
	}

	// try to unmarshal JSON data into AssignedIssueEvent
	err = json.Unmarshal(data, &dst.AssignedIssueEvent);
	if err == nil {
		jsonAssignedIssueEvent, _ := json.Marshal(dst.AssignedIssueEvent)
		if string(jsonAssignedIssueEvent) == "{}" { // empty struct
			dst.AssignedIssueEvent = nil
		} else {
			return nil // data stored in dst.AssignedIssueEvent, return on the first match
		}
	} else {
		dst.AssignedIssueEvent = nil
	}

	// try to unmarshal JSON data into ConvertedNoteToIssueIssueEvent
	err = json.Unmarshal(data, &dst.ConvertedNoteToIssueIssueEvent);
	if err == nil {
		jsonConvertedNoteToIssueIssueEvent, _ := json.Marshal(dst.ConvertedNoteToIssueIssueEvent)
		if string(jsonConvertedNoteToIssueIssueEvent) == "{}" { // empty struct
			dst.ConvertedNoteToIssueIssueEvent = nil
		} else {
			return nil // data stored in dst.ConvertedNoteToIssueIssueEvent, return on the first match
		}
	} else {
		dst.ConvertedNoteToIssueIssueEvent = nil
	}

	// try to unmarshal JSON data into DemilestonedIssueEvent
	err = json.Unmarshal(data, &dst.DemilestonedIssueEvent);
	if err == nil {
		jsonDemilestonedIssueEvent, _ := json.Marshal(dst.DemilestonedIssueEvent)
		if string(jsonDemilestonedIssueEvent) == "{}" { // empty struct
			dst.DemilestonedIssueEvent = nil
		} else {
			return nil // data stored in dst.DemilestonedIssueEvent, return on the first match
		}
	} else {
		dst.DemilestonedIssueEvent = nil
	}

	// try to unmarshal JSON data into LabeledIssueEvent
	err = json.Unmarshal(data, &dst.LabeledIssueEvent);
	if err == nil {
		jsonLabeledIssueEvent, _ := json.Marshal(dst.LabeledIssueEvent)
		if string(jsonLabeledIssueEvent) == "{}" { // empty struct
			dst.LabeledIssueEvent = nil
		} else {
			return nil // data stored in dst.LabeledIssueEvent, return on the first match
		}
	} else {
		dst.LabeledIssueEvent = nil
	}

	// try to unmarshal JSON data into LockedIssueEvent
	err = json.Unmarshal(data, &dst.LockedIssueEvent);
	if err == nil {
		jsonLockedIssueEvent, _ := json.Marshal(dst.LockedIssueEvent)
		if string(jsonLockedIssueEvent) == "{}" { // empty struct
			dst.LockedIssueEvent = nil
		} else {
			return nil // data stored in dst.LockedIssueEvent, return on the first match
		}
	} else {
		dst.LockedIssueEvent = nil
	}

	// try to unmarshal JSON data into MilestonedIssueEvent
	err = json.Unmarshal(data, &dst.MilestonedIssueEvent);
	if err == nil {
		jsonMilestonedIssueEvent, _ := json.Marshal(dst.MilestonedIssueEvent)
		if string(jsonMilestonedIssueEvent) == "{}" { // empty struct
			dst.MilestonedIssueEvent = nil
		} else {
			return nil // data stored in dst.MilestonedIssueEvent, return on the first match
		}
	} else {
		dst.MilestonedIssueEvent = nil
	}

	// try to unmarshal JSON data into MovedColumnInProjectIssueEvent
	err = json.Unmarshal(data, &dst.MovedColumnInProjectIssueEvent);
	if err == nil {
		jsonMovedColumnInProjectIssueEvent, _ := json.Marshal(dst.MovedColumnInProjectIssueEvent)
		if string(jsonMovedColumnInProjectIssueEvent) == "{}" { // empty struct
			dst.MovedColumnInProjectIssueEvent = nil
		} else {
			return nil // data stored in dst.MovedColumnInProjectIssueEvent, return on the first match
		}
	} else {
		dst.MovedColumnInProjectIssueEvent = nil
	}

	// try to unmarshal JSON data into RemovedFromProjectIssueEvent
	err = json.Unmarshal(data, &dst.RemovedFromProjectIssueEvent);
	if err == nil {
		jsonRemovedFromProjectIssueEvent, _ := json.Marshal(dst.RemovedFromProjectIssueEvent)
		if string(jsonRemovedFromProjectIssueEvent) == "{}" { // empty struct
			dst.RemovedFromProjectIssueEvent = nil
		} else {
			return nil // data stored in dst.RemovedFromProjectIssueEvent, return on the first match
		}
	} else {
		dst.RemovedFromProjectIssueEvent = nil
	}

	// try to unmarshal JSON data into RenamedIssueEvent
	err = json.Unmarshal(data, &dst.RenamedIssueEvent);
	if err == nil {
		jsonRenamedIssueEvent, _ := json.Marshal(dst.RenamedIssueEvent)
		if string(jsonRenamedIssueEvent) == "{}" { // empty struct
			dst.RenamedIssueEvent = nil
		} else {
			return nil // data stored in dst.RenamedIssueEvent, return on the first match
		}
	} else {
		dst.RenamedIssueEvent = nil
	}

	// try to unmarshal JSON data into ReviewDismissedIssueEvent
	err = json.Unmarshal(data, &dst.ReviewDismissedIssueEvent);
	if err == nil {
		jsonReviewDismissedIssueEvent, _ := json.Marshal(dst.ReviewDismissedIssueEvent)
		if string(jsonReviewDismissedIssueEvent) == "{}" { // empty struct
			dst.ReviewDismissedIssueEvent = nil
		} else {
			return nil // data stored in dst.ReviewDismissedIssueEvent, return on the first match
		}
	} else {
		dst.ReviewDismissedIssueEvent = nil
	}

	// try to unmarshal JSON data into ReviewRequestRemovedIssueEvent
	err = json.Unmarshal(data, &dst.ReviewRequestRemovedIssueEvent);
	if err == nil {
		jsonReviewRequestRemovedIssueEvent, _ := json.Marshal(dst.ReviewRequestRemovedIssueEvent)
		if string(jsonReviewRequestRemovedIssueEvent) == "{}" { // empty struct
			dst.ReviewRequestRemovedIssueEvent = nil
		} else {
			return nil // data stored in dst.ReviewRequestRemovedIssueEvent, return on the first match
		}
	} else {
		dst.ReviewRequestRemovedIssueEvent = nil
	}

	// try to unmarshal JSON data into ReviewRequestedIssueEvent
	err = json.Unmarshal(data, &dst.ReviewRequestedIssueEvent);
	if err == nil {
		jsonReviewRequestedIssueEvent, _ := json.Marshal(dst.ReviewRequestedIssueEvent)
		if string(jsonReviewRequestedIssueEvent) == "{}" { // empty struct
			dst.ReviewRequestedIssueEvent = nil
		} else {
			return nil // data stored in dst.ReviewRequestedIssueEvent, return on the first match
		}
	} else {
		dst.ReviewRequestedIssueEvent = nil
	}

	// try to unmarshal JSON data into UnassignedIssueEvent
	err = json.Unmarshal(data, &dst.UnassignedIssueEvent);
	if err == nil {
		jsonUnassignedIssueEvent, _ := json.Marshal(dst.UnassignedIssueEvent)
		if string(jsonUnassignedIssueEvent) == "{}" { // empty struct
			dst.UnassignedIssueEvent = nil
		} else {
			return nil // data stored in dst.UnassignedIssueEvent, return on the first match
		}
	} else {
		dst.UnassignedIssueEvent = nil
	}

	// try to unmarshal JSON data into UnlabeledIssueEvent
	err = json.Unmarshal(data, &dst.UnlabeledIssueEvent);
	if err == nil {
		jsonUnlabeledIssueEvent, _ := json.Marshal(dst.UnlabeledIssueEvent)
		if string(jsonUnlabeledIssueEvent) == "{}" { // empty struct
			dst.UnlabeledIssueEvent = nil
		} else {
			return nil // data stored in dst.UnlabeledIssueEvent, return on the first match
		}
	} else {
		dst.UnlabeledIssueEvent = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(IssueEventForIssue)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *IssueEventForIssue) MarshalJSON() ([]byte, error) {
	if src.AddedToProjectIssueEvent != nil {
		return json.Marshal(&src.AddedToProjectIssueEvent)
	}

	if src.AssignedIssueEvent != nil {
		return json.Marshal(&src.AssignedIssueEvent)
	}

	if src.ConvertedNoteToIssueIssueEvent != nil {
		return json.Marshal(&src.ConvertedNoteToIssueIssueEvent)
	}

	if src.DemilestonedIssueEvent != nil {
		return json.Marshal(&src.DemilestonedIssueEvent)
	}

	if src.LabeledIssueEvent != nil {
		return json.Marshal(&src.LabeledIssueEvent)
	}

	if src.LockedIssueEvent != nil {
		return json.Marshal(&src.LockedIssueEvent)
	}

	if src.MilestonedIssueEvent != nil {
		return json.Marshal(&src.MilestonedIssueEvent)
	}

	if src.MovedColumnInProjectIssueEvent != nil {
		return json.Marshal(&src.MovedColumnInProjectIssueEvent)
	}

	if src.RemovedFromProjectIssueEvent != nil {
		return json.Marshal(&src.RemovedFromProjectIssueEvent)
	}

	if src.RenamedIssueEvent != nil {
		return json.Marshal(&src.RenamedIssueEvent)
	}

	if src.ReviewDismissedIssueEvent != nil {
		return json.Marshal(&src.ReviewDismissedIssueEvent)
	}

	if src.ReviewRequestRemovedIssueEvent != nil {
		return json.Marshal(&src.ReviewRequestRemovedIssueEvent)
	}

	if src.ReviewRequestedIssueEvent != nil {
		return json.Marshal(&src.ReviewRequestedIssueEvent)
	}

	if src.UnassignedIssueEvent != nil {
		return json.Marshal(&src.UnassignedIssueEvent)
	}

	if src.UnlabeledIssueEvent != nil {
		return json.Marshal(&src.UnlabeledIssueEvent)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableIssueEventForIssue struct {
	value *IssueEventForIssue
	isSet bool
}

func (v NullableIssueEventForIssue) Get() *IssueEventForIssue {
	return v.value
}

func (v *NullableIssueEventForIssue) Set(val *IssueEventForIssue) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueEventForIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueEventForIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueEventForIssue(val *IssueEventForIssue) *NullableIssueEventForIssue {
	return &NullableIssueEventForIssue{value: val, isSet: true}
}

func (v NullableIssueEventForIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueEventForIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


