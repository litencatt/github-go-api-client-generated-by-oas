/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// PullsMergeRequest struct for PullsMergeRequest
type PullsMergeRequest struct {
	// Title for the automatic commit message.
	CommitTitle *string `json:"commit_title,omitempty"`
	// Extra detail to append to automatic commit message.
	CommitMessage *string `json:"commit_message,omitempty"`
	// SHA that pull request head must match to allow merge.
	Sha *string `json:"sha,omitempty"`
	// Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
	MergeMethod *string `json:"merge_method,omitempty"`
}

// NewPullsMergeRequest instantiates a new PullsMergeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPullsMergeRequest() *PullsMergeRequest {
	this := PullsMergeRequest{}
	return &this
}

// NewPullsMergeRequestWithDefaults instantiates a new PullsMergeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPullsMergeRequestWithDefaults() *PullsMergeRequest {
	this := PullsMergeRequest{}
	return &this
}

// GetCommitTitle returns the CommitTitle field value if set, zero value otherwise.
func (o *PullsMergeRequest) GetCommitTitle() string {
	if o == nil || o.CommitTitle == nil {
		var ret string
		return ret
	}
	return *o.CommitTitle
}

// GetCommitTitleOk returns a tuple with the CommitTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsMergeRequest) GetCommitTitleOk() (*string, bool) {
	if o == nil || o.CommitTitle == nil {
		return nil, false
	}
	return o.CommitTitle, true
}

// HasCommitTitle returns a boolean if a field has been set.
func (o *PullsMergeRequest) HasCommitTitle() bool {
	if o != nil && o.CommitTitle != nil {
		return true
	}

	return false
}

// SetCommitTitle gets a reference to the given string and assigns it to the CommitTitle field.
func (o *PullsMergeRequest) SetCommitTitle(v string) {
	o.CommitTitle = &v
}

// GetCommitMessage returns the CommitMessage field value if set, zero value otherwise.
func (o *PullsMergeRequest) GetCommitMessage() string {
	if o == nil || o.CommitMessage == nil {
		var ret string
		return ret
	}
	return *o.CommitMessage
}

// GetCommitMessageOk returns a tuple with the CommitMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsMergeRequest) GetCommitMessageOk() (*string, bool) {
	if o == nil || o.CommitMessage == nil {
		return nil, false
	}
	return o.CommitMessage, true
}

// HasCommitMessage returns a boolean if a field has been set.
func (o *PullsMergeRequest) HasCommitMessage() bool {
	if o != nil && o.CommitMessage != nil {
		return true
	}

	return false
}

// SetCommitMessage gets a reference to the given string and assigns it to the CommitMessage field.
func (o *PullsMergeRequest) SetCommitMessage(v string) {
	o.CommitMessage = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *PullsMergeRequest) GetSha() string {
	if o == nil || o.Sha == nil {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsMergeRequest) GetShaOk() (*string, bool) {
	if o == nil || o.Sha == nil {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *PullsMergeRequest) HasSha() bool {
	if o != nil && o.Sha != nil {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *PullsMergeRequest) SetSha(v string) {
	o.Sha = &v
}

// GetMergeMethod returns the MergeMethod field value if set, zero value otherwise.
func (o *PullsMergeRequest) GetMergeMethod() string {
	if o == nil || o.MergeMethod == nil {
		var ret string
		return ret
	}
	return *o.MergeMethod
}

// GetMergeMethodOk returns a tuple with the MergeMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsMergeRequest) GetMergeMethodOk() (*string, bool) {
	if o == nil || o.MergeMethod == nil {
		return nil, false
	}
	return o.MergeMethod, true
}

// HasMergeMethod returns a boolean if a field has been set.
func (o *PullsMergeRequest) HasMergeMethod() bool {
	if o != nil && o.MergeMethod != nil {
		return true
	}

	return false
}

// SetMergeMethod gets a reference to the given string and assigns it to the MergeMethod field.
func (o *PullsMergeRequest) SetMergeMethod(v string) {
	o.MergeMethod = &v
}

func (o PullsMergeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommitTitle != nil {
		toSerialize["commit_title"] = o.CommitTitle
	}
	if o.CommitMessage != nil {
		toSerialize["commit_message"] = o.CommitMessage
	}
	if o.Sha != nil {
		toSerialize["sha"] = o.Sha
	}
	if o.MergeMethod != nil {
		toSerialize["merge_method"] = o.MergeMethod
	}
	return json.Marshal(toSerialize)
}

type NullablePullsMergeRequest struct {
	value *PullsMergeRequest
	isSet bool
}

func (v NullablePullsMergeRequest) Get() *PullsMergeRequest {
	return v.value
}

func (v *NullablePullsMergeRequest) Set(val *PullsMergeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePullsMergeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePullsMergeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePullsMergeRequest(val *PullsMergeRequest) *NullablePullsMergeRequest {
	return &NullablePullsMergeRequest{value: val, isSet: true}
}

func (v NullablePullsMergeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePullsMergeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


