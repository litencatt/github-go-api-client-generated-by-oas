/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// PendingDeploymentReviewersInnerReviewer struct for PendingDeploymentReviewersInnerReviewer
type PendingDeploymentReviewersInnerReviewer struct {
	SimpleUser *SimpleUser
	Team *Team
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *PendingDeploymentReviewersInnerReviewer) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into SimpleUser
	err = json.Unmarshal(data, &dst.SimpleUser);
	if err == nil {
		jsonSimpleUser, _ := json.Marshal(dst.SimpleUser)
		if string(jsonSimpleUser) == "{}" { // empty struct
			dst.SimpleUser = nil
		} else {
			return nil // data stored in dst.SimpleUser, return on the first match
		}
	} else {
		dst.SimpleUser = nil
	}

	// try to unmarshal JSON data into Team
	err = json.Unmarshal(data, &dst.Team);
	if err == nil {
		jsonTeam, _ := json.Marshal(dst.Team)
		if string(jsonTeam) == "{}" { // empty struct
			dst.Team = nil
		} else {
			return nil // data stored in dst.Team, return on the first match
		}
	} else {
		dst.Team = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(PendingDeploymentReviewersInnerReviewer)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *PendingDeploymentReviewersInnerReviewer) MarshalJSON() ([]byte, error) {
	if src.SimpleUser != nil {
		return json.Marshal(&src.SimpleUser)
	}

	if src.Team != nil {
		return json.Marshal(&src.Team)
	}

	return nil, nil // no data in anyOf schemas
}

type NullablePendingDeploymentReviewersInnerReviewer struct {
	value *PendingDeploymentReviewersInnerReviewer
	isSet bool
}

func (v NullablePendingDeploymentReviewersInnerReviewer) Get() *PendingDeploymentReviewersInnerReviewer {
	return v.value
}

func (v *NullablePendingDeploymentReviewersInnerReviewer) Set(val *PendingDeploymentReviewersInnerReviewer) {
	v.value = val
	v.isSet = true
}

func (v NullablePendingDeploymentReviewersInnerReviewer) IsSet() bool {
	return v.isSet
}

func (v *NullablePendingDeploymentReviewersInnerReviewer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePendingDeploymentReviewersInnerReviewer(val *PendingDeploymentReviewersInnerReviewer) *NullablePendingDeploymentReviewersInnerReviewer {
	return &NullablePendingDeploymentReviewersInnerReviewer{value: val, isSet: true}
}

func (v NullablePendingDeploymentReviewersInnerReviewer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePendingDeploymentReviewersInnerReviewer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


