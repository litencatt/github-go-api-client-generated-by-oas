/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// CodeScanningAlertClassification A classification of the file. For example to identify it as generated.
type CodeScanningAlertClassification string

// List of code-scanning-alert-classification
const (
	SOURCE CodeScanningAlertClassification = "source"
	GENERATED CodeScanningAlertClassification = "generated"
	TEST CodeScanningAlertClassification = "test"
	LIBRARY CodeScanningAlertClassification = "library"
)

// All allowed values of CodeScanningAlertClassification enum
var AllowedCodeScanningAlertClassificationEnumValues = []CodeScanningAlertClassification{
	"source",
	"generated",
	"test",
	"library",
}

func (v *CodeScanningAlertClassification) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CodeScanningAlertClassification(value)
	for _, existing := range AllowedCodeScanningAlertClassificationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CodeScanningAlertClassification", value)
}

// NewCodeScanningAlertClassificationFromValue returns a pointer to a valid CodeScanningAlertClassification
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCodeScanningAlertClassificationFromValue(v string) (*CodeScanningAlertClassification, error) {
	ev := CodeScanningAlertClassification(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CodeScanningAlertClassification: valid values are %v", v, AllowedCodeScanningAlertClassificationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CodeScanningAlertClassification) IsValid() bool {
	for _, existing := range AllowedCodeScanningAlertClassificationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to code-scanning-alert-classification value
func (v CodeScanningAlertClassification) Ptr() *CodeScanningAlertClassification {
	return &v
}

type NullableCodeScanningAlertClassification struct {
	value *CodeScanningAlertClassification
	isSet bool
}

func (v NullableCodeScanningAlertClassification) Get() *CodeScanningAlertClassification {
	return v.value
}

func (v *NullableCodeScanningAlertClassification) Set(val *CodeScanningAlertClassification) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeScanningAlertClassification) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeScanningAlertClassification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeScanningAlertClassification(val *CodeScanningAlertClassification) *NullableCodeScanningAlertClassification {
	return &NullableCodeScanningAlertClassification{value: val, isSet: true}
}

func (v NullableCodeScanningAlertClassification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeScanningAlertClassification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

