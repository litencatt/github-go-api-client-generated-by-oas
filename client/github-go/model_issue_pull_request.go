/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// IssuePullRequest struct for IssuePullRequest
type IssuePullRequest struct {
	MergedAt NullableTime `json:"merged_at,omitempty"`
	DiffUrl NullableString `json:"diff_url"`
	HtmlUrl NullableString `json:"html_url"`
	PatchUrl NullableString `json:"patch_url"`
	Url NullableString `json:"url"`
}

// NewIssuePullRequest instantiates a new IssuePullRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuePullRequest(diffUrl NullableString, htmlUrl NullableString, patchUrl NullableString, url NullableString) *IssuePullRequest {
	this := IssuePullRequest{}
	this.DiffUrl = diffUrl
	this.HtmlUrl = htmlUrl
	this.PatchUrl = patchUrl
	this.Url = url
	return &this
}

// NewIssuePullRequestWithDefaults instantiates a new IssuePullRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuePullRequestWithDefaults() *IssuePullRequest {
	this := IssuePullRequest{}
	return &this
}

// GetMergedAt returns the MergedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssuePullRequest) GetMergedAt() time.Time {
	if o == nil || o.MergedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.MergedAt.Get()
}

// GetMergedAtOk returns a tuple with the MergedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuePullRequest) GetMergedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.MergedAt.Get(), o.MergedAt.IsSet()
}

// HasMergedAt returns a boolean if a field has been set.
func (o *IssuePullRequest) HasMergedAt() bool {
	if o != nil && o.MergedAt.IsSet() {
		return true
	}

	return false
}

// SetMergedAt gets a reference to the given NullableTime and assigns it to the MergedAt field.
func (o *IssuePullRequest) SetMergedAt(v time.Time) {
	o.MergedAt.Set(&v)
}
// SetMergedAtNil sets the value for MergedAt to be an explicit nil
func (o *IssuePullRequest) SetMergedAtNil() {
	o.MergedAt.Set(nil)
}

// UnsetMergedAt ensures that no value is present for MergedAt, not even an explicit nil
func (o *IssuePullRequest) UnsetMergedAt() {
	o.MergedAt.Unset()
}

// GetDiffUrl returns the DiffUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IssuePullRequest) GetDiffUrl() string {
	if o == nil || o.DiffUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.DiffUrl.Get()
}

// GetDiffUrlOk returns a tuple with the DiffUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuePullRequest) GetDiffUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiffUrl.Get(), o.DiffUrl.IsSet()
}

// SetDiffUrl sets field value
func (o *IssuePullRequest) SetDiffUrl(v string) {
	o.DiffUrl.Set(&v)
}

// GetHtmlUrl returns the HtmlUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IssuePullRequest) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.HtmlUrl.Get()
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuePullRequest) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HtmlUrl.Get(), o.HtmlUrl.IsSet()
}

// SetHtmlUrl sets field value
func (o *IssuePullRequest) SetHtmlUrl(v string) {
	o.HtmlUrl.Set(&v)
}

// GetPatchUrl returns the PatchUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IssuePullRequest) GetPatchUrl() string {
	if o == nil || o.PatchUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.PatchUrl.Get()
}

// GetPatchUrlOk returns a tuple with the PatchUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuePullRequest) GetPatchUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PatchUrl.Get(), o.PatchUrl.IsSet()
}

// SetPatchUrl sets field value
func (o *IssuePullRequest) SetPatchUrl(v string) {
	o.PatchUrl.Set(&v)
}

// GetUrl returns the Url field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IssuePullRequest) GetUrl() string {
	if o == nil || o.Url.Get() == nil {
		var ret string
		return ret
	}

	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssuePullRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// SetUrl sets field value
func (o *IssuePullRequest) SetUrl(v string) {
	o.Url.Set(&v)
}

func (o IssuePullRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MergedAt.IsSet() {
		toSerialize["merged_at"] = o.MergedAt.Get()
	}
	if true {
		toSerialize["diff_url"] = o.DiffUrl.Get()
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl.Get()
	}
	if true {
		toSerialize["patch_url"] = o.PatchUrl.Get()
	}
	if true {
		toSerialize["url"] = o.Url.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIssuePullRequest struct {
	value *IssuePullRequest
	isSet bool
}

func (v NullableIssuePullRequest) Get() *IssuePullRequest {
	return v.value
}

func (v *NullableIssuePullRequest) Set(val *IssuePullRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuePullRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuePullRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuePullRequest(val *IssuePullRequest) *NullableIssuePullRequest {
	return &NullableIssuePullRequest{value: val, isSet: true}
}

func (v NullableIssuePullRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuePullRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


