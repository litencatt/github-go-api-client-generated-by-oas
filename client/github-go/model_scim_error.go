/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ScimError Scim Error
type ScimError struct {
	Message NullableString `json:"message,omitempty"`
	DocumentationUrl NullableString `json:"documentation_url,omitempty"`
	Detail NullableString `json:"detail,omitempty"`
	Status *int32 `json:"status,omitempty"`
	ScimType NullableString `json:"scimType,omitempty"`
	Schemas []string `json:"schemas,omitempty"`
}

// NewScimError instantiates a new ScimError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScimError() *ScimError {
	this := ScimError{}
	return &this
}

// NewScimErrorWithDefaults instantiates a new ScimError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScimErrorWithDefaults() *ScimError {
	this := ScimError{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScimError) GetMessage() string {
	if o == nil || o.Message.Get() == nil {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScimError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *ScimError) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *ScimError) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *ScimError) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *ScimError) UnsetMessage() {
	o.Message.Unset()
}

// GetDocumentationUrl returns the DocumentationUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScimError) GetDocumentationUrl() string {
	if o == nil || o.DocumentationUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.DocumentationUrl.Get()
}

// GetDocumentationUrlOk returns a tuple with the DocumentationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScimError) GetDocumentationUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DocumentationUrl.Get(), o.DocumentationUrl.IsSet()
}

// HasDocumentationUrl returns a boolean if a field has been set.
func (o *ScimError) HasDocumentationUrl() bool {
	if o != nil && o.DocumentationUrl.IsSet() {
		return true
	}

	return false
}

// SetDocumentationUrl gets a reference to the given NullableString and assigns it to the DocumentationUrl field.
func (o *ScimError) SetDocumentationUrl(v string) {
	o.DocumentationUrl.Set(&v)
}
// SetDocumentationUrlNil sets the value for DocumentationUrl to be an explicit nil
func (o *ScimError) SetDocumentationUrlNil() {
	o.DocumentationUrl.Set(nil)
}

// UnsetDocumentationUrl ensures that no value is present for DocumentationUrl, not even an explicit nil
func (o *ScimError) UnsetDocumentationUrl() {
	o.DocumentationUrl.Unset()
}

// GetDetail returns the Detail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScimError) GetDetail() string {
	if o == nil || o.Detail.Get() == nil {
		var ret string
		return ret
	}
	return *o.Detail.Get()
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScimError) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Detail.Get(), o.Detail.IsSet()
}

// HasDetail returns a boolean if a field has been set.
func (o *ScimError) HasDetail() bool {
	if o != nil && o.Detail.IsSet() {
		return true
	}

	return false
}

// SetDetail gets a reference to the given NullableString and assigns it to the Detail field.
func (o *ScimError) SetDetail(v string) {
	o.Detail.Set(&v)
}
// SetDetailNil sets the value for Detail to be an explicit nil
func (o *ScimError) SetDetailNil() {
	o.Detail.Set(nil)
}

// UnsetDetail ensures that no value is present for Detail, not even an explicit nil
func (o *ScimError) UnsetDetail() {
	o.Detail.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ScimError) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimError) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ScimError) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *ScimError) SetStatus(v int32) {
	o.Status = &v
}

// GetScimType returns the ScimType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScimError) GetScimType() string {
	if o == nil || o.ScimType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ScimType.Get()
}

// GetScimTypeOk returns a tuple with the ScimType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScimError) GetScimTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScimType.Get(), o.ScimType.IsSet()
}

// HasScimType returns a boolean if a field has been set.
func (o *ScimError) HasScimType() bool {
	if o != nil && o.ScimType.IsSet() {
		return true
	}

	return false
}

// SetScimType gets a reference to the given NullableString and assigns it to the ScimType field.
func (o *ScimError) SetScimType(v string) {
	o.ScimType.Set(&v)
}
// SetScimTypeNil sets the value for ScimType to be an explicit nil
func (o *ScimError) SetScimTypeNil() {
	o.ScimType.Set(nil)
}

// UnsetScimType ensures that no value is present for ScimType, not even an explicit nil
func (o *ScimError) UnsetScimType() {
	o.ScimType.Unset()
}

// GetSchemas returns the Schemas field value if set, zero value otherwise.
func (o *ScimError) GetSchemas() []string {
	if o == nil || o.Schemas == nil {
		var ret []string
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimError) GetSchemasOk() ([]string, bool) {
	if o == nil || o.Schemas == nil {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *ScimError) HasSchemas() bool {
	if o != nil && o.Schemas != nil {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []string and assigns it to the Schemas field.
func (o *ScimError) SetSchemas(v []string) {
	o.Schemas = v
}

func (o ScimError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.DocumentationUrl.IsSet() {
		toSerialize["documentation_url"] = o.DocumentationUrl.Get()
	}
	if o.Detail.IsSet() {
		toSerialize["detail"] = o.Detail.Get()
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ScimType.IsSet() {
		toSerialize["scimType"] = o.ScimType.Get()
	}
	if o.Schemas != nil {
		toSerialize["schemas"] = o.Schemas
	}
	return json.Marshal(toSerialize)
}

type NullableScimError struct {
	value *ScimError
	isSet bool
}

func (v NullableScimError) Get() *ScimError {
	return v.value
}

func (v *NullableScimError) Set(val *ScimError) {
	v.value = val
	v.isSet = true
}

func (v NullableScimError) IsSet() bool {
	return v.isSet
}

func (v *NullableScimError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScimError(val *ScimError) *NullableScimError {
	return &NullableScimError{value: val, isSet: true}
}

func (v NullableScimError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScimError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


