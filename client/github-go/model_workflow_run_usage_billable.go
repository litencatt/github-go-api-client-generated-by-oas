/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// WorkflowRunUsageBillable struct for WorkflowRunUsageBillable
type WorkflowRunUsageBillable struct {
	UBUNTU *WorkflowRunUsageBillableUBUNTU `json:"UBUNTU,omitempty"`
	MACOS *WorkflowRunUsageBillableUBUNTU `json:"MACOS,omitempty"`
	WINDOWS *WorkflowRunUsageBillableUBUNTU `json:"WINDOWS,omitempty"`
}

// NewWorkflowRunUsageBillable instantiates a new WorkflowRunUsageBillable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowRunUsageBillable() *WorkflowRunUsageBillable {
	this := WorkflowRunUsageBillable{}
	return &this
}

// NewWorkflowRunUsageBillableWithDefaults instantiates a new WorkflowRunUsageBillable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowRunUsageBillableWithDefaults() *WorkflowRunUsageBillable {
	this := WorkflowRunUsageBillable{}
	return &this
}

// GetUBUNTU returns the UBUNTU field value if set, zero value otherwise.
func (o *WorkflowRunUsageBillable) GetUBUNTU() WorkflowRunUsageBillableUBUNTU {
	if o == nil || o.UBUNTU == nil {
		var ret WorkflowRunUsageBillableUBUNTU
		return ret
	}
	return *o.UBUNTU
}

// GetUBUNTUOk returns a tuple with the UBUNTU field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowRunUsageBillable) GetUBUNTUOk() (*WorkflowRunUsageBillableUBUNTU, bool) {
	if o == nil || o.UBUNTU == nil {
		return nil, false
	}
	return o.UBUNTU, true
}

// HasUBUNTU returns a boolean if a field has been set.
func (o *WorkflowRunUsageBillable) HasUBUNTU() bool {
	if o != nil && o.UBUNTU != nil {
		return true
	}

	return false
}

// SetUBUNTU gets a reference to the given WorkflowRunUsageBillableUBUNTU and assigns it to the UBUNTU field.
func (o *WorkflowRunUsageBillable) SetUBUNTU(v WorkflowRunUsageBillableUBUNTU) {
	o.UBUNTU = &v
}

// GetMACOS returns the MACOS field value if set, zero value otherwise.
func (o *WorkflowRunUsageBillable) GetMACOS() WorkflowRunUsageBillableUBUNTU {
	if o == nil || o.MACOS == nil {
		var ret WorkflowRunUsageBillableUBUNTU
		return ret
	}
	return *o.MACOS
}

// GetMACOSOk returns a tuple with the MACOS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowRunUsageBillable) GetMACOSOk() (*WorkflowRunUsageBillableUBUNTU, bool) {
	if o == nil || o.MACOS == nil {
		return nil, false
	}
	return o.MACOS, true
}

// HasMACOS returns a boolean if a field has been set.
func (o *WorkflowRunUsageBillable) HasMACOS() bool {
	if o != nil && o.MACOS != nil {
		return true
	}

	return false
}

// SetMACOS gets a reference to the given WorkflowRunUsageBillableUBUNTU and assigns it to the MACOS field.
func (o *WorkflowRunUsageBillable) SetMACOS(v WorkflowRunUsageBillableUBUNTU) {
	o.MACOS = &v
}

// GetWINDOWS returns the WINDOWS field value if set, zero value otherwise.
func (o *WorkflowRunUsageBillable) GetWINDOWS() WorkflowRunUsageBillableUBUNTU {
	if o == nil || o.WINDOWS == nil {
		var ret WorkflowRunUsageBillableUBUNTU
		return ret
	}
	return *o.WINDOWS
}

// GetWINDOWSOk returns a tuple with the WINDOWS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowRunUsageBillable) GetWINDOWSOk() (*WorkflowRunUsageBillableUBUNTU, bool) {
	if o == nil || o.WINDOWS == nil {
		return nil, false
	}
	return o.WINDOWS, true
}

// HasWINDOWS returns a boolean if a field has been set.
func (o *WorkflowRunUsageBillable) HasWINDOWS() bool {
	if o != nil && o.WINDOWS != nil {
		return true
	}

	return false
}

// SetWINDOWS gets a reference to the given WorkflowRunUsageBillableUBUNTU and assigns it to the WINDOWS field.
func (o *WorkflowRunUsageBillable) SetWINDOWS(v WorkflowRunUsageBillableUBUNTU) {
	o.WINDOWS = &v
}

func (o WorkflowRunUsageBillable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UBUNTU != nil {
		toSerialize["UBUNTU"] = o.UBUNTU
	}
	if o.MACOS != nil {
		toSerialize["MACOS"] = o.MACOS
	}
	if o.WINDOWS != nil {
		toSerialize["WINDOWS"] = o.WINDOWS
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowRunUsageBillable struct {
	value *WorkflowRunUsageBillable
	isSet bool
}

func (v NullableWorkflowRunUsageBillable) Get() *WorkflowRunUsageBillable {
	return v.value
}

func (v *NullableWorkflowRunUsageBillable) Set(val *WorkflowRunUsageBillable) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowRunUsageBillable) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowRunUsageBillable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowRunUsageBillable(val *WorkflowRunUsageBillable) *NullableWorkflowRunUsageBillable {
	return &NullableWorkflowRunUsageBillable{value: val, isSet: true}
}

func (v NullableWorkflowRunUsageBillable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowRunUsageBillable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


