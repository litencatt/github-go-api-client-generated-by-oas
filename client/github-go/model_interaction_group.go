/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// InteractionGroup The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
type InteractionGroup string

// List of interaction-group
const (
	EXISTING_USERS InteractionGroup = "existing_users"
	CONTRIBUTORS_ONLY InteractionGroup = "contributors_only"
	COLLABORATORS_ONLY InteractionGroup = "collaborators_only"
)

// All allowed values of InteractionGroup enum
var AllowedInteractionGroupEnumValues = []InteractionGroup{
	"existing_users",
	"contributors_only",
	"collaborators_only",
}

func (v *InteractionGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InteractionGroup(value)
	for _, existing := range AllowedInteractionGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InteractionGroup", value)
}

// NewInteractionGroupFromValue returns a pointer to a valid InteractionGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInteractionGroupFromValue(v string) (*InteractionGroup, error) {
	ev := InteractionGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InteractionGroup: valid values are %v", v, AllowedInteractionGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InteractionGroup) IsValid() bool {
	for _, existing := range AllowedInteractionGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to interaction-group value
func (v InteractionGroup) Ptr() *InteractionGroup {
	return &v
}

type NullableInteractionGroup struct {
	value *InteractionGroup
	isSet bool
}

func (v NullableInteractionGroup) Get() *InteractionGroup {
	return v.value
}

func (v *NullableInteractionGroup) Set(val *InteractionGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableInteractionGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableInteractionGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInteractionGroup(val *InteractionGroup) *NullableInteractionGroup {
	return &NullableInteractionGroup{value: val, isSet: true}
}

func (v NullableInteractionGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInteractionGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

