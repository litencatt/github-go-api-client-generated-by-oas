/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// Stargazer Stargazer
type Stargazer struct {
	StarredAt time.Time `json:"starred_at"`
	User NullableNullableSimpleUser `json:"user"`
}

// NewStargazer instantiates a new Stargazer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStargazer(starredAt time.Time, user NullableNullableSimpleUser) *Stargazer {
	this := Stargazer{}
	this.StarredAt = starredAt
	this.User = user
	return &this
}

// NewStargazerWithDefaults instantiates a new Stargazer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStargazerWithDefaults() *Stargazer {
	this := Stargazer{}
	return &this
}

// GetStarredAt returns the StarredAt field value
func (o *Stargazer) GetStarredAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StarredAt
}

// GetStarredAtOk returns a tuple with the StarredAt field value
// and a boolean to check if the value has been set.
func (o *Stargazer) GetStarredAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StarredAt, true
}

// SetStarredAt sets field value
func (o *Stargazer) SetStarredAt(v time.Time) {
	o.StarredAt = v
}

// GetUser returns the User field value
// If the value is explicit nil, the zero value for NullableSimpleUser will be returned
func (o *Stargazer) GetUser() NullableSimpleUser {
	if o == nil || o.User.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}

	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Stargazer) GetUserOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// SetUser sets field value
func (o *Stargazer) SetUser(v NullableSimpleUser) {
	o.User.Set(&v)
}

func (o Stargazer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["starred_at"] = o.StarredAt
	}
	if true {
		toSerialize["user"] = o.User.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableStargazer struct {
	value *Stargazer
	isSet bool
}

func (v NullableStargazer) Get() *Stargazer {
	return v.value
}

func (v *NullableStargazer) Set(val *Stargazer) {
	v.value = val
	v.isSet = true
}

func (v NullableStargazer) IsSet() bool {
	return v.isSet
}

func (v *NullableStargazer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStargazer(val *Stargazer) *NullableStargazer {
	return &NullableStargazer{value: val, isSet: true}
}

func (v NullableStargazer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStargazer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


