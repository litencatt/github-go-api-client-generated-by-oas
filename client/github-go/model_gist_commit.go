/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// GistCommit Gist Commit
type GistCommit struct {
	Url string `json:"url"`
	Version string `json:"version"`
	User NullableNullableSimpleUser `json:"user"`
	ChangeStatus GistHistoryChangeStatus `json:"change_status"`
	CommittedAt time.Time `json:"committed_at"`
}

// NewGistCommit instantiates a new GistCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGistCommit(url string, version string, user NullableNullableSimpleUser, changeStatus GistHistoryChangeStatus, committedAt time.Time) *GistCommit {
	this := GistCommit{}
	this.Url = url
	this.Version = version
	this.User = user
	this.ChangeStatus = changeStatus
	this.CommittedAt = committedAt
	return &this
}

// NewGistCommitWithDefaults instantiates a new GistCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGistCommitWithDefaults() *GistCommit {
	this := GistCommit{}
	return &this
}

// GetUrl returns the Url field value
func (o *GistCommit) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *GistCommit) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *GistCommit) SetUrl(v string) {
	o.Url = v
}

// GetVersion returns the Version field value
func (o *GistCommit) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *GistCommit) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *GistCommit) SetVersion(v string) {
	o.Version = v
}

// GetUser returns the User field value
// If the value is explicit nil, the zero value for NullableSimpleUser will be returned
func (o *GistCommit) GetUser() NullableSimpleUser {
	if o == nil || o.User.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}

	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GistCommit) GetUserOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// SetUser sets field value
func (o *GistCommit) SetUser(v NullableSimpleUser) {
	o.User.Set(&v)
}

// GetChangeStatus returns the ChangeStatus field value
func (o *GistCommit) GetChangeStatus() GistHistoryChangeStatus {
	if o == nil {
		var ret GistHistoryChangeStatus
		return ret
	}

	return o.ChangeStatus
}

// GetChangeStatusOk returns a tuple with the ChangeStatus field value
// and a boolean to check if the value has been set.
func (o *GistCommit) GetChangeStatusOk() (*GistHistoryChangeStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeStatus, true
}

// SetChangeStatus sets field value
func (o *GistCommit) SetChangeStatus(v GistHistoryChangeStatus) {
	o.ChangeStatus = v
}

// GetCommittedAt returns the CommittedAt field value
func (o *GistCommit) GetCommittedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CommittedAt
}

// GetCommittedAtOk returns a tuple with the CommittedAt field value
// and a boolean to check if the value has been set.
func (o *GistCommit) GetCommittedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommittedAt, true
}

// SetCommittedAt sets field value
func (o *GistCommit) SetCommittedAt(v time.Time) {
	o.CommittedAt = v
}

func (o GistCommit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["user"] = o.User.Get()
	}
	if true {
		toSerialize["change_status"] = o.ChangeStatus
	}
	if true {
		toSerialize["committed_at"] = o.CommittedAt
	}
	return json.Marshal(toSerialize)
}

type NullableGistCommit struct {
	value *GistCommit
	isSet bool
}

func (v NullableGistCommit) Get() *GistCommit {
	return v.value
}

func (v *NullableGistCommit) Set(val *GistCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableGistCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableGistCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGistCommit(val *GistCommit) *NullableGistCommit {
	return &NullableGistCommit{value: val, isSet: true}
}

func (v NullableGistCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGistCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


