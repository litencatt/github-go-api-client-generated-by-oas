/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// CommitSearchResultItem Commit Search Result Item
type CommitSearchResultItem struct {
	Url string `json:"url"`
	Sha string `json:"sha"`
	HtmlUrl string `json:"html_url"`
	CommentsUrl string `json:"comments_url"`
	Commit CommitSearchResultItemCommit `json:"commit"`
	Author NullableNullableSimpleUser `json:"author"`
	Committer NullableNullableGitUser `json:"committer"`
	Parents []FileCommitCommitParentsInner `json:"parents"`
	Repository MinimalRepository `json:"repository"`
	Score float32 `json:"score"`
	NodeId string `json:"node_id"`
	TextMatches []SearchResultTextMatchesInner `json:"text_matches,omitempty"`
}

// NewCommitSearchResultItem instantiates a new CommitSearchResultItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitSearchResultItem(url string, sha string, htmlUrl string, commentsUrl string, commit CommitSearchResultItemCommit, author NullableNullableSimpleUser, committer NullableNullableGitUser, parents []FileCommitCommitParentsInner, repository MinimalRepository, score float32, nodeId string) *CommitSearchResultItem {
	this := CommitSearchResultItem{}
	this.Url = url
	this.Sha = sha
	this.HtmlUrl = htmlUrl
	this.CommentsUrl = commentsUrl
	this.Commit = commit
	this.Author = author
	this.Committer = committer
	this.Parents = parents
	this.Repository = repository
	this.Score = score
	this.NodeId = nodeId
	return &this
}

// NewCommitSearchResultItemWithDefaults instantiates a new CommitSearchResultItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitSearchResultItemWithDefaults() *CommitSearchResultItem {
	this := CommitSearchResultItem{}
	return &this
}

// GetUrl returns the Url field value
func (o *CommitSearchResultItem) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItem) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CommitSearchResultItem) SetUrl(v string) {
	o.Url = v
}

// GetSha returns the Sha field value
func (o *CommitSearchResultItem) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItem) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *CommitSearchResultItem) SetSha(v string) {
	o.Sha = v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *CommitSearchResultItem) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItem) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *CommitSearchResultItem) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetCommentsUrl returns the CommentsUrl field value
func (o *CommitSearchResultItem) GetCommentsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommentsUrl
}

// GetCommentsUrlOk returns a tuple with the CommentsUrl field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItem) GetCommentsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommentsUrl, true
}

// SetCommentsUrl sets field value
func (o *CommitSearchResultItem) SetCommentsUrl(v string) {
	o.CommentsUrl = v
}

// GetCommit returns the Commit field value
func (o *CommitSearchResultItem) GetCommit() CommitSearchResultItemCommit {
	if o == nil {
		var ret CommitSearchResultItemCommit
		return ret
	}

	return o.Commit
}

// GetCommitOk returns a tuple with the Commit field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItem) GetCommitOk() (*CommitSearchResultItemCommit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Commit, true
}

// SetCommit sets field value
func (o *CommitSearchResultItem) SetCommit(v CommitSearchResultItemCommit) {
	o.Commit = v
}

// GetAuthor returns the Author field value
// If the value is explicit nil, the zero value for NullableSimpleUser will be returned
func (o *CommitSearchResultItem) GetAuthor() NullableSimpleUser {
	if o == nil || o.Author.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}

	return *o.Author.Get()
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommitSearchResultItem) GetAuthorOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Author.Get(), o.Author.IsSet()
}

// SetAuthor sets field value
func (o *CommitSearchResultItem) SetAuthor(v NullableSimpleUser) {
	o.Author.Set(&v)
}

// GetCommitter returns the Committer field value
// If the value is explicit nil, the zero value for NullableGitUser will be returned
func (o *CommitSearchResultItem) GetCommitter() NullableGitUser {
	if o == nil || o.Committer.Get() == nil {
		var ret NullableGitUser
		return ret
	}

	return *o.Committer.Get()
}

// GetCommitterOk returns a tuple with the Committer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommitSearchResultItem) GetCommitterOk() (*NullableGitUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Committer.Get(), o.Committer.IsSet()
}

// SetCommitter sets field value
func (o *CommitSearchResultItem) SetCommitter(v NullableGitUser) {
	o.Committer.Set(&v)
}

// GetParents returns the Parents field value
func (o *CommitSearchResultItem) GetParents() []FileCommitCommitParentsInner {
	if o == nil {
		var ret []FileCommitCommitParentsInner
		return ret
	}

	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItem) GetParentsOk() ([]FileCommitCommitParentsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parents, true
}

// SetParents sets field value
func (o *CommitSearchResultItem) SetParents(v []FileCommitCommitParentsInner) {
	o.Parents = v
}

// GetRepository returns the Repository field value
func (o *CommitSearchResultItem) GetRepository() MinimalRepository {
	if o == nil {
		var ret MinimalRepository
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItem) GetRepositoryOk() (*MinimalRepository, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *CommitSearchResultItem) SetRepository(v MinimalRepository) {
	o.Repository = v
}

// GetScore returns the Score field value
func (o *CommitSearchResultItem) GetScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItem) GetScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *CommitSearchResultItem) SetScore(v float32) {
	o.Score = v
}

// GetNodeId returns the NodeId field value
func (o *CommitSearchResultItem) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItem) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *CommitSearchResultItem) SetNodeId(v string) {
	o.NodeId = v
}

// GetTextMatches returns the TextMatches field value if set, zero value otherwise.
func (o *CommitSearchResultItem) GetTextMatches() []SearchResultTextMatchesInner {
	if o == nil || o.TextMatches == nil {
		var ret []SearchResultTextMatchesInner
		return ret
	}
	return o.TextMatches
}

// GetTextMatchesOk returns a tuple with the TextMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitSearchResultItem) GetTextMatchesOk() ([]SearchResultTextMatchesInner, bool) {
	if o == nil || o.TextMatches == nil {
		return nil, false
	}
	return o.TextMatches, true
}

// HasTextMatches returns a boolean if a field has been set.
func (o *CommitSearchResultItem) HasTextMatches() bool {
	if o != nil && o.TextMatches != nil {
		return true
	}

	return false
}

// SetTextMatches gets a reference to the given []SearchResultTextMatchesInner and assigns it to the TextMatches field.
func (o *CommitSearchResultItem) SetTextMatches(v []SearchResultTextMatchesInner) {
	o.TextMatches = v
}

func (o CommitSearchResultItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["sha"] = o.Sha
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if true {
		toSerialize["comments_url"] = o.CommentsUrl
	}
	if true {
		toSerialize["commit"] = o.Commit
	}
	if true {
		toSerialize["author"] = o.Author.Get()
	}
	if true {
		toSerialize["committer"] = o.Committer.Get()
	}
	if true {
		toSerialize["parents"] = o.Parents
	}
	if true {
		toSerialize["repository"] = o.Repository
	}
	if true {
		toSerialize["score"] = o.Score
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if o.TextMatches != nil {
		toSerialize["text_matches"] = o.TextMatches
	}
	return json.Marshal(toSerialize)
}

type NullableCommitSearchResultItem struct {
	value *CommitSearchResultItem
	isSet bool
}

func (v NullableCommitSearchResultItem) Get() *CommitSearchResultItem {
	return v.value
}

func (v *NullableCommitSearchResultItem) Set(val *CommitSearchResultItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitSearchResultItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitSearchResultItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitSearchResultItem(val *CommitSearchResultItem) *NullableCommitSearchResultItem {
	return &NullableCommitSearchResultItem{value: val, isSet: true}
}

func (v NullableCommitSearchResultItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitSearchResultItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


