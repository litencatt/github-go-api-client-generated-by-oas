/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// SecretScanningAlertState Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
type SecretScanningAlertState string

// List of secret-scanning-alert-state
const (
	OPEN SecretScanningAlertState = "open"
	RESOLVED SecretScanningAlertState = "resolved"
)

// All allowed values of SecretScanningAlertState enum
var AllowedSecretScanningAlertStateEnumValues = []SecretScanningAlertState{
	"open",
	"resolved",
}

func (v *SecretScanningAlertState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecretScanningAlertState(value)
	for _, existing := range AllowedSecretScanningAlertStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecretScanningAlertState", value)
}

// NewSecretScanningAlertStateFromValue returns a pointer to a valid SecretScanningAlertState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecretScanningAlertStateFromValue(v string) (*SecretScanningAlertState, error) {
	ev := SecretScanningAlertState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SecretScanningAlertState: valid values are %v", v, AllowedSecretScanningAlertStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecretScanningAlertState) IsValid() bool {
	for _, existing := range AllowedSecretScanningAlertStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to secret-scanning-alert-state value
func (v SecretScanningAlertState) Ptr() *SecretScanningAlertState {
	return &v
}

type NullableSecretScanningAlertState struct {
	value *SecretScanningAlertState
	isSet bool
}

func (v NullableSecretScanningAlertState) Get() *SecretScanningAlertState {
	return v.value
}

func (v *NullableSecretScanningAlertState) Set(val *SecretScanningAlertState) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretScanningAlertState) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretScanningAlertState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretScanningAlertState(val *SecretScanningAlertState) *NullableSecretScanningAlertState {
	return &NullableSecretScanningAlertState{value: val, isSet: true}
}

func (v NullableSecretScanningAlertState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretScanningAlertState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

