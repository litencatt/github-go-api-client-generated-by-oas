/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// FileCommitCommitVerification struct for FileCommitCommitVerification
type FileCommitCommitVerification struct {
	Verified *bool `json:"verified,omitempty"`
	Reason *string `json:"reason,omitempty"`
	Signature NullableString `json:"signature,omitempty"`
	Payload NullableString `json:"payload,omitempty"`
}

// NewFileCommitCommitVerification instantiates a new FileCommitCommitVerification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileCommitCommitVerification() *FileCommitCommitVerification {
	this := FileCommitCommitVerification{}
	return &this
}

// NewFileCommitCommitVerificationWithDefaults instantiates a new FileCommitCommitVerification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileCommitCommitVerificationWithDefaults() *FileCommitCommitVerification {
	this := FileCommitCommitVerification{}
	return &this
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *FileCommitCommitVerification) GetVerified() bool {
	if o == nil || o.Verified == nil {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileCommitCommitVerification) GetVerifiedOk() (*bool, bool) {
	if o == nil || o.Verified == nil {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *FileCommitCommitVerification) HasVerified() bool {
	if o != nil && o.Verified != nil {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *FileCommitCommitVerification) SetVerified(v bool) {
	o.Verified = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *FileCommitCommitVerification) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileCommitCommitVerification) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *FileCommitCommitVerification) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *FileCommitCommitVerification) SetReason(v string) {
	o.Reason = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileCommitCommitVerification) GetSignature() string {
	if o == nil || o.Signature.Get() == nil {
		var ret string
		return ret
	}
	return *o.Signature.Get()
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileCommitCommitVerification) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signature.Get(), o.Signature.IsSet()
}

// HasSignature returns a boolean if a field has been set.
func (o *FileCommitCommitVerification) HasSignature() bool {
	if o != nil && o.Signature.IsSet() {
		return true
	}

	return false
}

// SetSignature gets a reference to the given NullableString and assigns it to the Signature field.
func (o *FileCommitCommitVerification) SetSignature(v string) {
	o.Signature.Set(&v)
}
// SetSignatureNil sets the value for Signature to be an explicit nil
func (o *FileCommitCommitVerification) SetSignatureNil() {
	o.Signature.Set(nil)
}

// UnsetSignature ensures that no value is present for Signature, not even an explicit nil
func (o *FileCommitCommitVerification) UnsetSignature() {
	o.Signature.Unset()
}

// GetPayload returns the Payload field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileCommitCommitVerification) GetPayload() string {
	if o == nil || o.Payload.Get() == nil {
		var ret string
		return ret
	}
	return *o.Payload.Get()
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileCommitCommitVerification) GetPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Payload.Get(), o.Payload.IsSet()
}

// HasPayload returns a boolean if a field has been set.
func (o *FileCommitCommitVerification) HasPayload() bool {
	if o != nil && o.Payload.IsSet() {
		return true
	}

	return false
}

// SetPayload gets a reference to the given NullableString and assigns it to the Payload field.
func (o *FileCommitCommitVerification) SetPayload(v string) {
	o.Payload.Set(&v)
}
// SetPayloadNil sets the value for Payload to be an explicit nil
func (o *FileCommitCommitVerification) SetPayloadNil() {
	o.Payload.Set(nil)
}

// UnsetPayload ensures that no value is present for Payload, not even an explicit nil
func (o *FileCommitCommitVerification) UnsetPayload() {
	o.Payload.Unset()
}

func (o FileCommitCommitVerification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Verified != nil {
		toSerialize["verified"] = o.Verified
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Signature.IsSet() {
		toSerialize["signature"] = o.Signature.Get()
	}
	if o.Payload.IsSet() {
		toSerialize["payload"] = o.Payload.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFileCommitCommitVerification struct {
	value *FileCommitCommitVerification
	isSet bool
}

func (v NullableFileCommitCommitVerification) Get() *FileCommitCommitVerification {
	return v.value
}

func (v *NullableFileCommitCommitVerification) Set(val *FileCommitCommitVerification) {
	v.value = val
	v.isSet = true
}

func (v NullableFileCommitCommitVerification) IsSet() bool {
	return v.isSet
}

func (v *NullableFileCommitCommitVerification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileCommitCommitVerification(val *FileCommitCommitVerification) *NullableFileCommitCommitVerification {
	return &NullableFileCommitCommitVerification{value: val, isSet: true}
}

func (v NullableFileCommitCommitVerification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileCommitCommitVerification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


