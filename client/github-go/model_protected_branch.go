/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ProtectedBranch Branch protections protect branches
type ProtectedBranch struct {
	Url string `json:"url"`
	RequiredStatusChecks *StatusCheckPolicy `json:"required_status_checks,omitempty"`
	RequiredPullRequestReviews *ProtectedBranchRequiredPullRequestReviews `json:"required_pull_request_reviews,omitempty"`
	RequiredSignatures *BranchProtectionRequiredSignatures `json:"required_signatures,omitempty"`
	EnforceAdmins *ProtectedBranchEnforceAdmins `json:"enforce_admins,omitempty"`
	RequiredLinearHistory *ProtectedBranchRequiredLinearHistory `json:"required_linear_history,omitempty"`
	AllowForcePushes *ProtectedBranchRequiredLinearHistory `json:"allow_force_pushes,omitempty"`
	AllowDeletions *ProtectedBranchRequiredLinearHistory `json:"allow_deletions,omitempty"`
	Restrictions *BranchRestrictionPolicy `json:"restrictions,omitempty"`
	RequiredConversationResolution *ProtectedBranchRequiredConversationResolution `json:"required_conversation_resolution,omitempty"`
	BlockCreations *ProtectedBranchRequiredLinearHistory `json:"block_creations,omitempty"`
}

// NewProtectedBranch instantiates a new ProtectedBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectedBranch(url string) *ProtectedBranch {
	this := ProtectedBranch{}
	this.Url = url
	return &this
}

// NewProtectedBranchWithDefaults instantiates a new ProtectedBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectedBranchWithDefaults() *ProtectedBranch {
	this := ProtectedBranch{}
	return &this
}

// GetUrl returns the Url field value
func (o *ProtectedBranch) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ProtectedBranch) SetUrl(v string) {
	o.Url = v
}

// GetRequiredStatusChecks returns the RequiredStatusChecks field value if set, zero value otherwise.
func (o *ProtectedBranch) GetRequiredStatusChecks() StatusCheckPolicy {
	if o == nil || o.RequiredStatusChecks == nil {
		var ret StatusCheckPolicy
		return ret
	}
	return *o.RequiredStatusChecks
}

// GetRequiredStatusChecksOk returns a tuple with the RequiredStatusChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetRequiredStatusChecksOk() (*StatusCheckPolicy, bool) {
	if o == nil || o.RequiredStatusChecks == nil {
		return nil, false
	}
	return o.RequiredStatusChecks, true
}

// HasRequiredStatusChecks returns a boolean if a field has been set.
func (o *ProtectedBranch) HasRequiredStatusChecks() bool {
	if o != nil && o.RequiredStatusChecks != nil {
		return true
	}

	return false
}

// SetRequiredStatusChecks gets a reference to the given StatusCheckPolicy and assigns it to the RequiredStatusChecks field.
func (o *ProtectedBranch) SetRequiredStatusChecks(v StatusCheckPolicy) {
	o.RequiredStatusChecks = &v
}

// GetRequiredPullRequestReviews returns the RequiredPullRequestReviews field value if set, zero value otherwise.
func (o *ProtectedBranch) GetRequiredPullRequestReviews() ProtectedBranchRequiredPullRequestReviews {
	if o == nil || o.RequiredPullRequestReviews == nil {
		var ret ProtectedBranchRequiredPullRequestReviews
		return ret
	}
	return *o.RequiredPullRequestReviews
}

// GetRequiredPullRequestReviewsOk returns a tuple with the RequiredPullRequestReviews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetRequiredPullRequestReviewsOk() (*ProtectedBranchRequiredPullRequestReviews, bool) {
	if o == nil || o.RequiredPullRequestReviews == nil {
		return nil, false
	}
	return o.RequiredPullRequestReviews, true
}

// HasRequiredPullRequestReviews returns a boolean if a field has been set.
func (o *ProtectedBranch) HasRequiredPullRequestReviews() bool {
	if o != nil && o.RequiredPullRequestReviews != nil {
		return true
	}

	return false
}

// SetRequiredPullRequestReviews gets a reference to the given ProtectedBranchRequiredPullRequestReviews and assigns it to the RequiredPullRequestReviews field.
func (o *ProtectedBranch) SetRequiredPullRequestReviews(v ProtectedBranchRequiredPullRequestReviews) {
	o.RequiredPullRequestReviews = &v
}

// GetRequiredSignatures returns the RequiredSignatures field value if set, zero value otherwise.
func (o *ProtectedBranch) GetRequiredSignatures() BranchProtectionRequiredSignatures {
	if o == nil || o.RequiredSignatures == nil {
		var ret BranchProtectionRequiredSignatures
		return ret
	}
	return *o.RequiredSignatures
}

// GetRequiredSignaturesOk returns a tuple with the RequiredSignatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetRequiredSignaturesOk() (*BranchProtectionRequiredSignatures, bool) {
	if o == nil || o.RequiredSignatures == nil {
		return nil, false
	}
	return o.RequiredSignatures, true
}

// HasRequiredSignatures returns a boolean if a field has been set.
func (o *ProtectedBranch) HasRequiredSignatures() bool {
	if o != nil && o.RequiredSignatures != nil {
		return true
	}

	return false
}

// SetRequiredSignatures gets a reference to the given BranchProtectionRequiredSignatures and assigns it to the RequiredSignatures field.
func (o *ProtectedBranch) SetRequiredSignatures(v BranchProtectionRequiredSignatures) {
	o.RequiredSignatures = &v
}

// GetEnforceAdmins returns the EnforceAdmins field value if set, zero value otherwise.
func (o *ProtectedBranch) GetEnforceAdmins() ProtectedBranchEnforceAdmins {
	if o == nil || o.EnforceAdmins == nil {
		var ret ProtectedBranchEnforceAdmins
		return ret
	}
	return *o.EnforceAdmins
}

// GetEnforceAdminsOk returns a tuple with the EnforceAdmins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetEnforceAdminsOk() (*ProtectedBranchEnforceAdmins, bool) {
	if o == nil || o.EnforceAdmins == nil {
		return nil, false
	}
	return o.EnforceAdmins, true
}

// HasEnforceAdmins returns a boolean if a field has been set.
func (o *ProtectedBranch) HasEnforceAdmins() bool {
	if o != nil && o.EnforceAdmins != nil {
		return true
	}

	return false
}

// SetEnforceAdmins gets a reference to the given ProtectedBranchEnforceAdmins and assigns it to the EnforceAdmins field.
func (o *ProtectedBranch) SetEnforceAdmins(v ProtectedBranchEnforceAdmins) {
	o.EnforceAdmins = &v
}

// GetRequiredLinearHistory returns the RequiredLinearHistory field value if set, zero value otherwise.
func (o *ProtectedBranch) GetRequiredLinearHistory() ProtectedBranchRequiredLinearHistory {
	if o == nil || o.RequiredLinearHistory == nil {
		var ret ProtectedBranchRequiredLinearHistory
		return ret
	}
	return *o.RequiredLinearHistory
}

// GetRequiredLinearHistoryOk returns a tuple with the RequiredLinearHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetRequiredLinearHistoryOk() (*ProtectedBranchRequiredLinearHistory, bool) {
	if o == nil || o.RequiredLinearHistory == nil {
		return nil, false
	}
	return o.RequiredLinearHistory, true
}

// HasRequiredLinearHistory returns a boolean if a field has been set.
func (o *ProtectedBranch) HasRequiredLinearHistory() bool {
	if o != nil && o.RequiredLinearHistory != nil {
		return true
	}

	return false
}

// SetRequiredLinearHistory gets a reference to the given ProtectedBranchRequiredLinearHistory and assigns it to the RequiredLinearHistory field.
func (o *ProtectedBranch) SetRequiredLinearHistory(v ProtectedBranchRequiredLinearHistory) {
	o.RequiredLinearHistory = &v
}

// GetAllowForcePushes returns the AllowForcePushes field value if set, zero value otherwise.
func (o *ProtectedBranch) GetAllowForcePushes() ProtectedBranchRequiredLinearHistory {
	if o == nil || o.AllowForcePushes == nil {
		var ret ProtectedBranchRequiredLinearHistory
		return ret
	}
	return *o.AllowForcePushes
}

// GetAllowForcePushesOk returns a tuple with the AllowForcePushes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetAllowForcePushesOk() (*ProtectedBranchRequiredLinearHistory, bool) {
	if o == nil || o.AllowForcePushes == nil {
		return nil, false
	}
	return o.AllowForcePushes, true
}

// HasAllowForcePushes returns a boolean if a field has been set.
func (o *ProtectedBranch) HasAllowForcePushes() bool {
	if o != nil && o.AllowForcePushes != nil {
		return true
	}

	return false
}

// SetAllowForcePushes gets a reference to the given ProtectedBranchRequiredLinearHistory and assigns it to the AllowForcePushes field.
func (o *ProtectedBranch) SetAllowForcePushes(v ProtectedBranchRequiredLinearHistory) {
	o.AllowForcePushes = &v
}

// GetAllowDeletions returns the AllowDeletions field value if set, zero value otherwise.
func (o *ProtectedBranch) GetAllowDeletions() ProtectedBranchRequiredLinearHistory {
	if o == nil || o.AllowDeletions == nil {
		var ret ProtectedBranchRequiredLinearHistory
		return ret
	}
	return *o.AllowDeletions
}

// GetAllowDeletionsOk returns a tuple with the AllowDeletions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetAllowDeletionsOk() (*ProtectedBranchRequiredLinearHistory, bool) {
	if o == nil || o.AllowDeletions == nil {
		return nil, false
	}
	return o.AllowDeletions, true
}

// HasAllowDeletions returns a boolean if a field has been set.
func (o *ProtectedBranch) HasAllowDeletions() bool {
	if o != nil && o.AllowDeletions != nil {
		return true
	}

	return false
}

// SetAllowDeletions gets a reference to the given ProtectedBranchRequiredLinearHistory and assigns it to the AllowDeletions field.
func (o *ProtectedBranch) SetAllowDeletions(v ProtectedBranchRequiredLinearHistory) {
	o.AllowDeletions = &v
}

// GetRestrictions returns the Restrictions field value if set, zero value otherwise.
func (o *ProtectedBranch) GetRestrictions() BranchRestrictionPolicy {
	if o == nil || o.Restrictions == nil {
		var ret BranchRestrictionPolicy
		return ret
	}
	return *o.Restrictions
}

// GetRestrictionsOk returns a tuple with the Restrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetRestrictionsOk() (*BranchRestrictionPolicy, bool) {
	if o == nil || o.Restrictions == nil {
		return nil, false
	}
	return o.Restrictions, true
}

// HasRestrictions returns a boolean if a field has been set.
func (o *ProtectedBranch) HasRestrictions() bool {
	if o != nil && o.Restrictions != nil {
		return true
	}

	return false
}

// SetRestrictions gets a reference to the given BranchRestrictionPolicy and assigns it to the Restrictions field.
func (o *ProtectedBranch) SetRestrictions(v BranchRestrictionPolicy) {
	o.Restrictions = &v
}

// GetRequiredConversationResolution returns the RequiredConversationResolution field value if set, zero value otherwise.
func (o *ProtectedBranch) GetRequiredConversationResolution() ProtectedBranchRequiredConversationResolution {
	if o == nil || o.RequiredConversationResolution == nil {
		var ret ProtectedBranchRequiredConversationResolution
		return ret
	}
	return *o.RequiredConversationResolution
}

// GetRequiredConversationResolutionOk returns a tuple with the RequiredConversationResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetRequiredConversationResolutionOk() (*ProtectedBranchRequiredConversationResolution, bool) {
	if o == nil || o.RequiredConversationResolution == nil {
		return nil, false
	}
	return o.RequiredConversationResolution, true
}

// HasRequiredConversationResolution returns a boolean if a field has been set.
func (o *ProtectedBranch) HasRequiredConversationResolution() bool {
	if o != nil && o.RequiredConversationResolution != nil {
		return true
	}

	return false
}

// SetRequiredConversationResolution gets a reference to the given ProtectedBranchRequiredConversationResolution and assigns it to the RequiredConversationResolution field.
func (o *ProtectedBranch) SetRequiredConversationResolution(v ProtectedBranchRequiredConversationResolution) {
	o.RequiredConversationResolution = &v
}

// GetBlockCreations returns the BlockCreations field value if set, zero value otherwise.
func (o *ProtectedBranch) GetBlockCreations() ProtectedBranchRequiredLinearHistory {
	if o == nil || o.BlockCreations == nil {
		var ret ProtectedBranchRequiredLinearHistory
		return ret
	}
	return *o.BlockCreations
}

// GetBlockCreationsOk returns a tuple with the BlockCreations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedBranch) GetBlockCreationsOk() (*ProtectedBranchRequiredLinearHistory, bool) {
	if o == nil || o.BlockCreations == nil {
		return nil, false
	}
	return o.BlockCreations, true
}

// HasBlockCreations returns a boolean if a field has been set.
func (o *ProtectedBranch) HasBlockCreations() bool {
	if o != nil && o.BlockCreations != nil {
		return true
	}

	return false
}

// SetBlockCreations gets a reference to the given ProtectedBranchRequiredLinearHistory and assigns it to the BlockCreations field.
func (o *ProtectedBranch) SetBlockCreations(v ProtectedBranchRequiredLinearHistory) {
	o.BlockCreations = &v
}

func (o ProtectedBranch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if o.RequiredStatusChecks != nil {
		toSerialize["required_status_checks"] = o.RequiredStatusChecks
	}
	if o.RequiredPullRequestReviews != nil {
		toSerialize["required_pull_request_reviews"] = o.RequiredPullRequestReviews
	}
	if o.RequiredSignatures != nil {
		toSerialize["required_signatures"] = o.RequiredSignatures
	}
	if o.EnforceAdmins != nil {
		toSerialize["enforce_admins"] = o.EnforceAdmins
	}
	if o.RequiredLinearHistory != nil {
		toSerialize["required_linear_history"] = o.RequiredLinearHistory
	}
	if o.AllowForcePushes != nil {
		toSerialize["allow_force_pushes"] = o.AllowForcePushes
	}
	if o.AllowDeletions != nil {
		toSerialize["allow_deletions"] = o.AllowDeletions
	}
	if o.Restrictions != nil {
		toSerialize["restrictions"] = o.Restrictions
	}
	if o.RequiredConversationResolution != nil {
		toSerialize["required_conversation_resolution"] = o.RequiredConversationResolution
	}
	if o.BlockCreations != nil {
		toSerialize["block_creations"] = o.BlockCreations
	}
	return json.Marshal(toSerialize)
}

type NullableProtectedBranch struct {
	value *ProtectedBranch
	isSet bool
}

func (v NullableProtectedBranch) Get() *ProtectedBranch {
	return v.value
}

func (v *NullableProtectedBranch) Set(val *ProtectedBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectedBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectedBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectedBranch(val *ProtectedBranch) *NullableProtectedBranch {
	return &NullableProtectedBranch{value: val, isSet: true}
}

func (v NullableProtectedBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectedBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


