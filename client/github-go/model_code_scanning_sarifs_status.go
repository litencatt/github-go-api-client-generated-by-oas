/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// CodeScanningSarifsStatus struct for CodeScanningSarifsStatus
type CodeScanningSarifsStatus struct {
	// `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
	ProcessingStatus *string `json:"processing_status,omitempty"`
	// The REST API URL for getting the analyses associated with the upload.
	AnalysesUrl NullableString `json:"analyses_url,omitempty"`
	// Any errors that ocurred during processing of the delivery.
	Errors []string `json:"errors,omitempty"`
}

// NewCodeScanningSarifsStatus instantiates a new CodeScanningSarifsStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeScanningSarifsStatus() *CodeScanningSarifsStatus {
	this := CodeScanningSarifsStatus{}
	return &this
}

// NewCodeScanningSarifsStatusWithDefaults instantiates a new CodeScanningSarifsStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeScanningSarifsStatusWithDefaults() *CodeScanningSarifsStatus {
	this := CodeScanningSarifsStatus{}
	return &this
}

// GetProcessingStatus returns the ProcessingStatus field value if set, zero value otherwise.
func (o *CodeScanningSarifsStatus) GetProcessingStatus() string {
	if o == nil || o.ProcessingStatus == nil {
		var ret string
		return ret
	}
	return *o.ProcessingStatus
}

// GetProcessingStatusOk returns a tuple with the ProcessingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningSarifsStatus) GetProcessingStatusOk() (*string, bool) {
	if o == nil || o.ProcessingStatus == nil {
		return nil, false
	}
	return o.ProcessingStatus, true
}

// HasProcessingStatus returns a boolean if a field has been set.
func (o *CodeScanningSarifsStatus) HasProcessingStatus() bool {
	if o != nil && o.ProcessingStatus != nil {
		return true
	}

	return false
}

// SetProcessingStatus gets a reference to the given string and assigns it to the ProcessingStatus field.
func (o *CodeScanningSarifsStatus) SetProcessingStatus(v string) {
	o.ProcessingStatus = &v
}

// GetAnalysesUrl returns the AnalysesUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodeScanningSarifsStatus) GetAnalysesUrl() string {
	if o == nil || o.AnalysesUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.AnalysesUrl.Get()
}

// GetAnalysesUrlOk returns a tuple with the AnalysesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodeScanningSarifsStatus) GetAnalysesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnalysesUrl.Get(), o.AnalysesUrl.IsSet()
}

// HasAnalysesUrl returns a boolean if a field has been set.
func (o *CodeScanningSarifsStatus) HasAnalysesUrl() bool {
	if o != nil && o.AnalysesUrl.IsSet() {
		return true
	}

	return false
}

// SetAnalysesUrl gets a reference to the given NullableString and assigns it to the AnalysesUrl field.
func (o *CodeScanningSarifsStatus) SetAnalysesUrl(v string) {
	o.AnalysesUrl.Set(&v)
}
// SetAnalysesUrlNil sets the value for AnalysesUrl to be an explicit nil
func (o *CodeScanningSarifsStatus) SetAnalysesUrlNil() {
	o.AnalysesUrl.Set(nil)
}

// UnsetAnalysesUrl ensures that no value is present for AnalysesUrl, not even an explicit nil
func (o *CodeScanningSarifsStatus) UnsetAnalysesUrl() {
	o.AnalysesUrl.Unset()
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodeScanningSarifsStatus) GetErrors() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodeScanningSarifsStatus) GetErrorsOk() ([]string, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *CodeScanningSarifsStatus) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *CodeScanningSarifsStatus) SetErrors(v []string) {
	o.Errors = v
}

func (o CodeScanningSarifsStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProcessingStatus != nil {
		toSerialize["processing_status"] = o.ProcessingStatus
	}
	if o.AnalysesUrl.IsSet() {
		toSerialize["analyses_url"] = o.AnalysesUrl.Get()
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableCodeScanningSarifsStatus struct {
	value *CodeScanningSarifsStatus
	isSet bool
}

func (v NullableCodeScanningSarifsStatus) Get() *CodeScanningSarifsStatus {
	return v.value
}

func (v *NullableCodeScanningSarifsStatus) Set(val *CodeScanningSarifsStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeScanningSarifsStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeScanningSarifsStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeScanningSarifsStatus(val *CodeScanningSarifsStatus) *NullableCodeScanningSarifsStatus {
	return &NullableCodeScanningSarifsStatus{value: val, isSet: true}
}

func (v NullableCodeScanningSarifsStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeScanningSarifsStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


