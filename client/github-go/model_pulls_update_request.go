/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// PullsUpdateRequest struct for PullsUpdateRequest
type PullsUpdateRequest struct {
	// The title of the pull request.
	Title *string `json:"title,omitempty"`
	// The contents of the pull request.
	Body *string `json:"body,omitempty"`
	// State of this Pull Request. Either `open` or `closed`.
	State *string `json:"state,omitempty"`
	// The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
	Base *string `json:"base,omitempty"`
	// Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
}

// NewPullsUpdateRequest instantiates a new PullsUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPullsUpdateRequest() *PullsUpdateRequest {
	this := PullsUpdateRequest{}
	return &this
}

// NewPullsUpdateRequestWithDefaults instantiates a new PullsUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPullsUpdateRequestWithDefaults() *PullsUpdateRequest {
	this := PullsUpdateRequest{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PullsUpdateRequest) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsUpdateRequest) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PullsUpdateRequest) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PullsUpdateRequest) SetTitle(v string) {
	o.Title = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *PullsUpdateRequest) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsUpdateRequest) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *PullsUpdateRequest) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *PullsUpdateRequest) SetBody(v string) {
	o.Body = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PullsUpdateRequest) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsUpdateRequest) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PullsUpdateRequest) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PullsUpdateRequest) SetState(v string) {
	o.State = &v
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *PullsUpdateRequest) GetBase() string {
	if o == nil || o.Base == nil {
		var ret string
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsUpdateRequest) GetBaseOk() (*string, bool) {
	if o == nil || o.Base == nil {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *PullsUpdateRequest) HasBase() bool {
	if o != nil && o.Base != nil {
		return true
	}

	return false
}

// SetBase gets a reference to the given string and assigns it to the Base field.
func (o *PullsUpdateRequest) SetBase(v string) {
	o.Base = &v
}

// GetMaintainerCanModify returns the MaintainerCanModify field value if set, zero value otherwise.
func (o *PullsUpdateRequest) GetMaintainerCanModify() bool {
	if o == nil || o.MaintainerCanModify == nil {
		var ret bool
		return ret
	}
	return *o.MaintainerCanModify
}

// GetMaintainerCanModifyOk returns a tuple with the MaintainerCanModify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsUpdateRequest) GetMaintainerCanModifyOk() (*bool, bool) {
	if o == nil || o.MaintainerCanModify == nil {
		return nil, false
	}
	return o.MaintainerCanModify, true
}

// HasMaintainerCanModify returns a boolean if a field has been set.
func (o *PullsUpdateRequest) HasMaintainerCanModify() bool {
	if o != nil && o.MaintainerCanModify != nil {
		return true
	}

	return false
}

// SetMaintainerCanModify gets a reference to the given bool and assigns it to the MaintainerCanModify field.
func (o *PullsUpdateRequest) SetMaintainerCanModify(v bool) {
	o.MaintainerCanModify = &v
}

func (o PullsUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Base != nil {
		toSerialize["base"] = o.Base
	}
	if o.MaintainerCanModify != nil {
		toSerialize["maintainer_can_modify"] = o.MaintainerCanModify
	}
	return json.Marshal(toSerialize)
}

type NullablePullsUpdateRequest struct {
	value *PullsUpdateRequest
	isSet bool
}

func (v NullablePullsUpdateRequest) Get() *PullsUpdateRequest {
	return v.value
}

func (v *NullablePullsUpdateRequest) Set(val *PullsUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePullsUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePullsUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePullsUpdateRequest(val *PullsUpdateRequest) *NullablePullsUpdateRequest {
	return &NullablePullsUpdateRequest{value: val, isSet: true}
}

func (v NullablePullsUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePullsUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


