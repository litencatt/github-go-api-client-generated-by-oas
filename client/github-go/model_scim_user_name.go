/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ScimUserName struct for ScimUserName
type ScimUserName struct {
	GivenName NullableString `json:"givenName"`
	FamilyName NullableString `json:"familyName"`
	Formatted NullableString `json:"formatted,omitempty"`
}

// NewScimUserName instantiates a new ScimUserName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScimUserName(givenName NullableString, familyName NullableString) *ScimUserName {
	this := ScimUserName{}
	this.GivenName = givenName
	this.FamilyName = familyName
	return &this
}

// NewScimUserNameWithDefaults instantiates a new ScimUserName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScimUserNameWithDefaults() *ScimUserName {
	this := ScimUserName{}
	return &this
}

// GetGivenName returns the GivenName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ScimUserName) GetGivenName() string {
	if o == nil || o.GivenName.Get() == nil {
		var ret string
		return ret
	}

	return *o.GivenName.Get()
}

// GetGivenNameOk returns a tuple with the GivenName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScimUserName) GetGivenNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GivenName.Get(), o.GivenName.IsSet()
}

// SetGivenName sets field value
func (o *ScimUserName) SetGivenName(v string) {
	o.GivenName.Set(&v)
}

// GetFamilyName returns the FamilyName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ScimUserName) GetFamilyName() string {
	if o == nil || o.FamilyName.Get() == nil {
		var ret string
		return ret
	}

	return *o.FamilyName.Get()
}

// GetFamilyNameOk returns a tuple with the FamilyName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScimUserName) GetFamilyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FamilyName.Get(), o.FamilyName.IsSet()
}

// SetFamilyName sets field value
func (o *ScimUserName) SetFamilyName(v string) {
	o.FamilyName.Set(&v)
}

// GetFormatted returns the Formatted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScimUserName) GetFormatted() string {
	if o == nil || o.Formatted.Get() == nil {
		var ret string
		return ret
	}
	return *o.Formatted.Get()
}

// GetFormattedOk returns a tuple with the Formatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScimUserName) GetFormattedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Formatted.Get(), o.Formatted.IsSet()
}

// HasFormatted returns a boolean if a field has been set.
func (o *ScimUserName) HasFormatted() bool {
	if o != nil && o.Formatted.IsSet() {
		return true
	}

	return false
}

// SetFormatted gets a reference to the given NullableString and assigns it to the Formatted field.
func (o *ScimUserName) SetFormatted(v string) {
	o.Formatted.Set(&v)
}
// SetFormattedNil sets the value for Formatted to be an explicit nil
func (o *ScimUserName) SetFormattedNil() {
	o.Formatted.Set(nil)
}

// UnsetFormatted ensures that no value is present for Formatted, not even an explicit nil
func (o *ScimUserName) UnsetFormatted() {
	o.Formatted.Unset()
}

func (o ScimUserName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["givenName"] = o.GivenName.Get()
	}
	if true {
		toSerialize["familyName"] = o.FamilyName.Get()
	}
	if o.Formatted.IsSet() {
		toSerialize["formatted"] = o.Formatted.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableScimUserName struct {
	value *ScimUserName
	isSet bool
}

func (v NullableScimUserName) Get() *ScimUserName {
	return v.value
}

func (v *NullableScimUserName) Set(val *ScimUserName) {
	v.value = val
	v.isSet = true
}

func (v NullableScimUserName) IsSet() bool {
	return v.isSet
}

func (v *NullableScimUserName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScimUserName(val *ScimUserName) *NullableScimUserName {
	return &NullableScimUserName{value: val, isSet: true}
}

func (v NullableScimUserName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScimUserName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


