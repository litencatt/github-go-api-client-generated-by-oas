/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// EnterpriseAdminApiService EnterpriseAdminApi service
type EnterpriseAdminApiService service

type ApiEnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerId int32
	enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest *EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest
}

func (r ApiEnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest) EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest(enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest) ApiEnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest {
	r.enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest = &enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest
	return r
}

func (r ApiEnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest) Execute() (*EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, *http.Response, error) {
	return r.ApiService.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseExecute(r)
}

/*
EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise Add custom labels to a self-hosted runner for an enterprise

Add custom labels to a self-hosted runner configured in an enterprise.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerId Unique identifier of the self-hosted runner.
 @return ApiEnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise(ctx context.Context, enterprise string, runnerId int32) ApiEnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest {
	return ApiEnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerId: runnerId,
	}
}

// Execute executes the request
//  @return EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
func (a *EnterpriseAdminApiService) EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseExecute(r ApiEnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest) (*EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runners/{runner_id}/labels"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_id"+"}", url.PathEscape(parameterToString(r.runnerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest == nil {
		return localVarReturnValue, nil, reportError("enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationErrorSimple
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerGroupId int32
	orgId int32
}

func (r ApiEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseExecute(r)
}

/*
EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise Add organization access to a self-hosted runner group in an enterprise

Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerGroupId Unique identifier of the self-hosted runner group.
 @param orgId The unique identifier of the organization.
 @return ApiEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise(ctx context.Context, enterprise string, runnerGroupId int32, orgId int32) ApiEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest {
	return ApiEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerGroupId: runnerGroupId,
		orgId: orgId,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseExecute(r ApiEnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_group_id"+"}", url.PathEscape(parameterToString(r.runnerGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterToString(r.orgId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerGroupId int32
	runnerId int32
}

func (r ApiEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseExecute(r)
}

/*
EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise Add a self-hosted runner to a group for an enterprise

Adds a self-hosted runner to a runner group configured in an enterprise.

You must authenticate using an access token with the `manage_runners:enterprise`
scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerGroupId Unique identifier of the self-hosted runner group.
 @param runnerId Unique identifier of the self-hosted runner.
 @return ApiEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise(ctx context.Context, enterprise string, runnerGroupId int32, runnerId int32) ApiEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest {
	return ApiEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerGroupId: runnerGroupId,
		runnerId: runnerId,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseExecute(r ApiEnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_group_id"+"}", url.PathEscape(parameterToString(r.runnerGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_id"+"}", url.PathEscape(parameterToString(r.runnerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminCreateRegistrationTokenForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
}

func (r ApiEnterpriseAdminCreateRegistrationTokenForEnterpriseRequest) Execute() (*AuthenticationToken, *http.Response, error) {
	return r.ApiService.EnterpriseAdminCreateRegistrationTokenForEnterpriseExecute(r)
}

/*
EnterpriseAdminCreateRegistrationTokenForEnterprise Create a registration token for an enterprise

Returns a token that you can pass to the `config` script. The token expires after one hour.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

#### Example using registration token

Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.

```
./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
```

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminCreateRegistrationTokenForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminCreateRegistrationTokenForEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminCreateRegistrationTokenForEnterpriseRequest {
	return ApiEnterpriseAdminCreateRegistrationTokenForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return AuthenticationToken
func (a *EnterpriseAdminApiService) EnterpriseAdminCreateRegistrationTokenForEnterpriseExecute(r ApiEnterpriseAdminCreateRegistrationTokenForEnterpriseRequest) (*AuthenticationToken, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthenticationToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminCreateRegistrationTokenForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runners/registration-token"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminCreateRemoveTokenForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
}

func (r ApiEnterpriseAdminCreateRemoveTokenForEnterpriseRequest) Execute() (*AuthenticationToken, *http.Response, error) {
	return r.ApiService.EnterpriseAdminCreateRemoveTokenForEnterpriseExecute(r)
}

/*
EnterpriseAdminCreateRemoveTokenForEnterprise Create a remove token for an enterprise

Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

#### Example using remove token

To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
endpoint.

```
./config.sh remove --token TOKEN
```

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminCreateRemoveTokenForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminCreateRemoveTokenForEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminCreateRemoveTokenForEnterpriseRequest {
	return ApiEnterpriseAdminCreateRemoveTokenForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return AuthenticationToken
func (a *EnterpriseAdminApiService) EnterpriseAdminCreateRemoveTokenForEnterpriseExecute(r ApiEnterpriseAdminCreateRemoveTokenForEnterpriseRequest) (*AuthenticationToken, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthenticationToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminCreateRemoveTokenForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runners/remove-token"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest *EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest
}

func (r ApiEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest) EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest(enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest) ApiEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest {
	r.enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest = &enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest
	return r
}

func (r ApiEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest) Execute() (*RunnerGroupsEnterprise, *http.Response, error) {
	return r.ApiService.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseExecute(r)
}

/*
EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise Create a self-hosted runner group for an enterprise

Creates a new self-hosted runner group for an enterprise.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest {
	return ApiEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return RunnerGroupsEnterprise
func (a *EnterpriseAdminApiService) EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseExecute(r ApiEnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest) (*RunnerGroupsEnterprise, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RunnerGroupsEnterprise
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest == nil {
		return localVarReturnValue, nil, reportError("enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminDeleteScimGroupFromEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	scimGroupId string
}

func (r ApiEnterpriseAdminDeleteScimGroupFromEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminDeleteScimGroupFromEnterpriseExecute(r)
}

/*
EnterpriseAdminDeleteScimGroupFromEnterprise Delete a SCIM group from an enterprise

**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param scimGroupId Identifier generated by the GitHub SCIM endpoint.
 @return ApiEnterpriseAdminDeleteScimGroupFromEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminDeleteScimGroupFromEnterprise(ctx context.Context, enterprise string, scimGroupId string) ApiEnterpriseAdminDeleteScimGroupFromEnterpriseRequest {
	return ApiEnterpriseAdminDeleteScimGroupFromEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		scimGroupId: scimGroupId,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminDeleteScimGroupFromEnterpriseExecute(r ApiEnterpriseAdminDeleteScimGroupFromEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminDeleteScimGroupFromEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim_group_id"+"}", url.PathEscape(parameterToString(r.scimGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerId int32
}

func (r ApiEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseExecute(r)
}

/*
EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise Delete a self-hosted runner from an enterprise

Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerId Unique identifier of the self-hosted runner.
 @return ApiEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise(ctx context.Context, enterprise string, runnerId int32) ApiEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest {
	return ApiEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerId: runnerId,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseExecute(r ApiEnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminDeleteSelfHostedRunnerFromEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runners/{runner_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_id"+"}", url.PathEscape(parameterToString(r.runnerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerGroupId int32
}

func (r ApiEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseExecute(r)
}

/*
EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise Delete a self-hosted runner group from an enterprise

Deletes a self-hosted runner group for an enterprise.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerGroupId Unique identifier of the self-hosted runner group.
 @return ApiEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise(ctx context.Context, enterprise string, runnerGroupId int32) ApiEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest {
	return ApiEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerGroupId: runnerGroupId,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseExecute(r ApiEnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_group_id"+"}", url.PathEscape(parameterToString(r.runnerGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminDeleteUserFromEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	scimUserId string
}

func (r ApiEnterpriseAdminDeleteUserFromEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminDeleteUserFromEnterpriseExecute(r)
}

/*
EnterpriseAdminDeleteUserFromEnterprise Delete a SCIM user from an enterprise

**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param scimUserId The unique identifier of the SCIM user.
 @return ApiEnterpriseAdminDeleteUserFromEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminDeleteUserFromEnterprise(ctx context.Context, enterprise string, scimUserId string) ApiEnterpriseAdminDeleteUserFromEnterpriseRequest {
	return ApiEnterpriseAdminDeleteUserFromEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		scimUserId: scimUserId,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminDeleteUserFromEnterpriseExecute(r ApiEnterpriseAdminDeleteUserFromEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminDeleteUserFromEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim_user_id"+"}", url.PathEscape(parameterToString(r.scimUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	orgId int32
}

func (r ApiEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseExecute(r)
}

/*
EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise Disable a selected organization for GitHub Actions in an enterprise

Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param orgId The unique identifier of the organization.
 @return ApiEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise(ctx context.Context, enterprise string, orgId int32) ApiEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest {
	return ApiEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		orgId: orgId,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseExecute(r ApiEnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterToString(r.orgId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	orgId int32
}

func (r ApiEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseExecute(r)
}

/*
EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise Enable a selected organization for GitHub Actions in an enterprise

Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param orgId The unique identifier of the organization.
 @return ApiEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(ctx context.Context, enterprise string, orgId int32) ApiEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest {
	return ApiEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		orgId: orgId,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseExecute(r ApiEnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterToString(r.orgId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminGetAllowedActionsEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
}

func (r ApiEnterpriseAdminGetAllowedActionsEnterpriseRequest) Execute() (*SelectedActions, *http.Response, error) {
	return r.ApiService.EnterpriseAdminGetAllowedActionsEnterpriseExecute(r)
}

/*
EnterpriseAdminGetAllowedActionsEnterprise Get allowed actions and reusable workflows for an enterprise

Gets the selected actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminGetAllowedActionsEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminGetAllowedActionsEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminGetAllowedActionsEnterpriseRequest {
	return ApiEnterpriseAdminGetAllowedActionsEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return SelectedActions
func (a *EnterpriseAdminApiService) EnterpriseAdminGetAllowedActionsEnterpriseExecute(r ApiEnterpriseAdminGetAllowedActionsEnterpriseRequest) (*SelectedActions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SelectedActions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminGetAllowedActionsEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/permissions/selected-actions"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminGetAuditLogRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	phrase *string
	include *string
	after *string
	before *string
	order *string
	page *int32
	perPage *int32
}

// A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).
func (r ApiEnterpriseAdminGetAuditLogRequest) Phrase(phrase string) ApiEnterpriseAdminGetAuditLogRequest {
	r.phrase = &phrase
	return r
}

// The event types to include:  - &#x60;web&#x60; - returns web (non-Git) events. - &#x60;git&#x60; - returns Git events. - &#x60;all&#x60; - returns both web and Git events.  The default is &#x60;web&#x60;.
func (r ApiEnterpriseAdminGetAuditLogRequest) Include(include string) ApiEnterpriseAdminGetAuditLogRequest {
	r.include = &include
	return r
}

// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
func (r ApiEnterpriseAdminGetAuditLogRequest) After(after string) ApiEnterpriseAdminGetAuditLogRequest {
	r.after = &after
	return r
}

// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
func (r ApiEnterpriseAdminGetAuditLogRequest) Before(before string) ApiEnterpriseAdminGetAuditLogRequest {
	r.before = &before
	return r
}

// The order of audit log events. To list newest events first, specify &#x60;desc&#x60;. To list oldest events first, specify &#x60;asc&#x60;.  The default is &#x60;desc&#x60;.
func (r ApiEnterpriseAdminGetAuditLogRequest) Order(order string) ApiEnterpriseAdminGetAuditLogRequest {
	r.order = &order
	return r
}

// Page number of the results to fetch.
func (r ApiEnterpriseAdminGetAuditLogRequest) Page(page int32) ApiEnterpriseAdminGetAuditLogRequest {
	r.page = &page
	return r
}

// The number of results per page (max 100).
func (r ApiEnterpriseAdminGetAuditLogRequest) PerPage(perPage int32) ApiEnterpriseAdminGetAuditLogRequest {
	r.perPage = &perPage
	return r
}

func (r ApiEnterpriseAdminGetAuditLogRequest) Execute() ([]AuditLogEvent, *http.Response, error) {
	return r.ApiService.EnterpriseAdminGetAuditLogExecute(r)
}

/*
EnterpriseAdminGetAuditLog Get the audit log for an enterprise

Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminGetAuditLogRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminGetAuditLog(ctx context.Context, enterprise string) ApiEnterpriseAdminGetAuditLogRequest {
	return ApiEnterpriseAdminGetAuditLogRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return []AuditLogEvent
func (a *EnterpriseAdminApiService) EnterpriseAdminGetAuditLogExecute(r ApiEnterpriseAdminGetAuditLogRequest) ([]AuditLogEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AuditLogEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminGetAuditLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/audit-log"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.phrase != nil {
		localVarQueryParams.Add("phrase", parameterToString(*r.phrase, ""))
	}
	if r.include != nil {
		localVarQueryParams.Add("include", parameterToString(*r.include, ""))
	}
	if r.after != nil {
		localVarQueryParams.Add("after", parameterToString(*r.after, ""))
	}
	if r.before != nil {
		localVarQueryParams.Add("before", parameterToString(*r.before, ""))
	}
	if r.order != nil {
		localVarQueryParams.Add("order", parameterToString(*r.order, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
}

func (r ApiEnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest) Execute() (*ActionsEnterprisePermissions, *http.Response, error) {
	return r.ApiService.EnterpriseAdminGetGithubActionsPermissionsEnterpriseExecute(r)
}

/*
EnterpriseAdminGetGithubActionsPermissionsEnterprise Get GitHub Actions permissions for an enterprise

Gets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminGetGithubActionsPermissionsEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest {
	return ApiEnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return ActionsEnterprisePermissions
func (a *EnterpriseAdminApiService) EnterpriseAdminGetGithubActionsPermissionsEnterpriseExecute(r ApiEnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest) (*ActionsEnterprisePermissions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActionsEnterprisePermissions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminGetGithubActionsPermissionsEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	scimGroupId string
	excludedAttributes *string
}

// Attributes to exclude.
func (r ApiEnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequest) ExcludedAttributes(excludedAttributes string) ApiEnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequest {
	r.excludedAttributes = &excludedAttributes
	return r
}

func (r ApiEnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequest) Execute() (*ScimEnterpriseGroup, *http.Response, error) {
	return r.ApiService.EnterpriseAdminGetProvisioningInformationForEnterpriseGroupExecute(r)
}

/*
EnterpriseAdminGetProvisioningInformationForEnterpriseGroup Get SCIM provisioning information for an enterprise group

**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param scimGroupId Identifier generated by the GitHub SCIM endpoint.
 @return ApiEnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminGetProvisioningInformationForEnterpriseGroup(ctx context.Context, enterprise string, scimGroupId string) ApiEnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequest {
	return ApiEnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		scimGroupId: scimGroupId,
	}
}

// Execute executes the request
//  @return ScimEnterpriseGroup
func (a *EnterpriseAdminApiService) EnterpriseAdminGetProvisioningInformationForEnterpriseGroupExecute(r ApiEnterpriseAdminGetProvisioningInformationForEnterpriseGroupRequest) (*ScimEnterpriseGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScimEnterpriseGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminGetProvisioningInformationForEnterpriseGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim_group_id"+"}", url.PathEscape(parameterToString(r.scimGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.excludedAttributes != nil {
		localVarQueryParams.Add("excludedAttributes", parameterToString(*r.excludedAttributes, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminGetProvisioningInformationForEnterpriseUserRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	scimUserId string
}

func (r ApiEnterpriseAdminGetProvisioningInformationForEnterpriseUserRequest) Execute() (*ScimEnterpriseUser, *http.Response, error) {
	return r.ApiService.EnterpriseAdminGetProvisioningInformationForEnterpriseUserExecute(r)
}

/*
EnterpriseAdminGetProvisioningInformationForEnterpriseUser Get SCIM provisioning information for an enterprise user

**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param scimUserId The unique identifier of the SCIM user.
 @return ApiEnterpriseAdminGetProvisioningInformationForEnterpriseUserRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminGetProvisioningInformationForEnterpriseUser(ctx context.Context, enterprise string, scimUserId string) ApiEnterpriseAdminGetProvisioningInformationForEnterpriseUserRequest {
	return ApiEnterpriseAdminGetProvisioningInformationForEnterpriseUserRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		scimUserId: scimUserId,
	}
}

// Execute executes the request
//  @return ScimEnterpriseUser
func (a *EnterpriseAdminApiService) EnterpriseAdminGetProvisioningInformationForEnterpriseUserExecute(r ApiEnterpriseAdminGetProvisioningInformationForEnterpriseUserRequest) (*ScimEnterpriseUser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScimEnterpriseUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminGetProvisioningInformationForEnterpriseUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim_user_id"+"}", url.PathEscape(parameterToString(r.scimUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerId int32
}

func (r ApiEnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest) Execute() (*Runner, *http.Response, error) {
	return r.ApiService.EnterpriseAdminGetSelfHostedRunnerForEnterpriseExecute(r)
}

/*
EnterpriseAdminGetSelfHostedRunnerForEnterprise Get a self-hosted runner for an enterprise

Gets a specific self-hosted runner configured in an enterprise.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerId Unique identifier of the self-hosted runner.
 @return ApiEnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminGetSelfHostedRunnerForEnterprise(ctx context.Context, enterprise string, runnerId int32) ApiEnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest {
	return ApiEnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerId: runnerId,
	}
}

// Execute executes the request
//  @return Runner
func (a *EnterpriseAdminApiService) EnterpriseAdminGetSelfHostedRunnerForEnterpriseExecute(r ApiEnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest) (*Runner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Runner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminGetSelfHostedRunnerForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runners/{runner_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_id"+"}", url.PathEscape(parameterToString(r.runnerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerGroupId int32
}

func (r ApiEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest) Execute() (*RunnerGroupsEnterprise, *http.Response, error) {
	return r.ApiService.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseExecute(r)
}

/*
EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise Get a self-hosted runner group for an enterprise

Gets a specific self-hosted runner group for an enterprise.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerGroupId Unique identifier of the self-hosted runner group.
 @return ApiEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise(ctx context.Context, enterprise string, runnerGroupId int32) ApiEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest {
	return ApiEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerGroupId: runnerGroupId,
	}
}

// Execute executes the request
//  @return RunnerGroupsEnterprise
func (a *EnterpriseAdminApiService) EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseExecute(r ApiEnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest) (*RunnerGroupsEnterprise, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RunnerGroupsEnterprise
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminGetSelfHostedRunnerGroupForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_group_id"+"}", url.PathEscape(parameterToString(r.runnerGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminGetServerStatisticsRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterpriseOrOrg string
	dateStart *string
	dateEnd *string
}

// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
func (r ApiEnterpriseAdminGetServerStatisticsRequest) DateStart(dateStart string) ApiEnterpriseAdminGetServerStatisticsRequest {
	r.dateStart = &dateStart
	return r
}

// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
func (r ApiEnterpriseAdminGetServerStatisticsRequest) DateEnd(dateEnd string) ApiEnterpriseAdminGetServerStatisticsRequest {
	r.dateEnd = &dateEnd
	return r
}

func (r ApiEnterpriseAdminGetServerStatisticsRequest) Execute() ([]ServerStatisticsInner, *http.Response, error) {
	return r.ApiService.EnterpriseAdminGetServerStatisticsExecute(r)
}

/*
EnterpriseAdminGetServerStatistics Get GitHub Enterprise Server statistics

Returns aggregate usage metrics for your GitHub Enterprise Server 3.5+ instance for a specified time period up to 365 days.

To use this endpoint, your GitHub Enterprise Server instance must be connected to GitHub Enterprise Cloud using GitHub Connect. You must enable Server Statistics, and for the API request provide your enterprise account name or organization name connected to the GitHub Enterprise Server. For more information, see "[Enabling Server Statistics for your enterprise](/admin/configuration/configuring-github-connect/enabling-server-statistics-for-your-enterprise)" in the GitHub Enterprise Server documentation.

You'll need to use a personal access token:
  - If you connected your GitHub Enterprise Server to an enterprise account and enabled Server Statistics, you'll need a personal access token with the `read:enterprise` permission.
  - If you connected your GitHub Enterprise Server to an organization account and enabled Server Statistics, you'll need a personal access token with the `read:org` permission.

For more information on creating a personal access token, see "[Creating a personal access token](/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)."

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterpriseOrOrg The slug version of the enterprise name or the login of an organization.
 @return ApiEnterpriseAdminGetServerStatisticsRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminGetServerStatistics(ctx context.Context, enterpriseOrOrg string) ApiEnterpriseAdminGetServerStatisticsRequest {
	return ApiEnterpriseAdminGetServerStatisticsRequest{
		ApiService: a,
		ctx: ctx,
		enterpriseOrOrg: enterpriseOrOrg,
	}
}

// Execute executes the request
//  @return []ServerStatisticsInner
func (a *EnterpriseAdminApiService) EnterpriseAdminGetServerStatisticsExecute(r ApiEnterpriseAdminGetServerStatisticsRequest) ([]ServerStatisticsInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ServerStatisticsInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminGetServerStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprise-installation/{enterprise_or_org}/server-statistics"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise_or_org"+"}", url.PathEscape(parameterToString(r.enterpriseOrOrg, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dateStart != nil {
		localVarQueryParams.Add("date_start", parameterToString(*r.dateStart, ""))
	}
	if r.dateEnd != nil {
		localVarQueryParams.Add("date_end", parameterToString(*r.dateEnd, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerId int32
}

func (r ApiEnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest) Execute() (*EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, *http.Response, error) {
	return r.ApiService.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseExecute(r)
}

/*
EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise List labels for a self-hosted runner for an enterprise

Lists all labels for a self-hosted runner configured in an enterprise.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerId Unique identifier of the self-hosted runner.
 @return ApiEnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise(ctx context.Context, enterprise string, runnerId int32) ApiEnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest {
	return ApiEnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerId: runnerId,
	}
}

// Execute executes the request
//  @return EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
func (a *EnterpriseAdminApiService) EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseExecute(r ApiEnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest) (*EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runners/{runner_id}/labels"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_id"+"}", url.PathEscape(parameterToString(r.runnerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerGroupId int32
	perPage *int32
	page *int32
}

// The number of results per page (max 100).
func (r ApiEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) PerPage(perPage int32) ApiEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest {
	r.perPage = &perPage
	return r
}

// Page number of the results to fetch.
func (r ApiEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) Page(page int32) ApiEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest {
	r.page = &page
	return r
}

func (r ApiEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) Execute() (*EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response, *http.Response, error) {
	return r.ApiService.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseExecute(r)
}

/*
EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise List organization access to a self-hosted runner group in an enterprise

Lists the organizations with access to a self-hosted runner group.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerGroupId Unique identifier of the self-hosted runner group.
 @return ApiEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise(ctx context.Context, enterprise string, runnerGroupId int32) ApiEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest {
	return ApiEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerGroupId: runnerGroupId,
	}
}

// Execute executes the request
//  @return EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response
func (a *EnterpriseAdminApiService) EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseExecute(r ApiEnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) (*EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_group_id"+"}", url.PathEscape(parameterToString(r.runnerGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	startIndex *int32
	count *int32
	filter *string
	excludedAttributes *string
}

// Used for pagination: the index of the first result to return.
func (r ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest) StartIndex(startIndex int32) ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest {
	r.startIndex = &startIndex
	return r
}

// Used for pagination: the number of results to return.
func (r ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest) Count(count int32) ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest {
	r.count = &count
	return r
}

// filter results
func (r ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest) Filter(filter string) ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest {
	r.filter = &filter
	return r
}

// attributes to exclude
func (r ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest) ExcludedAttributes(excludedAttributes string) ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest {
	r.excludedAttributes = &excludedAttributes
	return r
}

func (r ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest) Execute() (*ScimGroupListEnterprise, *http.Response, error) {
	return r.ApiService.EnterpriseAdminListProvisionedGroupsEnterpriseExecute(r)
}

/*
EnterpriseAdminListProvisionedGroupsEnterprise List provisioned SCIM groups for an enterprise

**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminListProvisionedGroupsEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest {
	return ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return ScimGroupListEnterprise
func (a *EnterpriseAdminApiService) EnterpriseAdminListProvisionedGroupsEnterpriseExecute(r ApiEnterpriseAdminListProvisionedGroupsEnterpriseRequest) (*ScimGroupListEnterprise, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScimGroupListEnterprise
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminListProvisionedGroupsEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim/v2/enterprises/{enterprise}/Groups"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startIndex != nil {
		localVarQueryParams.Add("startIndex", parameterToString(*r.startIndex, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.excludedAttributes != nil {
		localVarQueryParams.Add("excludedAttributes", parameterToString(*r.excludedAttributes, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminListProvisionedIdentitiesEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	startIndex *int32
	count *int32
	filter *string
}

// Used for pagination: the index of the first result to return.
func (r ApiEnterpriseAdminListProvisionedIdentitiesEnterpriseRequest) StartIndex(startIndex int32) ApiEnterpriseAdminListProvisionedIdentitiesEnterpriseRequest {
	r.startIndex = &startIndex
	return r
}

// Used for pagination: the number of results to return.
func (r ApiEnterpriseAdminListProvisionedIdentitiesEnterpriseRequest) Count(count int32) ApiEnterpriseAdminListProvisionedIdentitiesEnterpriseRequest {
	r.count = &count
	return r
}

// filter results
func (r ApiEnterpriseAdminListProvisionedIdentitiesEnterpriseRequest) Filter(filter string) ApiEnterpriseAdminListProvisionedIdentitiesEnterpriseRequest {
	r.filter = &filter
	return r
}

func (r ApiEnterpriseAdminListProvisionedIdentitiesEnterpriseRequest) Execute() (*ScimUserListEnterprise, *http.Response, error) {
	return r.ApiService.EnterpriseAdminListProvisionedIdentitiesEnterpriseExecute(r)
}

/*
EnterpriseAdminListProvisionedIdentitiesEnterprise List SCIM provisioned identities for an enterprise

**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Retrieves a paginated list of all provisioned enterprise members, including pending invitations.

When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
  - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
  - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
  - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.

The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:

1. The user is granted access by the IdP and is not a member of the GitHub enterprise.

1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.

1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
   - If the user signs in, their GitHub account is linked to this entry.
   - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminListProvisionedIdentitiesEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminListProvisionedIdentitiesEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminListProvisionedIdentitiesEnterpriseRequest {
	return ApiEnterpriseAdminListProvisionedIdentitiesEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return ScimUserListEnterprise
func (a *EnterpriseAdminApiService) EnterpriseAdminListProvisionedIdentitiesEnterpriseExecute(r ApiEnterpriseAdminListProvisionedIdentitiesEnterpriseRequest) (*ScimUserListEnterprise, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScimUserListEnterprise
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminListProvisionedIdentitiesEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim/v2/enterprises/{enterprise}/Users"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startIndex != nil {
		localVarQueryParams.Add("startIndex", parameterToString(*r.startIndex, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminListRunnerApplicationsForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
}

func (r ApiEnterpriseAdminListRunnerApplicationsForEnterpriseRequest) Execute() ([]RunnerApplication, *http.Response, error) {
	return r.ApiService.EnterpriseAdminListRunnerApplicationsForEnterpriseExecute(r)
}

/*
EnterpriseAdminListRunnerApplicationsForEnterprise List runner applications for an enterprise

Lists binaries for the runner application that you can download and run.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminListRunnerApplicationsForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminListRunnerApplicationsForEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminListRunnerApplicationsForEnterpriseRequest {
	return ApiEnterpriseAdminListRunnerApplicationsForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return []RunnerApplication
func (a *EnterpriseAdminApiService) EnterpriseAdminListRunnerApplicationsForEnterpriseExecute(r ApiEnterpriseAdminListRunnerApplicationsForEnterpriseRequest) ([]RunnerApplication, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RunnerApplication
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminListRunnerApplicationsForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runners/downloads"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	perPage *int32
	page *int32
}

// The number of results per page (max 100).
func (r ApiEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) PerPage(perPage int32) ApiEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest {
	r.perPage = &perPage
	return r
}

// Page number of the results to fetch.
func (r ApiEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) Page(page int32) ApiEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest {
	r.page = &page
	return r
}

func (r ApiEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) Execute() (*EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response, *http.Response, error) {
	return r.ApiService.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseExecute(r)
}

/*
EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise List selected organizations enabled for GitHub Actions in an enterprise

Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest {
	return ApiEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response
func (a *EnterpriseAdminApiService) EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseExecute(r ApiEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) (*EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/permissions/organizations"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	perPage *int32
	page *int32
	visibleToOrganization *string
}

// The number of results per page (max 100).
func (r ApiEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest) PerPage(perPage int32) ApiEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest {
	r.perPage = &perPage
	return r
}

// Page number of the results to fetch.
func (r ApiEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest) Page(page int32) ApiEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest {
	r.page = &page
	return r
}

// Only return runner groups that are allowed to be used by this organization.
func (r ApiEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest) VisibleToOrganization(visibleToOrganization string) ApiEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest {
	r.visibleToOrganization = &visibleToOrganization
	return r
}

func (r ApiEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest) Execute() (*EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response, *http.Response, error) {
	return r.ApiService.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseExecute(r)
}

/*
EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise List self-hosted runner groups for an enterprise

Lists all self-hosted runner groups for an enterprise.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest {
	return ApiEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response
func (a *EnterpriseAdminApiService) EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseExecute(r ApiEnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest) (*EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.visibleToOrganization != nil {
		localVarQueryParams.Add("visible_to_organization", parameterToString(*r.visibleToOrganization, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminListSelfHostedRunnersForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	perPage *int32
	page *int32
}

// The number of results per page (max 100).
func (r ApiEnterpriseAdminListSelfHostedRunnersForEnterpriseRequest) PerPage(perPage int32) ApiEnterpriseAdminListSelfHostedRunnersForEnterpriseRequest {
	r.perPage = &perPage
	return r
}

// Page number of the results to fetch.
func (r ApiEnterpriseAdminListSelfHostedRunnersForEnterpriseRequest) Page(page int32) ApiEnterpriseAdminListSelfHostedRunnersForEnterpriseRequest {
	r.page = &page
	return r
}

func (r ApiEnterpriseAdminListSelfHostedRunnersForEnterpriseRequest) Execute() (*EnterpriseAdminListSelfHostedRunnersForEnterprise200Response, *http.Response, error) {
	return r.ApiService.EnterpriseAdminListSelfHostedRunnersForEnterpriseExecute(r)
}

/*
EnterpriseAdminListSelfHostedRunnersForEnterprise List self-hosted runners for an enterprise

Lists all self-hosted runners configured for an enterprise.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminListSelfHostedRunnersForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminListSelfHostedRunnersForEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminListSelfHostedRunnersForEnterpriseRequest {
	return ApiEnterpriseAdminListSelfHostedRunnersForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return EnterpriseAdminListSelfHostedRunnersForEnterprise200Response
func (a *EnterpriseAdminApiService) EnterpriseAdminListSelfHostedRunnersForEnterpriseExecute(r ApiEnterpriseAdminListSelfHostedRunnersForEnterpriseRequest) (*EnterpriseAdminListSelfHostedRunnersForEnterprise200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnterpriseAdminListSelfHostedRunnersForEnterprise200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminListSelfHostedRunnersForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runners"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerGroupId int32
	perPage *int32
	page *int32
}

// The number of results per page (max 100).
func (r ApiEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest) PerPage(perPage int32) ApiEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest {
	r.perPage = &perPage
	return r
}

// Page number of the results to fetch.
func (r ApiEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest) Page(page int32) ApiEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest {
	r.page = &page
	return r
}

func (r ApiEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest) Execute() (*EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response, *http.Response, error) {
	return r.ApiService.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseExecute(r)
}

/*
EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise List self-hosted runners in a group for an enterprise

Lists the self-hosted runners that are in a specific enterprise group.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerGroupId Unique identifier of the self-hosted runner group.
 @return ApiEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise(ctx context.Context, enterprise string, runnerGroupId int32) ApiEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest {
	return ApiEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerGroupId: runnerGroupId,
	}
}

// Execute executes the request
//  @return EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response
func (a *EnterpriseAdminApiService) EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseExecute(r ApiEnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest) (*EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_group_id"+"}", url.PathEscape(parameterToString(r.runnerGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	enterpriseAdminProvisionAndInviteEnterpriseGroupRequest *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest
}

func (r ApiEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest(enterpriseAdminProvisionAndInviteEnterpriseGroupRequest EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) ApiEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest {
	r.enterpriseAdminProvisionAndInviteEnterpriseGroupRequest = &enterpriseAdminProvisionAndInviteEnterpriseGroupRequest
	return r
}

func (r ApiEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) Execute() (*ScimEnterpriseGroup, *http.Response, error) {
	return r.ApiService.EnterpriseAdminProvisionAndInviteEnterpriseGroupExecute(r)
}

/*
EnterpriseAdminProvisionAndInviteEnterpriseGroup Provision a SCIM enterprise group and invite users

**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminProvisionAndInviteEnterpriseGroup(ctx context.Context, enterprise string) ApiEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest {
	return ApiEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return ScimEnterpriseGroup
func (a *EnterpriseAdminApiService) EnterpriseAdminProvisionAndInviteEnterpriseGroupExecute(r ApiEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) (*ScimEnterpriseGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScimEnterpriseGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminProvisionAndInviteEnterpriseGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim/v2/enterprises/{enterprise}/Groups"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminProvisionAndInviteEnterpriseGroupRequest == nil {
		return localVarReturnValue, nil, reportError("enterpriseAdminProvisionAndInviteEnterpriseGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminProvisionAndInviteEnterpriseGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminProvisionAndInviteEnterpriseUserRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	enterpriseAdminProvisionAndInviteEnterpriseUserRequest *EnterpriseAdminProvisionAndInviteEnterpriseUserRequest
}

func (r ApiEnterpriseAdminProvisionAndInviteEnterpriseUserRequest) EnterpriseAdminProvisionAndInviteEnterpriseUserRequest(enterpriseAdminProvisionAndInviteEnterpriseUserRequest EnterpriseAdminProvisionAndInviteEnterpriseUserRequest) ApiEnterpriseAdminProvisionAndInviteEnterpriseUserRequest {
	r.enterpriseAdminProvisionAndInviteEnterpriseUserRequest = &enterpriseAdminProvisionAndInviteEnterpriseUserRequest
	return r
}

func (r ApiEnterpriseAdminProvisionAndInviteEnterpriseUserRequest) Execute() (*ScimEnterpriseUser, *http.Response, error) {
	return r.ApiService.EnterpriseAdminProvisionAndInviteEnterpriseUserExecute(r)
}

/*
EnterpriseAdminProvisionAndInviteEnterpriseUser Provision and invite a SCIM enterprise user

**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Provision enterprise membership for a user, and send organization invitation emails to the email address.

You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminProvisionAndInviteEnterpriseUserRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminProvisionAndInviteEnterpriseUser(ctx context.Context, enterprise string) ApiEnterpriseAdminProvisionAndInviteEnterpriseUserRequest {
	return ApiEnterpriseAdminProvisionAndInviteEnterpriseUserRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return ScimEnterpriseUser
func (a *EnterpriseAdminApiService) EnterpriseAdminProvisionAndInviteEnterpriseUserExecute(r ApiEnterpriseAdminProvisionAndInviteEnterpriseUserRequest) (*ScimEnterpriseUser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScimEnterpriseUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminProvisionAndInviteEnterpriseUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim/v2/enterprises/{enterprise}/Users"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminProvisionAndInviteEnterpriseUserRequest == nil {
		return localVarReturnValue, nil, reportError("enterpriseAdminProvisionAndInviteEnterpriseUserRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminProvisionAndInviteEnterpriseUserRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerId int32
}

func (r ApiEnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseRequest) Execute() (*EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, *http.Response, error) {
	return r.ApiService.EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseExecute(r)
}

/*
EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise Remove all custom labels from a self-hosted runner for an enterprise

Remove all custom labels from a self-hosted runner configured in an
enterprise. Returns the remaining read-only labels from the runner.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerId Unique identifier of the self-hosted runner.
 @return ApiEnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise(ctx context.Context, enterprise string, runnerId int32) ApiEnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseRequest {
	return ApiEnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerId: runnerId,
	}
}

// Execute executes the request
//  @return EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
func (a *EnterpriseAdminApiService) EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseExecute(r ApiEnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseRequest) (*EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runners/{runner_id}/labels"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_id"+"}", url.PathEscape(parameterToString(r.runnerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationErrorSimple
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerId int32
	name string
}

func (r ApiEnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseRequest) Execute() (*EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, *http.Response, error) {
	return r.ApiService.EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseExecute(r)
}

/*
EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise Remove a custom label from a self-hosted runner for an enterprise

Remove a custom label from a self-hosted runner configured
in an enterprise. Returns the remaining labels from the runner.

This endpoint returns a `404 Not Found` status if the custom label is not
present on the runner.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerId Unique identifier of the self-hosted runner.
 @param name The name of a self-hosted runner's custom label.
 @return ApiEnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise(ctx context.Context, enterprise string, runnerId int32, name string) ApiEnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseRequest {
	return ApiEnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerId: runnerId,
		name: name,
	}
}

// Execute executes the request
//  @return EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
func (a *EnterpriseAdminApiService) EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseExecute(r ApiEnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseRequest) (*EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_id"+"}", url.PathEscape(parameterToString(r.runnerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationErrorSimple
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerGroupId int32
	orgId int32
}

func (r ApiEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseExecute(r)
}

/*
EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise Remove organization access to a self-hosted runner group in an enterprise

Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerGroupId Unique identifier of the self-hosted runner group.
 @param orgId The unique identifier of the organization.
 @return ApiEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise(ctx context.Context, enterprise string, runnerGroupId int32, orgId int32) ApiEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest {
	return ApiEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerGroupId: runnerGroupId,
		orgId: orgId,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseExecute(r ApiEnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_group_id"+"}", url.PathEscape(parameterToString(r.runnerGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterToString(r.orgId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerGroupId int32
	runnerId int32
}

func (r ApiEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseExecute(r)
}

/*
EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise Remove a self-hosted runner from a group for an enterprise

Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerGroupId Unique identifier of the self-hosted runner group.
 @param runnerId Unique identifier of the self-hosted runner.
 @return ApiEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(ctx context.Context, enterprise string, runnerGroupId int32, runnerId int32) ApiEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest {
	return ApiEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerGroupId: runnerGroupId,
		runnerId: runnerId,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseExecute(r ApiEnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_group_id"+"}", url.PathEscape(parameterToString(r.runnerGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_id"+"}", url.PathEscape(parameterToString(r.runnerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminSetAllowedActionsEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	selectedActions *SelectedActions
}

func (r ApiEnterpriseAdminSetAllowedActionsEnterpriseRequest) SelectedActions(selectedActions SelectedActions) ApiEnterpriseAdminSetAllowedActionsEnterpriseRequest {
	r.selectedActions = &selectedActions
	return r
}

func (r ApiEnterpriseAdminSetAllowedActionsEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminSetAllowedActionsEnterpriseExecute(r)
}

/*
EnterpriseAdminSetAllowedActionsEnterprise Set allowed actions and reusable workflows for an enterprise

Sets the actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminSetAllowedActionsEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminSetAllowedActionsEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminSetAllowedActionsEnterpriseRequest {
	return ApiEnterpriseAdminSetAllowedActionsEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminSetAllowedActionsEnterpriseExecute(r ApiEnterpriseAdminSetAllowedActionsEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminSetAllowedActionsEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/permissions/selected-actions"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.selectedActions == nil {
		return nil, reportError("selectedActions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.selectedActions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerId int32
	enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest *EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest
}

func (r ApiEnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest) EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest(enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest) ApiEnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest {
	r.enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest = &enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest
	return r
}

func (r ApiEnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest) Execute() (*EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, *http.Response, error) {
	return r.ApiService.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseExecute(r)
}

/*
EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise Set custom labels for a self-hosted runner for an enterprise

Remove all previous custom labels and set the new custom labels for a specific
self-hosted runner configured in an enterprise.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerId Unique identifier of the self-hosted runner.
 @return ApiEnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise(ctx context.Context, enterprise string, runnerId int32) ApiEnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest {
	return ApiEnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerId: runnerId,
	}
}

// Execute executes the request
//  @return EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
func (a *EnterpriseAdminApiService) EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseExecute(r ApiEnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest) (*EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runners/{runner_id}/labels"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_id"+"}", url.PathEscape(parameterToString(r.runnerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest == nil {
		return localVarReturnValue, nil, reportError("enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationErrorSimple
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest *EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest
}

func (r ApiEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest) EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest(enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest) ApiEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest {
	r.enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest = &enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest
	return r
}

func (r ApiEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminSetGithubActionsPermissionsEnterpriseExecute(r)
}

/*
EnterpriseAdminSetGithubActionsPermissionsEnterprise Set GitHub Actions permissions for an enterprise

Sets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminSetGithubActionsPermissionsEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest {
	return ApiEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminSetGithubActionsPermissionsEnterpriseExecute(r ApiEnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminSetGithubActionsPermissionsEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest == nil {
		return nil, reportError("enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminSetGithubActionsPermissionsEnterpriseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	scimGroupId string
	enterpriseAdminProvisionAndInviteEnterpriseGroupRequest *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest
}

func (r ApiEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest) EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest(enterpriseAdminProvisionAndInviteEnterpriseGroupRequest EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) ApiEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest {
	r.enterpriseAdminProvisionAndInviteEnterpriseGroupRequest = &enterpriseAdminProvisionAndInviteEnterpriseGroupRequest
	return r
}

func (r ApiEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest) Execute() (*ScimEnterpriseGroup, *http.Response, error) {
	return r.ApiService.EnterpriseAdminSetInformationForProvisionedEnterpriseGroupExecute(r)
}

/*
EnterpriseAdminSetInformationForProvisionedEnterpriseGroup Set SCIM information for a provisioned enterprise group

**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param scimGroupId Identifier generated by the GitHub SCIM endpoint.
 @return ApiEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminSetInformationForProvisionedEnterpriseGroup(ctx context.Context, enterprise string, scimGroupId string) ApiEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest {
	return ApiEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		scimGroupId: scimGroupId,
	}
}

// Execute executes the request
//  @return ScimEnterpriseGroup
func (a *EnterpriseAdminApiService) EnterpriseAdminSetInformationForProvisionedEnterpriseGroupExecute(r ApiEnterpriseAdminSetInformationForProvisionedEnterpriseGroupRequest) (*ScimEnterpriseGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScimEnterpriseGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminSetInformationForProvisionedEnterpriseGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim_group_id"+"}", url.PathEscape(parameterToString(r.scimGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminProvisionAndInviteEnterpriseGroupRequest == nil {
		return localVarReturnValue, nil, reportError("enterpriseAdminProvisionAndInviteEnterpriseGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminProvisionAndInviteEnterpriseGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	scimUserId string
	enterpriseAdminProvisionAndInviteEnterpriseUserRequest *EnterpriseAdminProvisionAndInviteEnterpriseUserRequest
}

func (r ApiEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest) EnterpriseAdminProvisionAndInviteEnterpriseUserRequest(enterpriseAdminProvisionAndInviteEnterpriseUserRequest EnterpriseAdminProvisionAndInviteEnterpriseUserRequest) ApiEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest {
	r.enterpriseAdminProvisionAndInviteEnterpriseUserRequest = &enterpriseAdminProvisionAndInviteEnterpriseUserRequest
	return r
}

func (r ApiEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest) Execute() (*ScimEnterpriseUser, *http.Response, error) {
	return r.ApiService.EnterpriseAdminSetInformationForProvisionedEnterpriseUserExecute(r)
}

/*
EnterpriseAdminSetInformationForProvisionedEnterpriseUser Set SCIM information for a provisioned enterprise user

**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.

You must at least provide the required values for the user: `userName`, `name`, and `emails`.

**Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param scimUserId The unique identifier of the SCIM user.
 @return ApiEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminSetInformationForProvisionedEnterpriseUser(ctx context.Context, enterprise string, scimUserId string) ApiEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest {
	return ApiEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		scimUserId: scimUserId,
	}
}

// Execute executes the request
//  @return ScimEnterpriseUser
func (a *EnterpriseAdminApiService) EnterpriseAdminSetInformationForProvisionedEnterpriseUserExecute(r ApiEnterpriseAdminSetInformationForProvisionedEnterpriseUserRequest) (*ScimEnterpriseUser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScimEnterpriseUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminSetInformationForProvisionedEnterpriseUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim_user_id"+"}", url.PathEscape(parameterToString(r.scimUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminProvisionAndInviteEnterpriseUserRequest == nil {
		return localVarReturnValue, nil, reportError("enterpriseAdminProvisionAndInviteEnterpriseUserRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminProvisionAndInviteEnterpriseUserRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerGroupId int32
	enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest *EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest
}

func (r ApiEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest(enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) ApiEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest {
	r.enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest = &enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest
	return r
}

func (r ApiEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseExecute(r)
}

/*
EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise Set organization access for a self-hosted runner group in an enterprise

Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerGroupId Unique identifier of the self-hosted runner group.
 @return ApiEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise(ctx context.Context, enterprise string, runnerGroupId int32) ApiEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest {
	return ApiEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerGroupId: runnerGroupId,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseExecute(r ApiEnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_group_id"+"}", url.PathEscape(parameterToString(r.runnerGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest == nil {
		return nil, reportError("enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest *EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest
}

func (r ApiEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest(enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) ApiEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest {
	r.enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest = &enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest
	return r
}

func (r ApiEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseExecute(r)
}

/*
EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise Set selected organizations enabled for GitHub Actions in an enterprise

Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."

You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(ctx context.Context, enterprise string) ApiEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest {
	return ApiEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseExecute(r ApiEnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/permissions/organizations"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest == nil {
		return nil, reportError("enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerGroupId int32
	enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest *EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest
}

func (r ApiEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest) EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest(enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest) ApiEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest {
	r.enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest = &enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest
	return r
}

func (r ApiEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest) Execute() (*http.Response, error) {
	return r.ApiService.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseExecute(r)
}

/*
EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise Set self-hosted runners in a group for an enterprise

Replaces the list of self-hosted runners that are part of an enterprise runner group.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerGroupId Unique identifier of the self-hosted runner group.
 @return ApiEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise(ctx context.Context, enterprise string, runnerGroupId int32) ApiEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest {
	return ApiEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerGroupId: runnerGroupId,
	}
}

// Execute executes the request
func (a *EnterpriseAdminApiService) EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseExecute(r ApiEnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterprise")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_group_id"+"}", url.PathEscape(parameterToString(r.runnerGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest == nil {
		return nil, reportError("enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEnterpriseAdminUpdateAttributeForEnterpriseGroupRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	scimGroupId string
	enterpriseAdminUpdateAttributeForEnterpriseGroupRequest *EnterpriseAdminUpdateAttributeForEnterpriseGroupRequest
}

func (r ApiEnterpriseAdminUpdateAttributeForEnterpriseGroupRequest) EnterpriseAdminUpdateAttributeForEnterpriseGroupRequest(enterpriseAdminUpdateAttributeForEnterpriseGroupRequest EnterpriseAdminUpdateAttributeForEnterpriseGroupRequest) ApiEnterpriseAdminUpdateAttributeForEnterpriseGroupRequest {
	r.enterpriseAdminUpdateAttributeForEnterpriseGroupRequest = &enterpriseAdminUpdateAttributeForEnterpriseGroupRequest
	return r
}

func (r ApiEnterpriseAdminUpdateAttributeForEnterpriseGroupRequest) Execute() (*ScimEnterpriseGroup, *http.Response, error) {
	return r.ApiService.EnterpriseAdminUpdateAttributeForEnterpriseGroupExecute(r)
}

/*
EnterpriseAdminUpdateAttributeForEnterpriseGroup Update an attribute for a SCIM enterprise group

**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param scimGroupId Identifier generated by the GitHub SCIM endpoint.
 @return ApiEnterpriseAdminUpdateAttributeForEnterpriseGroupRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminUpdateAttributeForEnterpriseGroup(ctx context.Context, enterprise string, scimGroupId string) ApiEnterpriseAdminUpdateAttributeForEnterpriseGroupRequest {
	return ApiEnterpriseAdminUpdateAttributeForEnterpriseGroupRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		scimGroupId: scimGroupId,
	}
}

// Execute executes the request
//  @return ScimEnterpriseGroup
func (a *EnterpriseAdminApiService) EnterpriseAdminUpdateAttributeForEnterpriseGroupExecute(r ApiEnterpriseAdminUpdateAttributeForEnterpriseGroupRequest) (*ScimEnterpriseGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScimEnterpriseGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminUpdateAttributeForEnterpriseGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim_group_id"+"}", url.PathEscape(parameterToString(r.scimGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminUpdateAttributeForEnterpriseGroupRequest == nil {
		return localVarReturnValue, nil, reportError("enterpriseAdminUpdateAttributeForEnterpriseGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminUpdateAttributeForEnterpriseGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminUpdateAttributeForEnterpriseUserRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	scimUserId string
	enterpriseAdminUpdateAttributeForEnterpriseUserRequest *EnterpriseAdminUpdateAttributeForEnterpriseUserRequest
}

func (r ApiEnterpriseAdminUpdateAttributeForEnterpriseUserRequest) EnterpriseAdminUpdateAttributeForEnterpriseUserRequest(enterpriseAdminUpdateAttributeForEnterpriseUserRequest EnterpriseAdminUpdateAttributeForEnterpriseUserRequest) ApiEnterpriseAdminUpdateAttributeForEnterpriseUserRequest {
	r.enterpriseAdminUpdateAttributeForEnterpriseUserRequest = &enterpriseAdminUpdateAttributeForEnterpriseUserRequest
	return r
}

func (r ApiEnterpriseAdminUpdateAttributeForEnterpriseUserRequest) Execute() (*ScimEnterpriseUser, *http.Response, error) {
	return r.ApiService.EnterpriseAdminUpdateAttributeForEnterpriseUserExecute(r)
}

/*
EnterpriseAdminUpdateAttributeForEnterpriseUser Update an attribute for a SCIM enterprise user

**Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.

Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).

**Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.

**Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.

```
{
  "Operations":[{
    "op":"replace",
    "value":{
      "active":false
    }
  }]
}
```

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param scimUserId The unique identifier of the SCIM user.
 @return ApiEnterpriseAdminUpdateAttributeForEnterpriseUserRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminUpdateAttributeForEnterpriseUser(ctx context.Context, enterprise string, scimUserId string) ApiEnterpriseAdminUpdateAttributeForEnterpriseUserRequest {
	return ApiEnterpriseAdminUpdateAttributeForEnterpriseUserRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		scimUserId: scimUserId,
	}
}

// Execute executes the request
//  @return ScimEnterpriseUser
func (a *EnterpriseAdminApiService) EnterpriseAdminUpdateAttributeForEnterpriseUserExecute(r ApiEnterpriseAdminUpdateAttributeForEnterpriseUserRequest) (*ScimEnterpriseUser, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScimEnterpriseUser
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminUpdateAttributeForEnterpriseUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"scim_user_id"+"}", url.PathEscape(parameterToString(r.scimUserId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enterpriseAdminUpdateAttributeForEnterpriseUserRequest == nil {
		return localVarReturnValue, nil, reportError("enterpriseAdminUpdateAttributeForEnterpriseUserRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminUpdateAttributeForEnterpriseUserRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest struct {
	ctx context.Context
	ApiService *EnterpriseAdminApiService
	enterprise string
	runnerGroupId int32
	enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest *EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest
}

func (r ApiEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest) EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest(enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest) ApiEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest {
	r.enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest = &enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest
	return r
}

func (r ApiEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest) Execute() (*RunnerGroupsEnterprise, *http.Response, error) {
	return r.ApiService.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseExecute(r)
}

/*
EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise Update a self-hosted runner group for an enterprise

Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.

You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @param runnerGroupId Unique identifier of the self-hosted runner group.
 @return ApiEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest
*/
func (a *EnterpriseAdminApiService) EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise(ctx context.Context, enterprise string, runnerGroupId int32) ApiEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest {
	return ApiEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
		runnerGroupId: runnerGroupId,
	}
}

// Execute executes the request
//  @return RunnerGroupsEnterprise
func (a *EnterpriseAdminApiService) EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseExecute(r ApiEnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest) (*RunnerGroupsEnterprise, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RunnerGroupsEnterprise
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnterpriseAdminApiService.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"runner_group_id"+"}", url.PathEscape(parameterToString(r.runnerGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
