/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// Dependency A single package dependency.
type Dependency struct {
	// Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
	PackageUrl *string `json:"package_url,omitempty"`
	// User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
	Metadata *map[string]Metadata1 `json:"metadata,omitempty"`
	// A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
	Relationship *string `json:"relationship,omitempty"`
	// A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
	Scope *string `json:"scope,omitempty"`
	// Array of package-url (PURLs) of direct child dependencies.
	Dependencies []string `json:"dependencies,omitempty"`
}

// NewDependency instantiates a new Dependency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependency() *Dependency {
	this := Dependency{}
	return &this
}

// NewDependencyWithDefaults instantiates a new Dependency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependencyWithDefaults() *Dependency {
	this := Dependency{}
	return &this
}

// GetPackageUrl returns the PackageUrl field value if set, zero value otherwise.
func (o *Dependency) GetPackageUrl() string {
	if o == nil || o.PackageUrl == nil {
		var ret string
		return ret
	}
	return *o.PackageUrl
}

// GetPackageUrlOk returns a tuple with the PackageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dependency) GetPackageUrlOk() (*string, bool) {
	if o == nil || o.PackageUrl == nil {
		return nil, false
	}
	return o.PackageUrl, true
}

// HasPackageUrl returns a boolean if a field has been set.
func (o *Dependency) HasPackageUrl() bool {
	if o != nil && o.PackageUrl != nil {
		return true
	}

	return false
}

// SetPackageUrl gets a reference to the given string and assigns it to the PackageUrl field.
func (o *Dependency) SetPackageUrl(v string) {
	o.PackageUrl = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Dependency) GetMetadata() map[string]Metadata1 {
	if o == nil || o.Metadata == nil {
		var ret map[string]Metadata1
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dependency) GetMetadataOk() (*map[string]Metadata1, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Dependency) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]Metadata1 and assigns it to the Metadata field.
func (o *Dependency) SetMetadata(v map[string]Metadata1) {
	o.Metadata = &v
}

// GetRelationship returns the Relationship field value if set, zero value otherwise.
func (o *Dependency) GetRelationship() string {
	if o == nil || o.Relationship == nil {
		var ret string
		return ret
	}
	return *o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dependency) GetRelationshipOk() (*string, bool) {
	if o == nil || o.Relationship == nil {
		return nil, false
	}
	return o.Relationship, true
}

// HasRelationship returns a boolean if a field has been set.
func (o *Dependency) HasRelationship() bool {
	if o != nil && o.Relationship != nil {
		return true
	}

	return false
}

// SetRelationship gets a reference to the given string and assigns it to the Relationship field.
func (o *Dependency) SetRelationship(v string) {
	o.Relationship = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *Dependency) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dependency) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *Dependency) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *Dependency) SetScope(v string) {
	o.Scope = &v
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise.
func (o *Dependency) GetDependencies() []string {
	if o == nil || o.Dependencies == nil {
		var ret []string
		return ret
	}
	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dependency) GetDependenciesOk() ([]string, bool) {
	if o == nil || o.Dependencies == nil {
		return nil, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *Dependency) HasDependencies() bool {
	if o != nil && o.Dependencies != nil {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given []string and assigns it to the Dependencies field.
func (o *Dependency) SetDependencies(v []string) {
	o.Dependencies = v
}

func (o Dependency) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PackageUrl != nil {
		toSerialize["package_url"] = o.PackageUrl
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Relationship != nil {
		toSerialize["relationship"] = o.Relationship
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.Dependencies != nil {
		toSerialize["dependencies"] = o.Dependencies
	}
	return json.Marshal(toSerialize)
}

type NullableDependency struct {
	value *Dependency
	isSet bool
}

func (v NullableDependency) Get() *Dependency {
	return v.value
}

func (v *NullableDependency) Set(val *Dependency) {
	v.value = val
	v.isSet = true
}

func (v NullableDependency) IsSet() bool {
	return v.isSet
}

func (v *NullableDependency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependency(val *Dependency) *NullableDependency {
	return &NullableDependency{value: val, isSet: true}
}

func (v NullableDependency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


