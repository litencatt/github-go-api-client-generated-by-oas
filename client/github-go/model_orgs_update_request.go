/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// OrgsUpdateRequest struct for OrgsUpdateRequest
type OrgsUpdateRequest struct {
	// Billing email address. This address is not publicized.
	BillingEmail *string `json:"billing_email,omitempty"`
	// The company name.
	Company *string `json:"company,omitempty"`
	// The publicly visible email address.
	Email *string `json:"email,omitempty"`
	// The Twitter username of the company.
	TwitterUsername *string `json:"twitter_username,omitempty"`
	// The location.
	Location *string `json:"location,omitempty"`
	// The shorthand name of the company.
	Name *string `json:"name,omitempty"`
	// The description of the company.
	Description *string `json:"description,omitempty"`
	// Whether an organization can use organization projects.
	HasOrganizationProjects *bool `json:"has_organization_projects,omitempty"`
	// Whether repositories that belong to the organization can use repository projects.
	HasRepositoryProjects *bool `json:"has_repository_projects,omitempty"`
	// Default permission level members have for organization repositories.
	DefaultRepositoryPermission *string `json:"default_repository_permission,omitempty"`
	// Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
	MembersCanCreateRepositories *bool `json:"members_can_create_repositories,omitempty"`
	// Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.
	MembersCanCreateInternalRepositories *bool `json:"members_can_create_internal_repositories,omitempty"`
	// Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.
	MembersCanCreatePrivateRepositories *bool `json:"members_can_create_private_repositories,omitempty"`
	// Whether organization members can create public repositories, which are visible to anyone. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.
	MembersCanCreatePublicRepositories *bool `json:"members_can_create_public_repositories,omitempty"`
	// Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
	MembersAllowedRepositoryCreationType *string `json:"members_allowed_repository_creation_type,omitempty"`
	// Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
	MembersCanCreatePages *bool `json:"members_can_create_pages,omitempty"`
	// Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
	MembersCanCreatePublicPages *bool `json:"members_can_create_public_pages,omitempty"`
	// Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
	MembersCanCreatePrivatePages *bool `json:"members_can_create_private_pages,omitempty"`
	// Whether organization members can fork private organization repositories.
	MembersCanForkPrivateRepositories *bool `json:"members_can_fork_private_repositories,omitempty"`
	Blog *string `json:"blog,omitempty"`
}

// NewOrgsUpdateRequest instantiates a new OrgsUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgsUpdateRequest() *OrgsUpdateRequest {
	this := OrgsUpdateRequest{}
	var defaultRepositoryPermission string = "read"
	this.DefaultRepositoryPermission = &defaultRepositoryPermission
	var membersCanCreateRepositories bool = true
	this.MembersCanCreateRepositories = &membersCanCreateRepositories
	var membersCanCreatePages bool = true
	this.MembersCanCreatePages = &membersCanCreatePages
	var membersCanCreatePublicPages bool = true
	this.MembersCanCreatePublicPages = &membersCanCreatePublicPages
	var membersCanCreatePrivatePages bool = true
	this.MembersCanCreatePrivatePages = &membersCanCreatePrivatePages
	var membersCanForkPrivateRepositories bool = false
	this.MembersCanForkPrivateRepositories = &membersCanForkPrivateRepositories
	return &this
}

// NewOrgsUpdateRequestWithDefaults instantiates a new OrgsUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgsUpdateRequestWithDefaults() *OrgsUpdateRequest {
	this := OrgsUpdateRequest{}
	var defaultRepositoryPermission string = "read"
	this.DefaultRepositoryPermission = &defaultRepositoryPermission
	var membersCanCreateRepositories bool = true
	this.MembersCanCreateRepositories = &membersCanCreateRepositories
	var membersCanCreatePages bool = true
	this.MembersCanCreatePages = &membersCanCreatePages
	var membersCanCreatePublicPages bool = true
	this.MembersCanCreatePublicPages = &membersCanCreatePublicPages
	var membersCanCreatePrivatePages bool = true
	this.MembersCanCreatePrivatePages = &membersCanCreatePrivatePages
	var membersCanForkPrivateRepositories bool = false
	this.MembersCanForkPrivateRepositories = &membersCanForkPrivateRepositories
	return &this
}

// GetBillingEmail returns the BillingEmail field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetBillingEmail() string {
	if o == nil || o.BillingEmail == nil {
		var ret string
		return ret
	}
	return *o.BillingEmail
}

// GetBillingEmailOk returns a tuple with the BillingEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetBillingEmailOk() (*string, bool) {
	if o == nil || o.BillingEmail == nil {
		return nil, false
	}
	return o.BillingEmail, true
}

// HasBillingEmail returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasBillingEmail() bool {
	if o != nil && o.BillingEmail != nil {
		return true
	}

	return false
}

// SetBillingEmail gets a reference to the given string and assigns it to the BillingEmail field.
func (o *OrgsUpdateRequest) SetBillingEmail(v string) {
	o.BillingEmail = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetCompany() string {
	if o == nil || o.Company == nil {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetCompanyOk() (*string, bool) {
	if o == nil || o.Company == nil {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasCompany() bool {
	if o != nil && o.Company != nil {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *OrgsUpdateRequest) SetCompany(v string) {
	o.Company = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *OrgsUpdateRequest) SetEmail(v string) {
	o.Email = &v
}

// GetTwitterUsername returns the TwitterUsername field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetTwitterUsername() string {
	if o == nil || o.TwitterUsername == nil {
		var ret string
		return ret
	}
	return *o.TwitterUsername
}

// GetTwitterUsernameOk returns a tuple with the TwitterUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetTwitterUsernameOk() (*string, bool) {
	if o == nil || o.TwitterUsername == nil {
		return nil, false
	}
	return o.TwitterUsername, true
}

// HasTwitterUsername returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasTwitterUsername() bool {
	if o != nil && o.TwitterUsername != nil {
		return true
	}

	return false
}

// SetTwitterUsername gets a reference to the given string and assigns it to the TwitterUsername field.
func (o *OrgsUpdateRequest) SetTwitterUsername(v string) {
	o.TwitterUsername = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *OrgsUpdateRequest) SetLocation(v string) {
	o.Location = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrgsUpdateRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OrgsUpdateRequest) SetDescription(v string) {
	o.Description = &v
}

// GetHasOrganizationProjects returns the HasOrganizationProjects field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetHasOrganizationProjects() bool {
	if o == nil || o.HasOrganizationProjects == nil {
		var ret bool
		return ret
	}
	return *o.HasOrganizationProjects
}

// GetHasOrganizationProjectsOk returns a tuple with the HasOrganizationProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetHasOrganizationProjectsOk() (*bool, bool) {
	if o == nil || o.HasOrganizationProjects == nil {
		return nil, false
	}
	return o.HasOrganizationProjects, true
}

// HasHasOrganizationProjects returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasHasOrganizationProjects() bool {
	if o != nil && o.HasOrganizationProjects != nil {
		return true
	}

	return false
}

// SetHasOrganizationProjects gets a reference to the given bool and assigns it to the HasOrganizationProjects field.
func (o *OrgsUpdateRequest) SetHasOrganizationProjects(v bool) {
	o.HasOrganizationProjects = &v
}

// GetHasRepositoryProjects returns the HasRepositoryProjects field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetHasRepositoryProjects() bool {
	if o == nil || o.HasRepositoryProjects == nil {
		var ret bool
		return ret
	}
	return *o.HasRepositoryProjects
}

// GetHasRepositoryProjectsOk returns a tuple with the HasRepositoryProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetHasRepositoryProjectsOk() (*bool, bool) {
	if o == nil || o.HasRepositoryProjects == nil {
		return nil, false
	}
	return o.HasRepositoryProjects, true
}

// HasHasRepositoryProjects returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasHasRepositoryProjects() bool {
	if o != nil && o.HasRepositoryProjects != nil {
		return true
	}

	return false
}

// SetHasRepositoryProjects gets a reference to the given bool and assigns it to the HasRepositoryProjects field.
func (o *OrgsUpdateRequest) SetHasRepositoryProjects(v bool) {
	o.HasRepositoryProjects = &v
}

// GetDefaultRepositoryPermission returns the DefaultRepositoryPermission field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetDefaultRepositoryPermission() string {
	if o == nil || o.DefaultRepositoryPermission == nil {
		var ret string
		return ret
	}
	return *o.DefaultRepositoryPermission
}

// GetDefaultRepositoryPermissionOk returns a tuple with the DefaultRepositoryPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetDefaultRepositoryPermissionOk() (*string, bool) {
	if o == nil || o.DefaultRepositoryPermission == nil {
		return nil, false
	}
	return o.DefaultRepositoryPermission, true
}

// HasDefaultRepositoryPermission returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasDefaultRepositoryPermission() bool {
	if o != nil && o.DefaultRepositoryPermission != nil {
		return true
	}

	return false
}

// SetDefaultRepositoryPermission gets a reference to the given string and assigns it to the DefaultRepositoryPermission field.
func (o *OrgsUpdateRequest) SetDefaultRepositoryPermission(v string) {
	o.DefaultRepositoryPermission = &v
}

// GetMembersCanCreateRepositories returns the MembersCanCreateRepositories field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetMembersCanCreateRepositories() bool {
	if o == nil || o.MembersCanCreateRepositories == nil {
		var ret bool
		return ret
	}
	return *o.MembersCanCreateRepositories
}

// GetMembersCanCreateRepositoriesOk returns a tuple with the MembersCanCreateRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetMembersCanCreateRepositoriesOk() (*bool, bool) {
	if o == nil || o.MembersCanCreateRepositories == nil {
		return nil, false
	}
	return o.MembersCanCreateRepositories, true
}

// HasMembersCanCreateRepositories returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasMembersCanCreateRepositories() bool {
	if o != nil && o.MembersCanCreateRepositories != nil {
		return true
	}

	return false
}

// SetMembersCanCreateRepositories gets a reference to the given bool and assigns it to the MembersCanCreateRepositories field.
func (o *OrgsUpdateRequest) SetMembersCanCreateRepositories(v bool) {
	o.MembersCanCreateRepositories = &v
}

// GetMembersCanCreateInternalRepositories returns the MembersCanCreateInternalRepositories field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetMembersCanCreateInternalRepositories() bool {
	if o == nil || o.MembersCanCreateInternalRepositories == nil {
		var ret bool
		return ret
	}
	return *o.MembersCanCreateInternalRepositories
}

// GetMembersCanCreateInternalRepositoriesOk returns a tuple with the MembersCanCreateInternalRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetMembersCanCreateInternalRepositoriesOk() (*bool, bool) {
	if o == nil || o.MembersCanCreateInternalRepositories == nil {
		return nil, false
	}
	return o.MembersCanCreateInternalRepositories, true
}

// HasMembersCanCreateInternalRepositories returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasMembersCanCreateInternalRepositories() bool {
	if o != nil && o.MembersCanCreateInternalRepositories != nil {
		return true
	}

	return false
}

// SetMembersCanCreateInternalRepositories gets a reference to the given bool and assigns it to the MembersCanCreateInternalRepositories field.
func (o *OrgsUpdateRequest) SetMembersCanCreateInternalRepositories(v bool) {
	o.MembersCanCreateInternalRepositories = &v
}

// GetMembersCanCreatePrivateRepositories returns the MembersCanCreatePrivateRepositories field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetMembersCanCreatePrivateRepositories() bool {
	if o == nil || o.MembersCanCreatePrivateRepositories == nil {
		var ret bool
		return ret
	}
	return *o.MembersCanCreatePrivateRepositories
}

// GetMembersCanCreatePrivateRepositoriesOk returns a tuple with the MembersCanCreatePrivateRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetMembersCanCreatePrivateRepositoriesOk() (*bool, bool) {
	if o == nil || o.MembersCanCreatePrivateRepositories == nil {
		return nil, false
	}
	return o.MembersCanCreatePrivateRepositories, true
}

// HasMembersCanCreatePrivateRepositories returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasMembersCanCreatePrivateRepositories() bool {
	if o != nil && o.MembersCanCreatePrivateRepositories != nil {
		return true
	}

	return false
}

// SetMembersCanCreatePrivateRepositories gets a reference to the given bool and assigns it to the MembersCanCreatePrivateRepositories field.
func (o *OrgsUpdateRequest) SetMembersCanCreatePrivateRepositories(v bool) {
	o.MembersCanCreatePrivateRepositories = &v
}

// GetMembersCanCreatePublicRepositories returns the MembersCanCreatePublicRepositories field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetMembersCanCreatePublicRepositories() bool {
	if o == nil || o.MembersCanCreatePublicRepositories == nil {
		var ret bool
		return ret
	}
	return *o.MembersCanCreatePublicRepositories
}

// GetMembersCanCreatePublicRepositoriesOk returns a tuple with the MembersCanCreatePublicRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetMembersCanCreatePublicRepositoriesOk() (*bool, bool) {
	if o == nil || o.MembersCanCreatePublicRepositories == nil {
		return nil, false
	}
	return o.MembersCanCreatePublicRepositories, true
}

// HasMembersCanCreatePublicRepositories returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasMembersCanCreatePublicRepositories() bool {
	if o != nil && o.MembersCanCreatePublicRepositories != nil {
		return true
	}

	return false
}

// SetMembersCanCreatePublicRepositories gets a reference to the given bool and assigns it to the MembersCanCreatePublicRepositories field.
func (o *OrgsUpdateRequest) SetMembersCanCreatePublicRepositories(v bool) {
	o.MembersCanCreatePublicRepositories = &v
}

// GetMembersAllowedRepositoryCreationType returns the MembersAllowedRepositoryCreationType field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetMembersAllowedRepositoryCreationType() string {
	if o == nil || o.MembersAllowedRepositoryCreationType == nil {
		var ret string
		return ret
	}
	return *o.MembersAllowedRepositoryCreationType
}

// GetMembersAllowedRepositoryCreationTypeOk returns a tuple with the MembersAllowedRepositoryCreationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetMembersAllowedRepositoryCreationTypeOk() (*string, bool) {
	if o == nil || o.MembersAllowedRepositoryCreationType == nil {
		return nil, false
	}
	return o.MembersAllowedRepositoryCreationType, true
}

// HasMembersAllowedRepositoryCreationType returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasMembersAllowedRepositoryCreationType() bool {
	if o != nil && o.MembersAllowedRepositoryCreationType != nil {
		return true
	}

	return false
}

// SetMembersAllowedRepositoryCreationType gets a reference to the given string and assigns it to the MembersAllowedRepositoryCreationType field.
func (o *OrgsUpdateRequest) SetMembersAllowedRepositoryCreationType(v string) {
	o.MembersAllowedRepositoryCreationType = &v
}

// GetMembersCanCreatePages returns the MembersCanCreatePages field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetMembersCanCreatePages() bool {
	if o == nil || o.MembersCanCreatePages == nil {
		var ret bool
		return ret
	}
	return *o.MembersCanCreatePages
}

// GetMembersCanCreatePagesOk returns a tuple with the MembersCanCreatePages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetMembersCanCreatePagesOk() (*bool, bool) {
	if o == nil || o.MembersCanCreatePages == nil {
		return nil, false
	}
	return o.MembersCanCreatePages, true
}

// HasMembersCanCreatePages returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasMembersCanCreatePages() bool {
	if o != nil && o.MembersCanCreatePages != nil {
		return true
	}

	return false
}

// SetMembersCanCreatePages gets a reference to the given bool and assigns it to the MembersCanCreatePages field.
func (o *OrgsUpdateRequest) SetMembersCanCreatePages(v bool) {
	o.MembersCanCreatePages = &v
}

// GetMembersCanCreatePublicPages returns the MembersCanCreatePublicPages field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetMembersCanCreatePublicPages() bool {
	if o == nil || o.MembersCanCreatePublicPages == nil {
		var ret bool
		return ret
	}
	return *o.MembersCanCreatePublicPages
}

// GetMembersCanCreatePublicPagesOk returns a tuple with the MembersCanCreatePublicPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetMembersCanCreatePublicPagesOk() (*bool, bool) {
	if o == nil || o.MembersCanCreatePublicPages == nil {
		return nil, false
	}
	return o.MembersCanCreatePublicPages, true
}

// HasMembersCanCreatePublicPages returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasMembersCanCreatePublicPages() bool {
	if o != nil && o.MembersCanCreatePublicPages != nil {
		return true
	}

	return false
}

// SetMembersCanCreatePublicPages gets a reference to the given bool and assigns it to the MembersCanCreatePublicPages field.
func (o *OrgsUpdateRequest) SetMembersCanCreatePublicPages(v bool) {
	o.MembersCanCreatePublicPages = &v
}

// GetMembersCanCreatePrivatePages returns the MembersCanCreatePrivatePages field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetMembersCanCreatePrivatePages() bool {
	if o == nil || o.MembersCanCreatePrivatePages == nil {
		var ret bool
		return ret
	}
	return *o.MembersCanCreatePrivatePages
}

// GetMembersCanCreatePrivatePagesOk returns a tuple with the MembersCanCreatePrivatePages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetMembersCanCreatePrivatePagesOk() (*bool, bool) {
	if o == nil || o.MembersCanCreatePrivatePages == nil {
		return nil, false
	}
	return o.MembersCanCreatePrivatePages, true
}

// HasMembersCanCreatePrivatePages returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasMembersCanCreatePrivatePages() bool {
	if o != nil && o.MembersCanCreatePrivatePages != nil {
		return true
	}

	return false
}

// SetMembersCanCreatePrivatePages gets a reference to the given bool and assigns it to the MembersCanCreatePrivatePages field.
func (o *OrgsUpdateRequest) SetMembersCanCreatePrivatePages(v bool) {
	o.MembersCanCreatePrivatePages = &v
}

// GetMembersCanForkPrivateRepositories returns the MembersCanForkPrivateRepositories field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetMembersCanForkPrivateRepositories() bool {
	if o == nil || o.MembersCanForkPrivateRepositories == nil {
		var ret bool
		return ret
	}
	return *o.MembersCanForkPrivateRepositories
}

// GetMembersCanForkPrivateRepositoriesOk returns a tuple with the MembersCanForkPrivateRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetMembersCanForkPrivateRepositoriesOk() (*bool, bool) {
	if o == nil || o.MembersCanForkPrivateRepositories == nil {
		return nil, false
	}
	return o.MembersCanForkPrivateRepositories, true
}

// HasMembersCanForkPrivateRepositories returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasMembersCanForkPrivateRepositories() bool {
	if o != nil && o.MembersCanForkPrivateRepositories != nil {
		return true
	}

	return false
}

// SetMembersCanForkPrivateRepositories gets a reference to the given bool and assigns it to the MembersCanForkPrivateRepositories field.
func (o *OrgsUpdateRequest) SetMembersCanForkPrivateRepositories(v bool) {
	o.MembersCanForkPrivateRepositories = &v
}

// GetBlog returns the Blog field value if set, zero value otherwise.
func (o *OrgsUpdateRequest) GetBlog() string {
	if o == nil || o.Blog == nil {
		var ret string
		return ret
	}
	return *o.Blog
}

// GetBlogOk returns a tuple with the Blog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateRequest) GetBlogOk() (*string, bool) {
	if o == nil || o.Blog == nil {
		return nil, false
	}
	return o.Blog, true
}

// HasBlog returns a boolean if a field has been set.
func (o *OrgsUpdateRequest) HasBlog() bool {
	if o != nil && o.Blog != nil {
		return true
	}

	return false
}

// SetBlog gets a reference to the given string and assigns it to the Blog field.
func (o *OrgsUpdateRequest) SetBlog(v string) {
	o.Blog = &v
}

func (o OrgsUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BillingEmail != nil {
		toSerialize["billing_email"] = o.BillingEmail
	}
	if o.Company != nil {
		toSerialize["company"] = o.Company
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.TwitterUsername != nil {
		toSerialize["twitter_username"] = o.TwitterUsername
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.HasOrganizationProjects != nil {
		toSerialize["has_organization_projects"] = o.HasOrganizationProjects
	}
	if o.HasRepositoryProjects != nil {
		toSerialize["has_repository_projects"] = o.HasRepositoryProjects
	}
	if o.DefaultRepositoryPermission != nil {
		toSerialize["default_repository_permission"] = o.DefaultRepositoryPermission
	}
	if o.MembersCanCreateRepositories != nil {
		toSerialize["members_can_create_repositories"] = o.MembersCanCreateRepositories
	}
	if o.MembersCanCreateInternalRepositories != nil {
		toSerialize["members_can_create_internal_repositories"] = o.MembersCanCreateInternalRepositories
	}
	if o.MembersCanCreatePrivateRepositories != nil {
		toSerialize["members_can_create_private_repositories"] = o.MembersCanCreatePrivateRepositories
	}
	if o.MembersCanCreatePublicRepositories != nil {
		toSerialize["members_can_create_public_repositories"] = o.MembersCanCreatePublicRepositories
	}
	if o.MembersAllowedRepositoryCreationType != nil {
		toSerialize["members_allowed_repository_creation_type"] = o.MembersAllowedRepositoryCreationType
	}
	if o.MembersCanCreatePages != nil {
		toSerialize["members_can_create_pages"] = o.MembersCanCreatePages
	}
	if o.MembersCanCreatePublicPages != nil {
		toSerialize["members_can_create_public_pages"] = o.MembersCanCreatePublicPages
	}
	if o.MembersCanCreatePrivatePages != nil {
		toSerialize["members_can_create_private_pages"] = o.MembersCanCreatePrivatePages
	}
	if o.MembersCanForkPrivateRepositories != nil {
		toSerialize["members_can_fork_private_repositories"] = o.MembersCanForkPrivateRepositories
	}
	if o.Blog != nil {
		toSerialize["blog"] = o.Blog
	}
	return json.Marshal(toSerialize)
}

type NullableOrgsUpdateRequest struct {
	value *OrgsUpdateRequest
	isSet bool
}

func (v NullableOrgsUpdateRequest) Get() *OrgsUpdateRequest {
	return v.value
}

func (v *NullableOrgsUpdateRequest) Set(val *OrgsUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgsUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgsUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgsUpdateRequest(val *OrgsUpdateRequest) *NullableOrgsUpdateRequest {
	return &NullableOrgsUpdateRequest{value: val, isSet: true}
}

func (v NullableOrgsUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgsUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


