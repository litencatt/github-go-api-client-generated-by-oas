/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// GitTreeTreeInner struct for GitTreeTreeInner
type GitTreeTreeInner struct {
	Path *string `json:"path,omitempty"`
	Mode *string `json:"mode,omitempty"`
	Type *string `json:"type,omitempty"`
	Sha *string `json:"sha,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewGitTreeTreeInner instantiates a new GitTreeTreeInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitTreeTreeInner() *GitTreeTreeInner {
	this := GitTreeTreeInner{}
	return &this
}

// NewGitTreeTreeInnerWithDefaults instantiates a new GitTreeTreeInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitTreeTreeInnerWithDefaults() *GitTreeTreeInner {
	this := GitTreeTreeInner{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *GitTreeTreeInner) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitTreeTreeInner) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *GitTreeTreeInner) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *GitTreeTreeInner) SetPath(v string) {
	o.Path = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *GitTreeTreeInner) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitTreeTreeInner) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *GitTreeTreeInner) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *GitTreeTreeInner) SetMode(v string) {
	o.Mode = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GitTreeTreeInner) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitTreeTreeInner) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GitTreeTreeInner) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GitTreeTreeInner) SetType(v string) {
	o.Type = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *GitTreeTreeInner) GetSha() string {
	if o == nil || o.Sha == nil {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitTreeTreeInner) GetShaOk() (*string, bool) {
	if o == nil || o.Sha == nil {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *GitTreeTreeInner) HasSha() bool {
	if o != nil && o.Sha != nil {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *GitTreeTreeInner) SetSha(v string) {
	o.Sha = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *GitTreeTreeInner) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitTreeTreeInner) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *GitTreeTreeInner) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *GitTreeTreeInner) SetSize(v int32) {
	o.Size = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GitTreeTreeInner) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitTreeTreeInner) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GitTreeTreeInner) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GitTreeTreeInner) SetUrl(v string) {
	o.Url = &v
}

func (o GitTreeTreeInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Sha != nil {
		toSerialize["sha"] = o.Sha
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableGitTreeTreeInner struct {
	value *GitTreeTreeInner
	isSet bool
}

func (v NullableGitTreeTreeInner) Get() *GitTreeTreeInner {
	return v.value
}

func (v *NullableGitTreeTreeInner) Set(val *GitTreeTreeInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGitTreeTreeInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGitTreeTreeInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitTreeTreeInner(val *GitTreeTreeInner) *NullableGitTreeTreeInner {
	return &NullableGitTreeTreeInner{value: val, isSet: true}
}

func (v NullableGitTreeTreeInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitTreeTreeInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


