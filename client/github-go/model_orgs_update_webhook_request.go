/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// OrgsUpdateWebhookRequest struct for OrgsUpdateWebhookRequest
type OrgsUpdateWebhookRequest struct {
	Config *OrgsUpdateWebhookRequestConfig `json:"config,omitempty"`
	// Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
	Events []string `json:"events,omitempty"`
	// Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
	Active *bool `json:"active,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewOrgsUpdateWebhookRequest instantiates a new OrgsUpdateWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgsUpdateWebhookRequest() *OrgsUpdateWebhookRequest {
	this := OrgsUpdateWebhookRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// NewOrgsUpdateWebhookRequestWithDefaults instantiates a new OrgsUpdateWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgsUpdateWebhookRequestWithDefaults() *OrgsUpdateWebhookRequest {
	this := OrgsUpdateWebhookRequest{}
	var active bool = true
	this.Active = &active
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *OrgsUpdateWebhookRequest) GetConfig() OrgsUpdateWebhookRequestConfig {
	if o == nil || o.Config == nil {
		var ret OrgsUpdateWebhookRequestConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateWebhookRequest) GetConfigOk() (*OrgsUpdateWebhookRequestConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *OrgsUpdateWebhookRequest) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given OrgsUpdateWebhookRequestConfig and assigns it to the Config field.
func (o *OrgsUpdateWebhookRequest) SetConfig(v OrgsUpdateWebhookRequestConfig) {
	o.Config = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *OrgsUpdateWebhookRequest) GetEvents() []string {
	if o == nil || o.Events == nil {
		var ret []string
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateWebhookRequest) GetEventsOk() ([]string, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *OrgsUpdateWebhookRequest) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []string and assigns it to the Events field.
func (o *OrgsUpdateWebhookRequest) SetEvents(v []string) {
	o.Events = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *OrgsUpdateWebhookRequest) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateWebhookRequest) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *OrgsUpdateWebhookRequest) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *OrgsUpdateWebhookRequest) SetActive(v bool) {
	o.Active = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrgsUpdateWebhookRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgsUpdateWebhookRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrgsUpdateWebhookRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrgsUpdateWebhookRequest) SetName(v string) {
	o.Name = &v
}

func (o OrgsUpdateWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableOrgsUpdateWebhookRequest struct {
	value *OrgsUpdateWebhookRequest
	isSet bool
}

func (v NullableOrgsUpdateWebhookRequest) Get() *OrgsUpdateWebhookRequest {
	return v.value
}

func (v *NullableOrgsUpdateWebhookRequest) Set(val *OrgsUpdateWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgsUpdateWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgsUpdateWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgsUpdateWebhookRequest(val *OrgsUpdateWebhookRequest) *NullableOrgsUpdateWebhookRequest {
	return &NullableOrgsUpdateWebhookRequest{value: val, isSet: true}
}

func (v NullableOrgsUpdateWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgsUpdateWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


