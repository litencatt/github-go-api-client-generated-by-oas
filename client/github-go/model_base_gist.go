/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// BaseGist Base Gist
type BaseGist struct {
	Url string `json:"url"`
	ForksUrl string `json:"forks_url"`
	CommitsUrl string `json:"commits_url"`
	Id string `json:"id"`
	NodeId string `json:"node_id"`
	GitPullUrl string `json:"git_pull_url"`
	GitPushUrl string `json:"git_push_url"`
	HtmlUrl string `json:"html_url"`
	Files map[string]BaseGistFilesValue `json:"files"`
	Public bool `json:"public"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Description NullableString `json:"description"`
	Comments int32 `json:"comments"`
	User NullableNullableSimpleUser `json:"user"`
	CommentsUrl string `json:"comments_url"`
	Owner *SimpleUser `json:"owner,omitempty"`
	Truncated *bool `json:"truncated,omitempty"`
	Forks []interface{} `json:"forks,omitempty"`
	History []interface{} `json:"history,omitempty"`
}

// NewBaseGist instantiates a new BaseGist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseGist(url string, forksUrl string, commitsUrl string, id string, nodeId string, gitPullUrl string, gitPushUrl string, htmlUrl string, files map[string]BaseGistFilesValue, public bool, createdAt time.Time, updatedAt time.Time, description NullableString, comments int32, user NullableNullableSimpleUser, commentsUrl string) *BaseGist {
	this := BaseGist{}
	this.Url = url
	this.ForksUrl = forksUrl
	this.CommitsUrl = commitsUrl
	this.Id = id
	this.NodeId = nodeId
	this.GitPullUrl = gitPullUrl
	this.GitPushUrl = gitPushUrl
	this.HtmlUrl = htmlUrl
	this.Files = files
	this.Public = public
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Description = description
	this.Comments = comments
	this.User = user
	this.CommentsUrl = commentsUrl
	return &this
}

// NewBaseGistWithDefaults instantiates a new BaseGist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseGistWithDefaults() *BaseGist {
	this := BaseGist{}
	return &this
}

// GetUrl returns the Url field value
func (o *BaseGist) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *BaseGist) SetUrl(v string) {
	o.Url = v
}

// GetForksUrl returns the ForksUrl field value
func (o *BaseGist) GetForksUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForksUrl
}

// GetForksUrlOk returns a tuple with the ForksUrl field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetForksUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForksUrl, true
}

// SetForksUrl sets field value
func (o *BaseGist) SetForksUrl(v string) {
	o.ForksUrl = v
}

// GetCommitsUrl returns the CommitsUrl field value
func (o *BaseGist) GetCommitsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitsUrl
}

// GetCommitsUrlOk returns a tuple with the CommitsUrl field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetCommitsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitsUrl, true
}

// SetCommitsUrl sets field value
func (o *BaseGist) SetCommitsUrl(v string) {
	o.CommitsUrl = v
}

// GetId returns the Id field value
func (o *BaseGist) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BaseGist) SetId(v string) {
	o.Id = v
}

// GetNodeId returns the NodeId field value
func (o *BaseGist) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *BaseGist) SetNodeId(v string) {
	o.NodeId = v
}

// GetGitPullUrl returns the GitPullUrl field value
func (o *BaseGist) GetGitPullUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitPullUrl
}

// GetGitPullUrlOk returns a tuple with the GitPullUrl field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetGitPullUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitPullUrl, true
}

// SetGitPullUrl sets field value
func (o *BaseGist) SetGitPullUrl(v string) {
	o.GitPullUrl = v
}

// GetGitPushUrl returns the GitPushUrl field value
func (o *BaseGist) GetGitPushUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitPushUrl
}

// GetGitPushUrlOk returns a tuple with the GitPushUrl field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetGitPushUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitPushUrl, true
}

// SetGitPushUrl sets field value
func (o *BaseGist) SetGitPushUrl(v string) {
	o.GitPushUrl = v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *BaseGist) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *BaseGist) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetFiles returns the Files field value
func (o *BaseGist) GetFiles() map[string]BaseGistFilesValue {
	if o == nil {
		var ret map[string]BaseGistFilesValue
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetFilesOk() (*map[string]BaseGistFilesValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Files, true
}

// SetFiles sets field value
func (o *BaseGist) SetFiles(v map[string]BaseGistFilesValue) {
	o.Files = v
}

// GetPublic returns the Public field value
func (o *BaseGist) GetPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Public
}

// GetPublicOk returns a tuple with the Public field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Public, true
}

// SetPublic sets field value
func (o *BaseGist) SetPublic(v bool) {
	o.Public = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *BaseGist) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *BaseGist) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *BaseGist) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *BaseGist) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *BaseGist) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseGist) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *BaseGist) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetComments returns the Comments field value
func (o *BaseGist) GetComments() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetCommentsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comments, true
}

// SetComments sets field value
func (o *BaseGist) SetComments(v int32) {
	o.Comments = v
}

// GetUser returns the User field value
// If the value is explicit nil, the zero value for NullableSimpleUser will be returned
func (o *BaseGist) GetUser() NullableSimpleUser {
	if o == nil || o.User.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}

	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseGist) GetUserOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// SetUser sets field value
func (o *BaseGist) SetUser(v NullableSimpleUser) {
	o.User.Set(&v)
}

// GetCommentsUrl returns the CommentsUrl field value
func (o *BaseGist) GetCommentsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommentsUrl
}

// GetCommentsUrlOk returns a tuple with the CommentsUrl field value
// and a boolean to check if the value has been set.
func (o *BaseGist) GetCommentsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommentsUrl, true
}

// SetCommentsUrl sets field value
func (o *BaseGist) SetCommentsUrl(v string) {
	o.CommentsUrl = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *BaseGist) GetOwner() SimpleUser {
	if o == nil || o.Owner == nil {
		var ret SimpleUser
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseGist) GetOwnerOk() (*SimpleUser, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *BaseGist) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given SimpleUser and assigns it to the Owner field.
func (o *BaseGist) SetOwner(v SimpleUser) {
	o.Owner = &v
}

// GetTruncated returns the Truncated field value if set, zero value otherwise.
func (o *BaseGist) GetTruncated() bool {
	if o == nil || o.Truncated == nil {
		var ret bool
		return ret
	}
	return *o.Truncated
}

// GetTruncatedOk returns a tuple with the Truncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseGist) GetTruncatedOk() (*bool, bool) {
	if o == nil || o.Truncated == nil {
		return nil, false
	}
	return o.Truncated, true
}

// HasTruncated returns a boolean if a field has been set.
func (o *BaseGist) HasTruncated() bool {
	if o != nil && o.Truncated != nil {
		return true
	}

	return false
}

// SetTruncated gets a reference to the given bool and assigns it to the Truncated field.
func (o *BaseGist) SetTruncated(v bool) {
	o.Truncated = &v
}

// GetForks returns the Forks field value if set, zero value otherwise.
func (o *BaseGist) GetForks() []interface{} {
	if o == nil || o.Forks == nil {
		var ret []interface{}
		return ret
	}
	return o.Forks
}

// GetForksOk returns a tuple with the Forks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseGist) GetForksOk() ([]interface{}, bool) {
	if o == nil || o.Forks == nil {
		return nil, false
	}
	return o.Forks, true
}

// HasForks returns a boolean if a field has been set.
func (o *BaseGist) HasForks() bool {
	if o != nil && o.Forks != nil {
		return true
	}

	return false
}

// SetForks gets a reference to the given []interface{} and assigns it to the Forks field.
func (o *BaseGist) SetForks(v []interface{}) {
	o.Forks = v
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *BaseGist) GetHistory() []interface{} {
	if o == nil || o.History == nil {
		var ret []interface{}
		return ret
	}
	return o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseGist) GetHistoryOk() ([]interface{}, bool) {
	if o == nil || o.History == nil {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *BaseGist) HasHistory() bool {
	if o != nil && o.History != nil {
		return true
	}

	return false
}

// SetHistory gets a reference to the given []interface{} and assigns it to the History field.
func (o *BaseGist) SetHistory(v []interface{}) {
	o.History = v
}

func (o BaseGist) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["forks_url"] = o.ForksUrl
	}
	if true {
		toSerialize["commits_url"] = o.CommitsUrl
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if true {
		toSerialize["git_pull_url"] = o.GitPullUrl
	}
	if true {
		toSerialize["git_push_url"] = o.GitPushUrl
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if true {
		toSerialize["files"] = o.Files
	}
	if true {
		toSerialize["public"] = o.Public
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["description"] = o.Description.Get()
	}
	if true {
		toSerialize["comments"] = o.Comments
	}
	if true {
		toSerialize["user"] = o.User.Get()
	}
	if true {
		toSerialize["comments_url"] = o.CommentsUrl
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Truncated != nil {
		toSerialize["truncated"] = o.Truncated
	}
	if o.Forks != nil {
		toSerialize["forks"] = o.Forks
	}
	if o.History != nil {
		toSerialize["history"] = o.History
	}
	return json.Marshal(toSerialize)
}

type NullableBaseGist struct {
	value *BaseGist
	isSet bool
}

func (v NullableBaseGist) Get() *BaseGist {
	return v.value
}

func (v *NullableBaseGist) Set(val *BaseGist) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseGist) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseGist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseGist(val *BaseGist) *NullableBaseGist {
	return &NullableBaseGist{value: val, isSet: true}
}

func (v NullableBaseGist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseGist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


