/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// NullableScopedInstallation struct for NullableScopedInstallation
type NullableScopedInstallation struct {
	Permissions AppPermissions `json:"permissions"`
	// Describe whether all repositories have been selected or there's a selection involved
	RepositorySelection string `json:"repository_selection"`
	SingleFileName NullableString `json:"single_file_name"`
	HasMultipleSingleFiles *bool `json:"has_multiple_single_files,omitempty"`
	SingleFilePaths []string `json:"single_file_paths,omitempty"`
	RepositoriesUrl string `json:"repositories_url"`
	Account SimpleUser `json:"account"`
}

// NewNullableScopedInstallation instantiates a new NullableScopedInstallation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNullableScopedInstallation(permissions AppPermissions, repositorySelection string, singleFileName NullableString, repositoriesUrl string, account SimpleUser) *NullableScopedInstallation {
	this := NullableScopedInstallation{}
	this.Permissions = permissions
	this.RepositorySelection = repositorySelection
	this.SingleFileName = singleFileName
	this.RepositoriesUrl = repositoriesUrl
	this.Account = account
	return &this
}

// NewNullableScopedInstallationWithDefaults instantiates a new NullableScopedInstallation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNullableScopedInstallationWithDefaults() *NullableScopedInstallation {
	this := NullableScopedInstallation{}
	return &this
}

// GetPermissions returns the Permissions field value
func (o *NullableScopedInstallation) GetPermissions() AppPermissions {
	if o == nil {
		var ret AppPermissions
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *NullableScopedInstallation) GetPermissionsOk() (*AppPermissions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// SetPermissions sets field value
func (o *NullableScopedInstallation) SetPermissions(v AppPermissions) {
	o.Permissions = v
}

// GetRepositorySelection returns the RepositorySelection field value
func (o *NullableScopedInstallation) GetRepositorySelection() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositorySelection
}

// GetRepositorySelectionOk returns a tuple with the RepositorySelection field value
// and a boolean to check if the value has been set.
func (o *NullableScopedInstallation) GetRepositorySelectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositorySelection, true
}

// SetRepositorySelection sets field value
func (o *NullableScopedInstallation) SetRepositorySelection(v string) {
	o.RepositorySelection = v
}

// GetSingleFileName returns the SingleFileName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NullableScopedInstallation) GetSingleFileName() string {
	if o == nil || o.SingleFileName.Get() == nil {
		var ret string
		return ret
	}

	return *o.SingleFileName.Get()
}

// GetSingleFileNameOk returns a tuple with the SingleFileName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NullableScopedInstallation) GetSingleFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SingleFileName.Get(), o.SingleFileName.IsSet()
}

// SetSingleFileName sets field value
func (o *NullableScopedInstallation) SetSingleFileName(v string) {
	o.SingleFileName.Set(&v)
}

// GetHasMultipleSingleFiles returns the HasMultipleSingleFiles field value if set, zero value otherwise.
func (o *NullableScopedInstallation) GetHasMultipleSingleFiles() bool {
	if o == nil || o.HasMultipleSingleFiles == nil {
		var ret bool
		return ret
	}
	return *o.HasMultipleSingleFiles
}

// GetHasMultipleSingleFilesOk returns a tuple with the HasMultipleSingleFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableScopedInstallation) GetHasMultipleSingleFilesOk() (*bool, bool) {
	if o == nil || o.HasMultipleSingleFiles == nil {
		return nil, false
	}
	return o.HasMultipleSingleFiles, true
}

// HasHasMultipleSingleFiles returns a boolean if a field has been set.
func (o *NullableScopedInstallation) HasHasMultipleSingleFiles() bool {
	if o != nil && o.HasMultipleSingleFiles != nil {
		return true
	}

	return false
}

// SetHasMultipleSingleFiles gets a reference to the given bool and assigns it to the HasMultipleSingleFiles field.
func (o *NullableScopedInstallation) SetHasMultipleSingleFiles(v bool) {
	o.HasMultipleSingleFiles = &v
}

// GetSingleFilePaths returns the SingleFilePaths field value if set, zero value otherwise.
func (o *NullableScopedInstallation) GetSingleFilePaths() []string {
	if o == nil || o.SingleFilePaths == nil {
		var ret []string
		return ret
	}
	return o.SingleFilePaths
}

// GetSingleFilePathsOk returns a tuple with the SingleFilePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullableScopedInstallation) GetSingleFilePathsOk() ([]string, bool) {
	if o == nil || o.SingleFilePaths == nil {
		return nil, false
	}
	return o.SingleFilePaths, true
}

// HasSingleFilePaths returns a boolean if a field has been set.
func (o *NullableScopedInstallation) HasSingleFilePaths() bool {
	if o != nil && o.SingleFilePaths != nil {
		return true
	}

	return false
}

// SetSingleFilePaths gets a reference to the given []string and assigns it to the SingleFilePaths field.
func (o *NullableScopedInstallation) SetSingleFilePaths(v []string) {
	o.SingleFilePaths = v
}

// GetRepositoriesUrl returns the RepositoriesUrl field value
func (o *NullableScopedInstallation) GetRepositoriesUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositoriesUrl
}

// GetRepositoriesUrlOk returns a tuple with the RepositoriesUrl field value
// and a boolean to check if the value has been set.
func (o *NullableScopedInstallation) GetRepositoriesUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoriesUrl, true
}

// SetRepositoriesUrl sets field value
func (o *NullableScopedInstallation) SetRepositoriesUrl(v string) {
	o.RepositoriesUrl = v
}

// GetAccount returns the Account field value
func (o *NullableScopedInstallation) GetAccount() SimpleUser {
	if o == nil {
		var ret SimpleUser
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *NullableScopedInstallation) GetAccountOk() (*SimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *NullableScopedInstallation) SetAccount(v SimpleUser) {
	o.Account = v
}

func (o NullableScopedInstallation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["permissions"] = o.Permissions
	}
	if true {
		toSerialize["repository_selection"] = o.RepositorySelection
	}
	if true {
		toSerialize["single_file_name"] = o.SingleFileName.Get()
	}
	if o.HasMultipleSingleFiles != nil {
		toSerialize["has_multiple_single_files"] = o.HasMultipleSingleFiles
	}
	if o.SingleFilePaths != nil {
		toSerialize["single_file_paths"] = o.SingleFilePaths
	}
	if true {
		toSerialize["repositories_url"] = o.RepositoriesUrl
	}
	if true {
		toSerialize["account"] = o.Account
	}
	return json.Marshal(toSerialize)
}

type NullableNullableScopedInstallation struct {
	value *NullableScopedInstallation
	isSet bool
}

func (v NullableNullableScopedInstallation) Get() *NullableScopedInstallation {
	return v.value
}

func (v *NullableNullableScopedInstallation) Set(val *NullableScopedInstallation) {
	v.value = val
	v.isSet = true
}

func (v NullableNullableScopedInstallation) IsSet() bool {
	return v.isSet
}

func (v *NullableNullableScopedInstallation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNullableScopedInstallation(val *NullableScopedInstallation) *NullableNullableScopedInstallation {
	return &NullableNullableScopedInstallation{value: val, isSet: true}
}

func (v NullableNullableScopedInstallation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNullableScopedInstallation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


