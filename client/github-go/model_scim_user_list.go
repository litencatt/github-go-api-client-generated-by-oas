/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ScimUserList SCIM User List
type ScimUserList struct {
	// SCIM schema used.
	Schemas []string `json:"schemas"`
	TotalResults int32 `json:"totalResults"`
	ItemsPerPage int32 `json:"itemsPerPage"`
	StartIndex int32 `json:"startIndex"`
	Resources []ScimUser `json:"Resources"`
}

// NewScimUserList instantiates a new ScimUserList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScimUserList(schemas []string, totalResults int32, itemsPerPage int32, startIndex int32, resources []ScimUser) *ScimUserList {
	this := ScimUserList{}
	this.Schemas = schemas
	this.TotalResults = totalResults
	this.ItemsPerPage = itemsPerPage
	this.StartIndex = startIndex
	this.Resources = resources
	return &this
}

// NewScimUserListWithDefaults instantiates a new ScimUserList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScimUserListWithDefaults() *ScimUserList {
	this := ScimUserList{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *ScimUserList) GetSchemas() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *ScimUserList) GetSchemasOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *ScimUserList) SetSchemas(v []string) {
	o.Schemas = v
}

// GetTotalResults returns the TotalResults field value
func (o *ScimUserList) GetTotalResults() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value
// and a boolean to check if the value has been set.
func (o *ScimUserList) GetTotalResultsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalResults, true
}

// SetTotalResults sets field value
func (o *ScimUserList) SetTotalResults(v int32) {
	o.TotalResults = v
}

// GetItemsPerPage returns the ItemsPerPage field value
func (o *ScimUserList) GetItemsPerPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ItemsPerPage
}

// GetItemsPerPageOk returns a tuple with the ItemsPerPage field value
// and a boolean to check if the value has been set.
func (o *ScimUserList) GetItemsPerPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemsPerPage, true
}

// SetItemsPerPage sets field value
func (o *ScimUserList) SetItemsPerPage(v int32) {
	o.ItemsPerPage = v
}

// GetStartIndex returns the StartIndex field value
func (o *ScimUserList) GetStartIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartIndex
}

// GetStartIndexOk returns a tuple with the StartIndex field value
// and a boolean to check if the value has been set.
func (o *ScimUserList) GetStartIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartIndex, true
}

// SetStartIndex sets field value
func (o *ScimUserList) SetStartIndex(v int32) {
	o.StartIndex = v
}

// GetResources returns the Resources field value
func (o *ScimUserList) GetResources() []ScimUser {
	if o == nil {
		var ret []ScimUser
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *ScimUserList) GetResourcesOk() ([]ScimUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resources, true
}

// SetResources sets field value
func (o *ScimUserList) SetResources(v []ScimUser) {
	o.Resources = v
}

func (o ScimUserList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["totalResults"] = o.TotalResults
	}
	if true {
		toSerialize["itemsPerPage"] = o.ItemsPerPage
	}
	if true {
		toSerialize["startIndex"] = o.StartIndex
	}
	if true {
		toSerialize["Resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableScimUserList struct {
	value *ScimUserList
	isSet bool
}

func (v NullableScimUserList) Get() *ScimUserList {
	return v.value
}

func (v *NullableScimUserList) Set(val *ScimUserList) {
	v.value = val
	v.isSet = true
}

func (v NullableScimUserList) IsSet() bool {
	return v.isSet
}

func (v *NullableScimUserList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScimUserList(val *ScimUserList) *NullableScimUserList {
	return &NullableScimUserList{value: val, isSet: true}
}

func (v NullableScimUserList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScimUserList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


