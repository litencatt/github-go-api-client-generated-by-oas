/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReposUpdateRequest struct for ReposUpdateRequest
type ReposUpdateRequest struct {
	// The name of the repository.
	Name *string `json:"name,omitempty"`
	// A short description of the repository.
	Description *string `json:"description,omitempty"`
	// A URL with more information about the repository.
	Homepage *string `json:"homepage,omitempty"`
	// Either `true` to make the repository private or `false` to make it public. Default: `false`.   **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
	Private *bool `json:"private,omitempty"`
	// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`.\"
	Visibility *string `json:"visibility,omitempty"`
	SecurityAndAnalysis NullableReposUpdateRequestSecurityAndAnalysis `json:"security_and_analysis,omitempty"`
	// Either `true` to enable issues for this repository or `false` to disable them.
	HasIssues *bool `json:"has_issues,omitempty"`
	// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
	HasProjects *bool `json:"has_projects,omitempty"`
	// Either `true` to enable the wiki for this repository or `false` to disable it.
	HasWiki *bool `json:"has_wiki,omitempty"`
	// Either `true` to make this repo available as a template repository or `false` to prevent it.
	IsTemplate *bool `json:"is_template,omitempty"`
	// Updates the default branch for this repository.
	DefaultBranch *string `json:"default_branch,omitempty"`
	// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	// Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	// Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	// Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	// `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
	Archived *bool `json:"archived,omitempty"`
	// Either `true` to allow private forks, or `false` to prevent private forks.
	AllowForking *bool `json:"allow_forking,omitempty"`
}

// NewReposUpdateRequest instantiates a new ReposUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReposUpdateRequest() *ReposUpdateRequest {
	this := ReposUpdateRequest{}
	var private bool = false
	this.Private = &private
	var hasIssues bool = true
	this.HasIssues = &hasIssues
	var hasProjects bool = true
	this.HasProjects = &hasProjects
	var hasWiki bool = true
	this.HasWiki = &hasWiki
	var isTemplate bool = false
	this.IsTemplate = &isTemplate
	var allowSquashMerge bool = true
	this.AllowSquashMerge = &allowSquashMerge
	var allowMergeCommit bool = true
	this.AllowMergeCommit = &allowMergeCommit
	var allowRebaseMerge bool = true
	this.AllowRebaseMerge = &allowRebaseMerge
	var allowAutoMerge bool = false
	this.AllowAutoMerge = &allowAutoMerge
	var deleteBranchOnMerge bool = false
	this.DeleteBranchOnMerge = &deleteBranchOnMerge
	var allowUpdateBranch bool = false
	this.AllowUpdateBranch = &allowUpdateBranch
	var useSquashPrTitleAsDefault bool = false
	this.UseSquashPrTitleAsDefault = &useSquashPrTitleAsDefault
	var archived bool = false
	this.Archived = &archived
	var allowForking bool = false
	this.AllowForking = &allowForking
	return &this
}

// NewReposUpdateRequestWithDefaults instantiates a new ReposUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReposUpdateRequestWithDefaults() *ReposUpdateRequest {
	this := ReposUpdateRequest{}
	var private bool = false
	this.Private = &private
	var hasIssues bool = true
	this.HasIssues = &hasIssues
	var hasProjects bool = true
	this.HasProjects = &hasProjects
	var hasWiki bool = true
	this.HasWiki = &hasWiki
	var isTemplate bool = false
	this.IsTemplate = &isTemplate
	var allowSquashMerge bool = true
	this.AllowSquashMerge = &allowSquashMerge
	var allowMergeCommit bool = true
	this.AllowMergeCommit = &allowMergeCommit
	var allowRebaseMerge bool = true
	this.AllowRebaseMerge = &allowRebaseMerge
	var allowAutoMerge bool = false
	this.AllowAutoMerge = &allowAutoMerge
	var deleteBranchOnMerge bool = false
	this.DeleteBranchOnMerge = &deleteBranchOnMerge
	var allowUpdateBranch bool = false
	this.AllowUpdateBranch = &allowUpdateBranch
	var useSquashPrTitleAsDefault bool = false
	this.UseSquashPrTitleAsDefault = &useSquashPrTitleAsDefault
	var archived bool = false
	this.Archived = &archived
	var allowForking bool = false
	this.AllowForking = &allowForking
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ReposUpdateRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReposUpdateRequest) SetDescription(v string) {
	o.Description = &v
}

// GetHomepage returns the Homepage field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetHomepage() string {
	if o == nil || o.Homepage == nil {
		var ret string
		return ret
	}
	return *o.Homepage
}

// GetHomepageOk returns a tuple with the Homepage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetHomepageOk() (*string, bool) {
	if o == nil || o.Homepage == nil {
		return nil, false
	}
	return o.Homepage, true
}

// HasHomepage returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasHomepage() bool {
	if o != nil && o.Homepage != nil {
		return true
	}

	return false
}

// SetHomepage gets a reference to the given string and assigns it to the Homepage field.
func (o *ReposUpdateRequest) SetHomepage(v string) {
	o.Homepage = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetPrivate() bool {
	if o == nil || o.Private == nil {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetPrivateOk() (*bool, bool) {
	if o == nil || o.Private == nil {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasPrivate() bool {
	if o != nil && o.Private != nil {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *ReposUpdateRequest) SetPrivate(v bool) {
	o.Private = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *ReposUpdateRequest) SetVisibility(v string) {
	o.Visibility = &v
}

// GetSecurityAndAnalysis returns the SecurityAndAnalysis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReposUpdateRequest) GetSecurityAndAnalysis() ReposUpdateRequestSecurityAndAnalysis {
	if o == nil || o.SecurityAndAnalysis.Get() == nil {
		var ret ReposUpdateRequestSecurityAndAnalysis
		return ret
	}
	return *o.SecurityAndAnalysis.Get()
}

// GetSecurityAndAnalysisOk returns a tuple with the SecurityAndAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReposUpdateRequest) GetSecurityAndAnalysisOk() (*ReposUpdateRequestSecurityAndAnalysis, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityAndAnalysis.Get(), o.SecurityAndAnalysis.IsSet()
}

// HasSecurityAndAnalysis returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasSecurityAndAnalysis() bool {
	if o != nil && o.SecurityAndAnalysis.IsSet() {
		return true
	}

	return false
}

// SetSecurityAndAnalysis gets a reference to the given NullableReposUpdateRequestSecurityAndAnalysis and assigns it to the SecurityAndAnalysis field.
func (o *ReposUpdateRequest) SetSecurityAndAnalysis(v ReposUpdateRequestSecurityAndAnalysis) {
	o.SecurityAndAnalysis.Set(&v)
}
// SetSecurityAndAnalysisNil sets the value for SecurityAndAnalysis to be an explicit nil
func (o *ReposUpdateRequest) SetSecurityAndAnalysisNil() {
	o.SecurityAndAnalysis.Set(nil)
}

// UnsetSecurityAndAnalysis ensures that no value is present for SecurityAndAnalysis, not even an explicit nil
func (o *ReposUpdateRequest) UnsetSecurityAndAnalysis() {
	o.SecurityAndAnalysis.Unset()
}

// GetHasIssues returns the HasIssues field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetHasIssues() bool {
	if o == nil || o.HasIssues == nil {
		var ret bool
		return ret
	}
	return *o.HasIssues
}

// GetHasIssuesOk returns a tuple with the HasIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetHasIssuesOk() (*bool, bool) {
	if o == nil || o.HasIssues == nil {
		return nil, false
	}
	return o.HasIssues, true
}

// HasHasIssues returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasHasIssues() bool {
	if o != nil && o.HasIssues != nil {
		return true
	}

	return false
}

// SetHasIssues gets a reference to the given bool and assigns it to the HasIssues field.
func (o *ReposUpdateRequest) SetHasIssues(v bool) {
	o.HasIssues = &v
}

// GetHasProjects returns the HasProjects field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetHasProjects() bool {
	if o == nil || o.HasProjects == nil {
		var ret bool
		return ret
	}
	return *o.HasProjects
}

// GetHasProjectsOk returns a tuple with the HasProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetHasProjectsOk() (*bool, bool) {
	if o == nil || o.HasProjects == nil {
		return nil, false
	}
	return o.HasProjects, true
}

// HasHasProjects returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasHasProjects() bool {
	if o != nil && o.HasProjects != nil {
		return true
	}

	return false
}

// SetHasProjects gets a reference to the given bool and assigns it to the HasProjects field.
func (o *ReposUpdateRequest) SetHasProjects(v bool) {
	o.HasProjects = &v
}

// GetHasWiki returns the HasWiki field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetHasWiki() bool {
	if o == nil || o.HasWiki == nil {
		var ret bool
		return ret
	}
	return *o.HasWiki
}

// GetHasWikiOk returns a tuple with the HasWiki field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetHasWikiOk() (*bool, bool) {
	if o == nil || o.HasWiki == nil {
		return nil, false
	}
	return o.HasWiki, true
}

// HasHasWiki returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasHasWiki() bool {
	if o != nil && o.HasWiki != nil {
		return true
	}

	return false
}

// SetHasWiki gets a reference to the given bool and assigns it to the HasWiki field.
func (o *ReposUpdateRequest) SetHasWiki(v bool) {
	o.HasWiki = &v
}

// GetIsTemplate returns the IsTemplate field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetIsTemplate() bool {
	if o == nil || o.IsTemplate == nil {
		var ret bool
		return ret
	}
	return *o.IsTemplate
}

// GetIsTemplateOk returns a tuple with the IsTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetIsTemplateOk() (*bool, bool) {
	if o == nil || o.IsTemplate == nil {
		return nil, false
	}
	return o.IsTemplate, true
}

// HasIsTemplate returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasIsTemplate() bool {
	if o != nil && o.IsTemplate != nil {
		return true
	}

	return false
}

// SetIsTemplate gets a reference to the given bool and assigns it to the IsTemplate field.
func (o *ReposUpdateRequest) SetIsTemplate(v bool) {
	o.IsTemplate = &v
}

// GetDefaultBranch returns the DefaultBranch field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetDefaultBranch() string {
	if o == nil || o.DefaultBranch == nil {
		var ret string
		return ret
	}
	return *o.DefaultBranch
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetDefaultBranchOk() (*string, bool) {
	if o == nil || o.DefaultBranch == nil {
		return nil, false
	}
	return o.DefaultBranch, true
}

// HasDefaultBranch returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasDefaultBranch() bool {
	if o != nil && o.DefaultBranch != nil {
		return true
	}

	return false
}

// SetDefaultBranch gets a reference to the given string and assigns it to the DefaultBranch field.
func (o *ReposUpdateRequest) SetDefaultBranch(v string) {
	o.DefaultBranch = &v
}

// GetAllowSquashMerge returns the AllowSquashMerge field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetAllowSquashMerge() bool {
	if o == nil || o.AllowSquashMerge == nil {
		var ret bool
		return ret
	}
	return *o.AllowSquashMerge
}

// GetAllowSquashMergeOk returns a tuple with the AllowSquashMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetAllowSquashMergeOk() (*bool, bool) {
	if o == nil || o.AllowSquashMerge == nil {
		return nil, false
	}
	return o.AllowSquashMerge, true
}

// HasAllowSquashMerge returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasAllowSquashMerge() bool {
	if o != nil && o.AllowSquashMerge != nil {
		return true
	}

	return false
}

// SetAllowSquashMerge gets a reference to the given bool and assigns it to the AllowSquashMerge field.
func (o *ReposUpdateRequest) SetAllowSquashMerge(v bool) {
	o.AllowSquashMerge = &v
}

// GetAllowMergeCommit returns the AllowMergeCommit field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetAllowMergeCommit() bool {
	if o == nil || o.AllowMergeCommit == nil {
		var ret bool
		return ret
	}
	return *o.AllowMergeCommit
}

// GetAllowMergeCommitOk returns a tuple with the AllowMergeCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetAllowMergeCommitOk() (*bool, bool) {
	if o == nil || o.AllowMergeCommit == nil {
		return nil, false
	}
	return o.AllowMergeCommit, true
}

// HasAllowMergeCommit returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasAllowMergeCommit() bool {
	if o != nil && o.AllowMergeCommit != nil {
		return true
	}

	return false
}

// SetAllowMergeCommit gets a reference to the given bool and assigns it to the AllowMergeCommit field.
func (o *ReposUpdateRequest) SetAllowMergeCommit(v bool) {
	o.AllowMergeCommit = &v
}

// GetAllowRebaseMerge returns the AllowRebaseMerge field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetAllowRebaseMerge() bool {
	if o == nil || o.AllowRebaseMerge == nil {
		var ret bool
		return ret
	}
	return *o.AllowRebaseMerge
}

// GetAllowRebaseMergeOk returns a tuple with the AllowRebaseMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetAllowRebaseMergeOk() (*bool, bool) {
	if o == nil || o.AllowRebaseMerge == nil {
		return nil, false
	}
	return o.AllowRebaseMerge, true
}

// HasAllowRebaseMerge returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasAllowRebaseMerge() bool {
	if o != nil && o.AllowRebaseMerge != nil {
		return true
	}

	return false
}

// SetAllowRebaseMerge gets a reference to the given bool and assigns it to the AllowRebaseMerge field.
func (o *ReposUpdateRequest) SetAllowRebaseMerge(v bool) {
	o.AllowRebaseMerge = &v
}

// GetAllowAutoMerge returns the AllowAutoMerge field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetAllowAutoMerge() bool {
	if o == nil || o.AllowAutoMerge == nil {
		var ret bool
		return ret
	}
	return *o.AllowAutoMerge
}

// GetAllowAutoMergeOk returns a tuple with the AllowAutoMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetAllowAutoMergeOk() (*bool, bool) {
	if o == nil || o.AllowAutoMerge == nil {
		return nil, false
	}
	return o.AllowAutoMerge, true
}

// HasAllowAutoMerge returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasAllowAutoMerge() bool {
	if o != nil && o.AllowAutoMerge != nil {
		return true
	}

	return false
}

// SetAllowAutoMerge gets a reference to the given bool and assigns it to the AllowAutoMerge field.
func (o *ReposUpdateRequest) SetAllowAutoMerge(v bool) {
	o.AllowAutoMerge = &v
}

// GetDeleteBranchOnMerge returns the DeleteBranchOnMerge field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetDeleteBranchOnMerge() bool {
	if o == nil || o.DeleteBranchOnMerge == nil {
		var ret bool
		return ret
	}
	return *o.DeleteBranchOnMerge
}

// GetDeleteBranchOnMergeOk returns a tuple with the DeleteBranchOnMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetDeleteBranchOnMergeOk() (*bool, bool) {
	if o == nil || o.DeleteBranchOnMerge == nil {
		return nil, false
	}
	return o.DeleteBranchOnMerge, true
}

// HasDeleteBranchOnMerge returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasDeleteBranchOnMerge() bool {
	if o != nil && o.DeleteBranchOnMerge != nil {
		return true
	}

	return false
}

// SetDeleteBranchOnMerge gets a reference to the given bool and assigns it to the DeleteBranchOnMerge field.
func (o *ReposUpdateRequest) SetDeleteBranchOnMerge(v bool) {
	o.DeleteBranchOnMerge = &v
}

// GetAllowUpdateBranch returns the AllowUpdateBranch field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetAllowUpdateBranch() bool {
	if o == nil || o.AllowUpdateBranch == nil {
		var ret bool
		return ret
	}
	return *o.AllowUpdateBranch
}

// GetAllowUpdateBranchOk returns a tuple with the AllowUpdateBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetAllowUpdateBranchOk() (*bool, bool) {
	if o == nil || o.AllowUpdateBranch == nil {
		return nil, false
	}
	return o.AllowUpdateBranch, true
}

// HasAllowUpdateBranch returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasAllowUpdateBranch() bool {
	if o != nil && o.AllowUpdateBranch != nil {
		return true
	}

	return false
}

// SetAllowUpdateBranch gets a reference to the given bool and assigns it to the AllowUpdateBranch field.
func (o *ReposUpdateRequest) SetAllowUpdateBranch(v bool) {
	o.AllowUpdateBranch = &v
}

// GetUseSquashPrTitleAsDefault returns the UseSquashPrTitleAsDefault field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetUseSquashPrTitleAsDefault() bool {
	if o == nil || o.UseSquashPrTitleAsDefault == nil {
		var ret bool
		return ret
	}
	return *o.UseSquashPrTitleAsDefault
}

// GetUseSquashPrTitleAsDefaultOk returns a tuple with the UseSquashPrTitleAsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetUseSquashPrTitleAsDefaultOk() (*bool, bool) {
	if o == nil || o.UseSquashPrTitleAsDefault == nil {
		return nil, false
	}
	return o.UseSquashPrTitleAsDefault, true
}

// HasUseSquashPrTitleAsDefault returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasUseSquashPrTitleAsDefault() bool {
	if o != nil && o.UseSquashPrTitleAsDefault != nil {
		return true
	}

	return false
}

// SetUseSquashPrTitleAsDefault gets a reference to the given bool and assigns it to the UseSquashPrTitleAsDefault field.
func (o *ReposUpdateRequest) SetUseSquashPrTitleAsDefault(v bool) {
	o.UseSquashPrTitleAsDefault = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetArchived() bool {
	if o == nil || o.Archived == nil {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetArchivedOk() (*bool, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *ReposUpdateRequest) SetArchived(v bool) {
	o.Archived = &v
}

// GetAllowForking returns the AllowForking field value if set, zero value otherwise.
func (o *ReposUpdateRequest) GetAllowForking() bool {
	if o == nil || o.AllowForking == nil {
		var ret bool
		return ret
	}
	return *o.AllowForking
}

// GetAllowForkingOk returns a tuple with the AllowForking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposUpdateRequest) GetAllowForkingOk() (*bool, bool) {
	if o == nil || o.AllowForking == nil {
		return nil, false
	}
	return o.AllowForking, true
}

// HasAllowForking returns a boolean if a field has been set.
func (o *ReposUpdateRequest) HasAllowForking() bool {
	if o != nil && o.AllowForking != nil {
		return true
	}

	return false
}

// SetAllowForking gets a reference to the given bool and assigns it to the AllowForking field.
func (o *ReposUpdateRequest) SetAllowForking(v bool) {
	o.AllowForking = &v
}

func (o ReposUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Homepage != nil {
		toSerialize["homepage"] = o.Homepage
	}
	if o.Private != nil {
		toSerialize["private"] = o.Private
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.SecurityAndAnalysis.IsSet() {
		toSerialize["security_and_analysis"] = o.SecurityAndAnalysis.Get()
	}
	if o.HasIssues != nil {
		toSerialize["has_issues"] = o.HasIssues
	}
	if o.HasProjects != nil {
		toSerialize["has_projects"] = o.HasProjects
	}
	if o.HasWiki != nil {
		toSerialize["has_wiki"] = o.HasWiki
	}
	if o.IsTemplate != nil {
		toSerialize["is_template"] = o.IsTemplate
	}
	if o.DefaultBranch != nil {
		toSerialize["default_branch"] = o.DefaultBranch
	}
	if o.AllowSquashMerge != nil {
		toSerialize["allow_squash_merge"] = o.AllowSquashMerge
	}
	if o.AllowMergeCommit != nil {
		toSerialize["allow_merge_commit"] = o.AllowMergeCommit
	}
	if o.AllowRebaseMerge != nil {
		toSerialize["allow_rebase_merge"] = o.AllowRebaseMerge
	}
	if o.AllowAutoMerge != nil {
		toSerialize["allow_auto_merge"] = o.AllowAutoMerge
	}
	if o.DeleteBranchOnMerge != nil {
		toSerialize["delete_branch_on_merge"] = o.DeleteBranchOnMerge
	}
	if o.AllowUpdateBranch != nil {
		toSerialize["allow_update_branch"] = o.AllowUpdateBranch
	}
	if o.UseSquashPrTitleAsDefault != nil {
		toSerialize["use_squash_pr_title_as_default"] = o.UseSquashPrTitleAsDefault
	}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.AllowForking != nil {
		toSerialize["allow_forking"] = o.AllowForking
	}
	return json.Marshal(toSerialize)
}

type NullableReposUpdateRequest struct {
	value *ReposUpdateRequest
	isSet bool
}

func (v NullableReposUpdateRequest) Get() *ReposUpdateRequest {
	return v.value
}

func (v *NullableReposUpdateRequest) Set(val *ReposUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReposUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReposUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposUpdateRequest(val *ReposUpdateRequest) *NullableReposUpdateRequest {
	return &NullableReposUpdateRequest{value: val, isSet: true}
}

func (v NullableReposUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


