/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ContentTraffic Content Traffic
type ContentTraffic struct {
	Path string `json:"path"`
	Title string `json:"title"`
	Count int32 `json:"count"`
	Uniques int32 `json:"uniques"`
}

// NewContentTraffic instantiates a new ContentTraffic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentTraffic(path string, title string, count int32, uniques int32) *ContentTraffic {
	this := ContentTraffic{}
	this.Path = path
	this.Title = title
	this.Count = count
	this.Uniques = uniques
	return &this
}

// NewContentTrafficWithDefaults instantiates a new ContentTraffic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentTrafficWithDefaults() *ContentTraffic {
	this := ContentTraffic{}
	return &this
}

// GetPath returns the Path field value
func (o *ContentTraffic) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ContentTraffic) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ContentTraffic) SetPath(v string) {
	o.Path = v
}

// GetTitle returns the Title field value
func (o *ContentTraffic) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ContentTraffic) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ContentTraffic) SetTitle(v string) {
	o.Title = v
}

// GetCount returns the Count field value
func (o *ContentTraffic) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ContentTraffic) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ContentTraffic) SetCount(v int32) {
	o.Count = v
}

// GetUniques returns the Uniques field value
func (o *ContentTraffic) GetUniques() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Uniques
}

// GetUniquesOk returns a tuple with the Uniques field value
// and a boolean to check if the value has been set.
func (o *ContentTraffic) GetUniquesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uniques, true
}

// SetUniques sets field value
func (o *ContentTraffic) SetUniques(v int32) {
	o.Uniques = v
}

func (o ContentTraffic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["path"] = o.Path
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["uniques"] = o.Uniques
	}
	return json.Marshal(toSerialize)
}

type NullableContentTraffic struct {
	value *ContentTraffic
	isSet bool
}

func (v NullableContentTraffic) Get() *ContentTraffic {
	return v.value
}

func (v *NullableContentTraffic) Set(val *ContentTraffic) {
	v.value = val
	v.isSet = true
}

func (v NullableContentTraffic) IsSet() bool {
	return v.isSet
}

func (v *NullableContentTraffic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentTraffic(val *ContentTraffic) *NullableContentTraffic {
	return &NullableContentTraffic{value: val, isSet: true}
}

func (v NullableContentTraffic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentTraffic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


