/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// OrgHook Org Hook
type OrgHook struct {
	Id int32 `json:"id"`
	Url string `json:"url"`
	PingUrl string `json:"ping_url"`
	DeliveriesUrl *string `json:"deliveries_url,omitempty"`
	Name string `json:"name"`
	Events []string `json:"events"`
	Active bool `json:"active"`
	Config OrgHookConfig `json:"config"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
	Type string `json:"type"`
}

// NewOrgHook instantiates a new OrgHook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgHook(id int32, url string, pingUrl string, name string, events []string, active bool, config OrgHookConfig, updatedAt time.Time, createdAt time.Time, type_ string) *OrgHook {
	this := OrgHook{}
	this.Id = id
	this.Url = url
	this.PingUrl = pingUrl
	this.Name = name
	this.Events = events
	this.Active = active
	this.Config = config
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	this.Type = type_
	return &this
}

// NewOrgHookWithDefaults instantiates a new OrgHook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgHookWithDefaults() *OrgHook {
	this := OrgHook{}
	return &this
}

// GetId returns the Id field value
func (o *OrgHook) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrgHook) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrgHook) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *OrgHook) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *OrgHook) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *OrgHook) SetUrl(v string) {
	o.Url = v
}

// GetPingUrl returns the PingUrl field value
func (o *OrgHook) GetPingUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PingUrl
}

// GetPingUrlOk returns a tuple with the PingUrl field value
// and a boolean to check if the value has been set.
func (o *OrgHook) GetPingUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PingUrl, true
}

// SetPingUrl sets field value
func (o *OrgHook) SetPingUrl(v string) {
	o.PingUrl = v
}

// GetDeliveriesUrl returns the DeliveriesUrl field value if set, zero value otherwise.
func (o *OrgHook) GetDeliveriesUrl() string {
	if o == nil || o.DeliveriesUrl == nil {
		var ret string
		return ret
	}
	return *o.DeliveriesUrl
}

// GetDeliveriesUrlOk returns a tuple with the DeliveriesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgHook) GetDeliveriesUrlOk() (*string, bool) {
	if o == nil || o.DeliveriesUrl == nil {
		return nil, false
	}
	return o.DeliveriesUrl, true
}

// HasDeliveriesUrl returns a boolean if a field has been set.
func (o *OrgHook) HasDeliveriesUrl() bool {
	if o != nil && o.DeliveriesUrl != nil {
		return true
	}

	return false
}

// SetDeliveriesUrl gets a reference to the given string and assigns it to the DeliveriesUrl field.
func (o *OrgHook) SetDeliveriesUrl(v string) {
	o.DeliveriesUrl = &v
}

// GetName returns the Name field value
func (o *OrgHook) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrgHook) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrgHook) SetName(v string) {
	o.Name = v
}

// GetEvents returns the Events field value
func (o *OrgHook) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *OrgHook) GetEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *OrgHook) SetEvents(v []string) {
	o.Events = v
}

// GetActive returns the Active field value
func (o *OrgHook) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *OrgHook) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *OrgHook) SetActive(v bool) {
	o.Active = v
}

// GetConfig returns the Config field value
func (o *OrgHook) GetConfig() OrgHookConfig {
	if o == nil {
		var ret OrgHookConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *OrgHook) GetConfigOk() (*OrgHookConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *OrgHook) SetConfig(v OrgHookConfig) {
	o.Config = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *OrgHook) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *OrgHook) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *OrgHook) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *OrgHook) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *OrgHook) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *OrgHook) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetType returns the Type field value
func (o *OrgHook) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OrgHook) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OrgHook) SetType(v string) {
	o.Type = v
}

func (o OrgHook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["ping_url"] = o.PingUrl
	}
	if o.DeliveriesUrl != nil {
		toSerialize["deliveries_url"] = o.DeliveriesUrl
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["events"] = o.Events
	}
	if true {
		toSerialize["active"] = o.Active
	}
	if true {
		toSerialize["config"] = o.Config
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableOrgHook struct {
	value *OrgHook
	isSet bool
}

func (v NullableOrgHook) Get() *OrgHook {
	return v.value
}

func (v *NullableOrgHook) Set(val *OrgHook) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgHook) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgHook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgHook(val *OrgHook) *NullableOrgHook {
	return &NullableOrgHook{value: val, isSet: true}
}

func (v NullableOrgHook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgHook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


