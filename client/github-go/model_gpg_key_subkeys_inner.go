/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// GpgKeySubkeysInner struct for GpgKeySubkeysInner
type GpgKeySubkeysInner struct {
	Id *int32 `json:"id,omitempty"`
	PrimaryKeyId *int32 `json:"primary_key_id,omitempty"`
	KeyId *string `json:"key_id,omitempty"`
	PublicKey *string `json:"public_key,omitempty"`
	Emails []interface{} `json:"emails,omitempty"`
	Subkeys []interface{} `json:"subkeys,omitempty"`
	CanSign *bool `json:"can_sign,omitempty"`
	CanEncryptComms *bool `json:"can_encrypt_comms,omitempty"`
	CanEncryptStorage *bool `json:"can_encrypt_storage,omitempty"`
	CanCertify *bool `json:"can_certify,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	ExpiresAt NullableString `json:"expires_at,omitempty"`
	RawKey NullableString `json:"raw_key,omitempty"`
	Revoked *bool `json:"revoked,omitempty"`
}

// NewGpgKeySubkeysInner instantiates a new GpgKeySubkeysInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGpgKeySubkeysInner() *GpgKeySubkeysInner {
	this := GpgKeySubkeysInner{}
	return &this
}

// NewGpgKeySubkeysInnerWithDefaults instantiates a new GpgKeySubkeysInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGpgKeySubkeysInnerWithDefaults() *GpgKeySubkeysInner {
	this := GpgKeySubkeysInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GpgKeySubkeysInner) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeySubkeysInner) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GpgKeySubkeysInner) SetId(v int32) {
	o.Id = &v
}

// GetPrimaryKeyId returns the PrimaryKeyId field value if set, zero value otherwise.
func (o *GpgKeySubkeysInner) GetPrimaryKeyId() int32 {
	if o == nil || o.PrimaryKeyId == nil {
		var ret int32
		return ret
	}
	return *o.PrimaryKeyId
}

// GetPrimaryKeyIdOk returns a tuple with the PrimaryKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeySubkeysInner) GetPrimaryKeyIdOk() (*int32, bool) {
	if o == nil || o.PrimaryKeyId == nil {
		return nil, false
	}
	return o.PrimaryKeyId, true
}

// HasPrimaryKeyId returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasPrimaryKeyId() bool {
	if o != nil && o.PrimaryKeyId != nil {
		return true
	}

	return false
}

// SetPrimaryKeyId gets a reference to the given int32 and assigns it to the PrimaryKeyId field.
func (o *GpgKeySubkeysInner) SetPrimaryKeyId(v int32) {
	o.PrimaryKeyId = &v
}

// GetKeyId returns the KeyId field value if set, zero value otherwise.
func (o *GpgKeySubkeysInner) GetKeyId() string {
	if o == nil || o.KeyId == nil {
		var ret string
		return ret
	}
	return *o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeySubkeysInner) GetKeyIdOk() (*string, bool) {
	if o == nil || o.KeyId == nil {
		return nil, false
	}
	return o.KeyId, true
}

// HasKeyId returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasKeyId() bool {
	if o != nil && o.KeyId != nil {
		return true
	}

	return false
}

// SetKeyId gets a reference to the given string and assigns it to the KeyId field.
func (o *GpgKeySubkeysInner) SetKeyId(v string) {
	o.KeyId = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *GpgKeySubkeysInner) GetPublicKey() string {
	if o == nil || o.PublicKey == nil {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeySubkeysInner) GetPublicKeyOk() (*string, bool) {
	if o == nil || o.PublicKey == nil {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasPublicKey() bool {
	if o != nil && o.PublicKey != nil {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *GpgKeySubkeysInner) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *GpgKeySubkeysInner) GetEmails() []interface{} {
	if o == nil || o.Emails == nil {
		var ret []interface{}
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeySubkeysInner) GetEmailsOk() ([]interface{}, bool) {
	if o == nil || o.Emails == nil {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasEmails() bool {
	if o != nil && o.Emails != nil {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []interface{} and assigns it to the Emails field.
func (o *GpgKeySubkeysInner) SetEmails(v []interface{}) {
	o.Emails = v
}

// GetSubkeys returns the Subkeys field value if set, zero value otherwise.
func (o *GpgKeySubkeysInner) GetSubkeys() []interface{} {
	if o == nil || o.Subkeys == nil {
		var ret []interface{}
		return ret
	}
	return o.Subkeys
}

// GetSubkeysOk returns a tuple with the Subkeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeySubkeysInner) GetSubkeysOk() ([]interface{}, bool) {
	if o == nil || o.Subkeys == nil {
		return nil, false
	}
	return o.Subkeys, true
}

// HasSubkeys returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasSubkeys() bool {
	if o != nil && o.Subkeys != nil {
		return true
	}

	return false
}

// SetSubkeys gets a reference to the given []interface{} and assigns it to the Subkeys field.
func (o *GpgKeySubkeysInner) SetSubkeys(v []interface{}) {
	o.Subkeys = v
}

// GetCanSign returns the CanSign field value if set, zero value otherwise.
func (o *GpgKeySubkeysInner) GetCanSign() bool {
	if o == nil || o.CanSign == nil {
		var ret bool
		return ret
	}
	return *o.CanSign
}

// GetCanSignOk returns a tuple with the CanSign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeySubkeysInner) GetCanSignOk() (*bool, bool) {
	if o == nil || o.CanSign == nil {
		return nil, false
	}
	return o.CanSign, true
}

// HasCanSign returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasCanSign() bool {
	if o != nil && o.CanSign != nil {
		return true
	}

	return false
}

// SetCanSign gets a reference to the given bool and assigns it to the CanSign field.
func (o *GpgKeySubkeysInner) SetCanSign(v bool) {
	o.CanSign = &v
}

// GetCanEncryptComms returns the CanEncryptComms field value if set, zero value otherwise.
func (o *GpgKeySubkeysInner) GetCanEncryptComms() bool {
	if o == nil || o.CanEncryptComms == nil {
		var ret bool
		return ret
	}
	return *o.CanEncryptComms
}

// GetCanEncryptCommsOk returns a tuple with the CanEncryptComms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeySubkeysInner) GetCanEncryptCommsOk() (*bool, bool) {
	if o == nil || o.CanEncryptComms == nil {
		return nil, false
	}
	return o.CanEncryptComms, true
}

// HasCanEncryptComms returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasCanEncryptComms() bool {
	if o != nil && o.CanEncryptComms != nil {
		return true
	}

	return false
}

// SetCanEncryptComms gets a reference to the given bool and assigns it to the CanEncryptComms field.
func (o *GpgKeySubkeysInner) SetCanEncryptComms(v bool) {
	o.CanEncryptComms = &v
}

// GetCanEncryptStorage returns the CanEncryptStorage field value if set, zero value otherwise.
func (o *GpgKeySubkeysInner) GetCanEncryptStorage() bool {
	if o == nil || o.CanEncryptStorage == nil {
		var ret bool
		return ret
	}
	return *o.CanEncryptStorage
}

// GetCanEncryptStorageOk returns a tuple with the CanEncryptStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeySubkeysInner) GetCanEncryptStorageOk() (*bool, bool) {
	if o == nil || o.CanEncryptStorage == nil {
		return nil, false
	}
	return o.CanEncryptStorage, true
}

// HasCanEncryptStorage returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasCanEncryptStorage() bool {
	if o != nil && o.CanEncryptStorage != nil {
		return true
	}

	return false
}

// SetCanEncryptStorage gets a reference to the given bool and assigns it to the CanEncryptStorage field.
func (o *GpgKeySubkeysInner) SetCanEncryptStorage(v bool) {
	o.CanEncryptStorage = &v
}

// GetCanCertify returns the CanCertify field value if set, zero value otherwise.
func (o *GpgKeySubkeysInner) GetCanCertify() bool {
	if o == nil || o.CanCertify == nil {
		var ret bool
		return ret
	}
	return *o.CanCertify
}

// GetCanCertifyOk returns a tuple with the CanCertify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeySubkeysInner) GetCanCertifyOk() (*bool, bool) {
	if o == nil || o.CanCertify == nil {
		return nil, false
	}
	return o.CanCertify, true
}

// HasCanCertify returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasCanCertify() bool {
	if o != nil && o.CanCertify != nil {
		return true
	}

	return false
}

// SetCanCertify gets a reference to the given bool and assigns it to the CanCertify field.
func (o *GpgKeySubkeysInner) SetCanCertify(v bool) {
	o.CanCertify = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GpgKeySubkeysInner) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeySubkeysInner) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *GpgKeySubkeysInner) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GpgKeySubkeysInner) GetExpiresAt() string {
	if o == nil || o.ExpiresAt.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GpgKeySubkeysInner) GetExpiresAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt.IsSet() {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given NullableString and assigns it to the ExpiresAt field.
func (o *GpgKeySubkeysInner) SetExpiresAt(v string) {
	o.ExpiresAt.Set(&v)
}
// SetExpiresAtNil sets the value for ExpiresAt to be an explicit nil
func (o *GpgKeySubkeysInner) SetExpiresAtNil() {
	o.ExpiresAt.Set(nil)
}

// UnsetExpiresAt ensures that no value is present for ExpiresAt, not even an explicit nil
func (o *GpgKeySubkeysInner) UnsetExpiresAt() {
	o.ExpiresAt.Unset()
}

// GetRawKey returns the RawKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GpgKeySubkeysInner) GetRawKey() string {
	if o == nil || o.RawKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.RawKey.Get()
}

// GetRawKeyOk returns a tuple with the RawKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GpgKeySubkeysInner) GetRawKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RawKey.Get(), o.RawKey.IsSet()
}

// HasRawKey returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasRawKey() bool {
	if o != nil && o.RawKey.IsSet() {
		return true
	}

	return false
}

// SetRawKey gets a reference to the given NullableString and assigns it to the RawKey field.
func (o *GpgKeySubkeysInner) SetRawKey(v string) {
	o.RawKey.Set(&v)
}
// SetRawKeyNil sets the value for RawKey to be an explicit nil
func (o *GpgKeySubkeysInner) SetRawKeyNil() {
	o.RawKey.Set(nil)
}

// UnsetRawKey ensures that no value is present for RawKey, not even an explicit nil
func (o *GpgKeySubkeysInner) UnsetRawKey() {
	o.RawKey.Unset()
}

// GetRevoked returns the Revoked field value if set, zero value otherwise.
func (o *GpgKeySubkeysInner) GetRevoked() bool {
	if o == nil || o.Revoked == nil {
		var ret bool
		return ret
	}
	return *o.Revoked
}

// GetRevokedOk returns a tuple with the Revoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GpgKeySubkeysInner) GetRevokedOk() (*bool, bool) {
	if o == nil || o.Revoked == nil {
		return nil, false
	}
	return o.Revoked, true
}

// HasRevoked returns a boolean if a field has been set.
func (o *GpgKeySubkeysInner) HasRevoked() bool {
	if o != nil && o.Revoked != nil {
		return true
	}

	return false
}

// SetRevoked gets a reference to the given bool and assigns it to the Revoked field.
func (o *GpgKeySubkeysInner) SetRevoked(v bool) {
	o.Revoked = &v
}

func (o GpgKeySubkeysInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.PrimaryKeyId != nil {
		toSerialize["primary_key_id"] = o.PrimaryKeyId
	}
	if o.KeyId != nil {
		toSerialize["key_id"] = o.KeyId
	}
	if o.PublicKey != nil {
		toSerialize["public_key"] = o.PublicKey
	}
	if o.Emails != nil {
		toSerialize["emails"] = o.Emails
	}
	if o.Subkeys != nil {
		toSerialize["subkeys"] = o.Subkeys
	}
	if o.CanSign != nil {
		toSerialize["can_sign"] = o.CanSign
	}
	if o.CanEncryptComms != nil {
		toSerialize["can_encrypt_comms"] = o.CanEncryptComms
	}
	if o.CanEncryptStorage != nil {
		toSerialize["can_encrypt_storage"] = o.CanEncryptStorage
	}
	if o.CanCertify != nil {
		toSerialize["can_certify"] = o.CanCertify
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.ExpiresAt.IsSet() {
		toSerialize["expires_at"] = o.ExpiresAt.Get()
	}
	if o.RawKey.IsSet() {
		toSerialize["raw_key"] = o.RawKey.Get()
	}
	if o.Revoked != nil {
		toSerialize["revoked"] = o.Revoked
	}
	return json.Marshal(toSerialize)
}

type NullableGpgKeySubkeysInner struct {
	value *GpgKeySubkeysInner
	isSet bool
}

func (v NullableGpgKeySubkeysInner) Get() *GpgKeySubkeysInner {
	return v.value
}

func (v *NullableGpgKeySubkeysInner) Set(val *GpgKeySubkeysInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGpgKeySubkeysInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGpgKeySubkeysInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGpgKeySubkeysInner(val *GpgKeySubkeysInner) *NullableGpgKeySubkeysInner {
	return &NullableGpgKeySubkeysInner{value: val, isSet: true}
}

func (v NullableGpgKeySubkeysInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGpgKeySubkeysInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


