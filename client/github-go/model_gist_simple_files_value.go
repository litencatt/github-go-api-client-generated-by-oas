/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// GistSimpleFilesValue struct for GistSimpleFilesValue
type GistSimpleFilesValue struct {
	Filename *string `json:"filename,omitempty"`
	Type *string `json:"type,omitempty"`
	Language *string `json:"language,omitempty"`
	RawUrl *string `json:"raw_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Truncated *bool `json:"truncated,omitempty"`
	Content *string `json:"content,omitempty"`
}

// NewGistSimpleFilesValue instantiates a new GistSimpleFilesValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGistSimpleFilesValue() *GistSimpleFilesValue {
	this := GistSimpleFilesValue{}
	return &this
}

// NewGistSimpleFilesValueWithDefaults instantiates a new GistSimpleFilesValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGistSimpleFilesValueWithDefaults() *GistSimpleFilesValue {
	this := GistSimpleFilesValue{}
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *GistSimpleFilesValue) GetFilename() string {
	if o == nil || o.Filename == nil {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimpleFilesValue) GetFilenameOk() (*string, bool) {
	if o == nil || o.Filename == nil {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *GistSimpleFilesValue) HasFilename() bool {
	if o != nil && o.Filename != nil {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *GistSimpleFilesValue) SetFilename(v string) {
	o.Filename = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GistSimpleFilesValue) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimpleFilesValue) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GistSimpleFilesValue) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GistSimpleFilesValue) SetType(v string) {
	o.Type = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *GistSimpleFilesValue) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimpleFilesValue) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *GistSimpleFilesValue) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *GistSimpleFilesValue) SetLanguage(v string) {
	o.Language = &v
}

// GetRawUrl returns the RawUrl field value if set, zero value otherwise.
func (o *GistSimpleFilesValue) GetRawUrl() string {
	if o == nil || o.RawUrl == nil {
		var ret string
		return ret
	}
	return *o.RawUrl
}

// GetRawUrlOk returns a tuple with the RawUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimpleFilesValue) GetRawUrlOk() (*string, bool) {
	if o == nil || o.RawUrl == nil {
		return nil, false
	}
	return o.RawUrl, true
}

// HasRawUrl returns a boolean if a field has been set.
func (o *GistSimpleFilesValue) HasRawUrl() bool {
	if o != nil && o.RawUrl != nil {
		return true
	}

	return false
}

// SetRawUrl gets a reference to the given string and assigns it to the RawUrl field.
func (o *GistSimpleFilesValue) SetRawUrl(v string) {
	o.RawUrl = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *GistSimpleFilesValue) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimpleFilesValue) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *GistSimpleFilesValue) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *GistSimpleFilesValue) SetSize(v int32) {
	o.Size = &v
}

// GetTruncated returns the Truncated field value if set, zero value otherwise.
func (o *GistSimpleFilesValue) GetTruncated() bool {
	if o == nil || o.Truncated == nil {
		var ret bool
		return ret
	}
	return *o.Truncated
}

// GetTruncatedOk returns a tuple with the Truncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimpleFilesValue) GetTruncatedOk() (*bool, bool) {
	if o == nil || o.Truncated == nil {
		return nil, false
	}
	return o.Truncated, true
}

// HasTruncated returns a boolean if a field has been set.
func (o *GistSimpleFilesValue) HasTruncated() bool {
	if o != nil && o.Truncated != nil {
		return true
	}

	return false
}

// SetTruncated gets a reference to the given bool and assigns it to the Truncated field.
func (o *GistSimpleFilesValue) SetTruncated(v bool) {
	o.Truncated = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *GistSimpleFilesValue) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimpleFilesValue) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *GistSimpleFilesValue) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *GistSimpleFilesValue) SetContent(v string) {
	o.Content = &v
}

func (o GistSimpleFilesValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filename != nil {
		toSerialize["filename"] = o.Filename
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.RawUrl != nil {
		toSerialize["raw_url"] = o.RawUrl
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Truncated != nil {
		toSerialize["truncated"] = o.Truncated
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableGistSimpleFilesValue struct {
	value *GistSimpleFilesValue
	isSet bool
}

func (v NullableGistSimpleFilesValue) Get() *GistSimpleFilesValue {
	return v.value
}

func (v *NullableGistSimpleFilesValue) Set(val *GistSimpleFilesValue) {
	v.value = val
	v.isSet = true
}

func (v NullableGistSimpleFilesValue) IsSet() bool {
	return v.isSet
}

func (v *NullableGistSimpleFilesValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGistSimpleFilesValue(val *GistSimpleFilesValue) *NullableGistSimpleFilesValue {
	return &NullableGistSimpleFilesValue{value: val, isSet: true}
}

func (v NullableGistSimpleFilesValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGistSimpleFilesValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


