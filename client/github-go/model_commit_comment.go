/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// CommitComment Commit Comment
type CommitComment struct {
	HtmlUrl string `json:"html_url"`
	Url string `json:"url"`
	Id int32 `json:"id"`
	NodeId string `json:"node_id"`
	Body string `json:"body"`
	Path NullableString `json:"path"`
	Position NullableInt32 `json:"position"`
	Line NullableInt32 `json:"line"`
	CommitId string `json:"commit_id"`
	User NullableNullableSimpleUser `json:"user"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	AuthorAssociation AuthorAssociation `json:"author_association"`
	Reactions *ReactionRollup `json:"reactions,omitempty"`
}

// NewCommitComment instantiates a new CommitComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitComment(htmlUrl string, url string, id int32, nodeId string, body string, path NullableString, position NullableInt32, line NullableInt32, commitId string, user NullableNullableSimpleUser, createdAt time.Time, updatedAt time.Time, authorAssociation AuthorAssociation) *CommitComment {
	this := CommitComment{}
	this.HtmlUrl = htmlUrl
	this.Url = url
	this.Id = id
	this.NodeId = nodeId
	this.Body = body
	this.Path = path
	this.Position = position
	this.Line = line
	this.CommitId = commitId
	this.User = user
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.AuthorAssociation = authorAssociation
	return &this
}

// NewCommitCommentWithDefaults instantiates a new CommitComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitCommentWithDefaults() *CommitComment {
	this := CommitComment{}
	return &this
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *CommitComment) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *CommitComment) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *CommitComment) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetUrl returns the Url field value
func (o *CommitComment) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CommitComment) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CommitComment) SetUrl(v string) {
	o.Url = v
}

// GetId returns the Id field value
func (o *CommitComment) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CommitComment) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CommitComment) SetId(v int32) {
	o.Id = v
}

// GetNodeId returns the NodeId field value
func (o *CommitComment) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *CommitComment) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *CommitComment) SetNodeId(v string) {
	o.NodeId = v
}

// GetBody returns the Body field value
func (o *CommitComment) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *CommitComment) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *CommitComment) SetBody(v string) {
	o.Body = v
}

// GetPath returns the Path field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommitComment) GetPath() string {
	if o == nil || o.Path.Get() == nil {
		var ret string
		return ret
	}

	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommitComment) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// SetPath sets field value
func (o *CommitComment) SetPath(v string) {
	o.Path.Set(&v)
}

// GetPosition returns the Position field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *CommitComment) GetPosition() int32 {
	if o == nil || o.Position.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Position.Get()
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommitComment) GetPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Position.Get(), o.Position.IsSet()
}

// SetPosition sets field value
func (o *CommitComment) SetPosition(v int32) {
	o.Position.Set(&v)
}

// GetLine returns the Line field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *CommitComment) GetLine() int32 {
	if o == nil || o.Line.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Line.Get()
}

// GetLineOk returns a tuple with the Line field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommitComment) GetLineOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Line.Get(), o.Line.IsSet()
}

// SetLine sets field value
func (o *CommitComment) SetLine(v int32) {
	o.Line.Set(&v)
}

// GetCommitId returns the CommitId field value
func (o *CommitComment) GetCommitId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value
// and a boolean to check if the value has been set.
func (o *CommitComment) GetCommitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitId, true
}

// SetCommitId sets field value
func (o *CommitComment) SetCommitId(v string) {
	o.CommitId = v
}

// GetUser returns the User field value
// If the value is explicit nil, the zero value for NullableSimpleUser will be returned
func (o *CommitComment) GetUser() NullableSimpleUser {
	if o == nil || o.User.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}

	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommitComment) GetUserOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// SetUser sets field value
func (o *CommitComment) SetUser(v NullableSimpleUser) {
	o.User.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *CommitComment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CommitComment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CommitComment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *CommitComment) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CommitComment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *CommitComment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetAuthorAssociation returns the AuthorAssociation field value
func (o *CommitComment) GetAuthorAssociation() AuthorAssociation {
	if o == nil {
		var ret AuthorAssociation
		return ret
	}

	return o.AuthorAssociation
}

// GetAuthorAssociationOk returns a tuple with the AuthorAssociation field value
// and a boolean to check if the value has been set.
func (o *CommitComment) GetAuthorAssociationOk() (*AuthorAssociation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorAssociation, true
}

// SetAuthorAssociation sets field value
func (o *CommitComment) SetAuthorAssociation(v AuthorAssociation) {
	o.AuthorAssociation = v
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *CommitComment) GetReactions() ReactionRollup {
	if o == nil || o.Reactions == nil {
		var ret ReactionRollup
		return ret
	}
	return *o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitComment) GetReactionsOk() (*ReactionRollup, bool) {
	if o == nil || o.Reactions == nil {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *CommitComment) HasReactions() bool {
	if o != nil && o.Reactions != nil {
		return true
	}

	return false
}

// SetReactions gets a reference to the given ReactionRollup and assigns it to the Reactions field.
func (o *CommitComment) SetReactions(v ReactionRollup) {
	o.Reactions = &v
}

func (o CommitComment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if true {
		toSerialize["body"] = o.Body
	}
	if true {
		toSerialize["path"] = o.Path.Get()
	}
	if true {
		toSerialize["position"] = o.Position.Get()
	}
	if true {
		toSerialize["line"] = o.Line.Get()
	}
	if true {
		toSerialize["commit_id"] = o.CommitId
	}
	if true {
		toSerialize["user"] = o.User.Get()
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["author_association"] = o.AuthorAssociation
	}
	if o.Reactions != nil {
		toSerialize["reactions"] = o.Reactions
	}
	return json.Marshal(toSerialize)
}

type NullableCommitComment struct {
	value *CommitComment
	isSet bool
}

func (v NullableCommitComment) Get() *CommitComment {
	return v.value
}

func (v *NullableCommitComment) Set(val *CommitComment) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitComment) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitComment(val *CommitComment) *NullableCommitComment {
	return &NullableCommitComment{value: val, isSet: true}
}

func (v NullableCommitComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


