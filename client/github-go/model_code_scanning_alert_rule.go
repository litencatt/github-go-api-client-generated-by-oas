/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// CodeScanningAlertRule struct for CodeScanningAlertRule
type CodeScanningAlertRule struct {
	// A unique identifier for the rule used to detect the alert.
	Id NullableString `json:"id,omitempty"`
	// The name of the rule used to detect the alert.
	Name *string `json:"name,omitempty"`
	// The severity of the alert.
	Severity NullableString `json:"severity,omitempty"`
	// The security severity of the alert.
	SecuritySeverityLevel NullableString `json:"security_severity_level,omitempty"`
	// A short description of the rule used to detect the alert.
	Description *string `json:"description,omitempty"`
	// description of the rule used to detect the alert.
	FullDescription *string `json:"full_description,omitempty"`
	// A set of tags applicable for the rule.
	Tags []string `json:"tags,omitempty"`
	// Detailed documentation for the rule as GitHub Flavored Markdown.
	Help NullableString `json:"help,omitempty"`
}

// NewCodeScanningAlertRule instantiates a new CodeScanningAlertRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeScanningAlertRule() *CodeScanningAlertRule {
	this := CodeScanningAlertRule{}
	return &this
}

// NewCodeScanningAlertRuleWithDefaults instantiates a new CodeScanningAlertRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeScanningAlertRuleWithDefaults() *CodeScanningAlertRule {
	this := CodeScanningAlertRule{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodeScanningAlertRule) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodeScanningAlertRule) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CodeScanningAlertRule) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CodeScanningAlertRule) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CodeScanningAlertRule) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CodeScanningAlertRule) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CodeScanningAlertRule) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertRule) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CodeScanningAlertRule) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CodeScanningAlertRule) SetName(v string) {
	o.Name = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodeScanningAlertRule) GetSeverity() string {
	if o == nil || o.Severity.Get() == nil {
		var ret string
		return ret
	}
	return *o.Severity.Get()
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodeScanningAlertRule) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Severity.Get(), o.Severity.IsSet()
}

// HasSeverity returns a boolean if a field has been set.
func (o *CodeScanningAlertRule) HasSeverity() bool {
	if o != nil && o.Severity.IsSet() {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given NullableString and assigns it to the Severity field.
func (o *CodeScanningAlertRule) SetSeverity(v string) {
	o.Severity.Set(&v)
}
// SetSeverityNil sets the value for Severity to be an explicit nil
func (o *CodeScanningAlertRule) SetSeverityNil() {
	o.Severity.Set(nil)
}

// UnsetSeverity ensures that no value is present for Severity, not even an explicit nil
func (o *CodeScanningAlertRule) UnsetSeverity() {
	o.Severity.Unset()
}

// GetSecuritySeverityLevel returns the SecuritySeverityLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodeScanningAlertRule) GetSecuritySeverityLevel() string {
	if o == nil || o.SecuritySeverityLevel.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecuritySeverityLevel.Get()
}

// GetSecuritySeverityLevelOk returns a tuple with the SecuritySeverityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodeScanningAlertRule) GetSecuritySeverityLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecuritySeverityLevel.Get(), o.SecuritySeverityLevel.IsSet()
}

// HasSecuritySeverityLevel returns a boolean if a field has been set.
func (o *CodeScanningAlertRule) HasSecuritySeverityLevel() bool {
	if o != nil && o.SecuritySeverityLevel.IsSet() {
		return true
	}

	return false
}

// SetSecuritySeverityLevel gets a reference to the given NullableString and assigns it to the SecuritySeverityLevel field.
func (o *CodeScanningAlertRule) SetSecuritySeverityLevel(v string) {
	o.SecuritySeverityLevel.Set(&v)
}
// SetSecuritySeverityLevelNil sets the value for SecuritySeverityLevel to be an explicit nil
func (o *CodeScanningAlertRule) SetSecuritySeverityLevelNil() {
	o.SecuritySeverityLevel.Set(nil)
}

// UnsetSecuritySeverityLevel ensures that no value is present for SecuritySeverityLevel, not even an explicit nil
func (o *CodeScanningAlertRule) UnsetSecuritySeverityLevel() {
	o.SecuritySeverityLevel.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CodeScanningAlertRule) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertRule) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CodeScanningAlertRule) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CodeScanningAlertRule) SetDescription(v string) {
	o.Description = &v
}

// GetFullDescription returns the FullDescription field value if set, zero value otherwise.
func (o *CodeScanningAlertRule) GetFullDescription() string {
	if o == nil || o.FullDescription == nil {
		var ret string
		return ret
	}
	return *o.FullDescription
}

// GetFullDescriptionOk returns a tuple with the FullDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertRule) GetFullDescriptionOk() (*string, bool) {
	if o == nil || o.FullDescription == nil {
		return nil, false
	}
	return o.FullDescription, true
}

// HasFullDescription returns a boolean if a field has been set.
func (o *CodeScanningAlertRule) HasFullDescription() bool {
	if o != nil && o.FullDescription != nil {
		return true
	}

	return false
}

// SetFullDescription gets a reference to the given string and assigns it to the FullDescription field.
func (o *CodeScanningAlertRule) SetFullDescription(v string) {
	o.FullDescription = &v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodeScanningAlertRule) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodeScanningAlertRule) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CodeScanningAlertRule) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CodeScanningAlertRule) SetTags(v []string) {
	o.Tags = v
}

// GetHelp returns the Help field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodeScanningAlertRule) GetHelp() string {
	if o == nil || o.Help.Get() == nil {
		var ret string
		return ret
	}
	return *o.Help.Get()
}

// GetHelpOk returns a tuple with the Help field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodeScanningAlertRule) GetHelpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Help.Get(), o.Help.IsSet()
}

// HasHelp returns a boolean if a field has been set.
func (o *CodeScanningAlertRule) HasHelp() bool {
	if o != nil && o.Help.IsSet() {
		return true
	}

	return false
}

// SetHelp gets a reference to the given NullableString and assigns it to the Help field.
func (o *CodeScanningAlertRule) SetHelp(v string) {
	o.Help.Set(&v)
}
// SetHelpNil sets the value for Help to be an explicit nil
func (o *CodeScanningAlertRule) SetHelpNil() {
	o.Help.Set(nil)
}

// UnsetHelp ensures that no value is present for Help, not even an explicit nil
func (o *CodeScanningAlertRule) UnsetHelp() {
	o.Help.Unset()
}

func (o CodeScanningAlertRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Severity.IsSet() {
		toSerialize["severity"] = o.Severity.Get()
	}
	if o.SecuritySeverityLevel.IsSet() {
		toSerialize["security_severity_level"] = o.SecuritySeverityLevel.Get()
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.FullDescription != nil {
		toSerialize["full_description"] = o.FullDescription
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Help.IsSet() {
		toSerialize["help"] = o.Help.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCodeScanningAlertRule struct {
	value *CodeScanningAlertRule
	isSet bool
}

func (v NullableCodeScanningAlertRule) Get() *CodeScanningAlertRule {
	return v.value
}

func (v *NullableCodeScanningAlertRule) Set(val *CodeScanningAlertRule) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeScanningAlertRule) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeScanningAlertRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeScanningAlertRule(val *CodeScanningAlertRule) *NullableCodeScanningAlertRule {
	return &NullableCodeScanningAlertRule{value: val, isSet: true}
}

func (v NullableCodeScanningAlertRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeScanningAlertRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


