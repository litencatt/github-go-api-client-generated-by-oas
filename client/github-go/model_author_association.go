/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// AuthorAssociation How the author is associated with the repository.
type AuthorAssociation string

// List of author-association
const (
	COLLABORATOR AuthorAssociation = "COLLABORATOR"
	CONTRIBUTOR AuthorAssociation = "CONTRIBUTOR"
	FIRST_TIMER AuthorAssociation = "FIRST_TIMER"
	FIRST_TIME_CONTRIBUTOR AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	MANNEQUIN AuthorAssociation = "MANNEQUIN"
	MEMBER AuthorAssociation = "MEMBER"
	NONE AuthorAssociation = "NONE"
	OWNER AuthorAssociation = "OWNER"
)

// All allowed values of AuthorAssociation enum
var AllowedAuthorAssociationEnumValues = []AuthorAssociation{
	"COLLABORATOR",
	"CONTRIBUTOR",
	"FIRST_TIMER",
	"FIRST_TIME_CONTRIBUTOR",
	"MANNEQUIN",
	"MEMBER",
	"NONE",
	"OWNER",
}

func (v *AuthorAssociation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthorAssociation(value)
	for _, existing := range AllowedAuthorAssociationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthorAssociation", value)
}

// NewAuthorAssociationFromValue returns a pointer to a valid AuthorAssociation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthorAssociationFromValue(v string) (*AuthorAssociation, error) {
	ev := AuthorAssociation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthorAssociation: valid values are %v", v, AllowedAuthorAssociationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthorAssociation) IsValid() bool {
	for _, existing := range AllowedAuthorAssociationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to author-association value
func (v AuthorAssociation) Ptr() *AuthorAssociation {
	return &v
}

type NullableAuthorAssociation struct {
	value *AuthorAssociation
	isSet bool
}

func (v NullableAuthorAssociation) Get() *AuthorAssociation {
	return v.value
}

func (v *NullableAuthorAssociation) Set(val *AuthorAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorAssociation(val *AuthorAssociation) *NullableAuthorAssociation {
	return &NullableAuthorAssociation{value: val, isSet: true}
}

func (v NullableAuthorAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

