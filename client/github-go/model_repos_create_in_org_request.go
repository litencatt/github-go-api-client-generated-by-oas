/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReposCreateInOrgRequest struct for ReposCreateInOrgRequest
type ReposCreateInOrgRequest struct {
	// The name of the repository.
	Name string `json:"name"`
	// A short description of the repository.
	Description *string `json:"description,omitempty"`
	// A URL with more information about the repository.
	Homepage *string `json:"homepage,omitempty"`
	// Whether the repository is private.
	Private *bool `json:"private,omitempty"`
	// Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see \"[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\" in the GitHub Help documentation.
	Visibility *string `json:"visibility,omitempty"`
	// Either `true` to enable issues for this repository or `false` to disable them.
	HasIssues *bool `json:"has_issues,omitempty"`
	// Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
	HasProjects *bool `json:"has_projects,omitempty"`
	// Either `true` to enable the wiki for this repository or `false` to disable it.
	HasWiki *bool `json:"has_wiki,omitempty"`
	// Either `true` to make this repo available as a template repository or `false` to prevent it.
	IsTemplate *bool `json:"is_template,omitempty"`
	// The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
	TeamId *int32 `json:"team_id,omitempty"`
	// Pass `true` to create an initial commit with empty README.
	AutoInit *bool `json:"auto_init,omitempty"`
	// Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".
	GitignoreTemplate *string `json:"gitignore_template,omitempty"`
	// Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".
	LicenseTemplate *string `json:"license_template,omitempty"`
	// Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	// Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	// Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	// Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	// Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	// Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
}

// NewReposCreateInOrgRequest instantiates a new ReposCreateInOrgRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReposCreateInOrgRequest(name string) *ReposCreateInOrgRequest {
	this := ReposCreateInOrgRequest{}
	this.Name = name
	var private bool = false
	this.Private = &private
	var hasIssues bool = true
	this.HasIssues = &hasIssues
	var hasProjects bool = true
	this.HasProjects = &hasProjects
	var hasWiki bool = true
	this.HasWiki = &hasWiki
	var isTemplate bool = false
	this.IsTemplate = &isTemplate
	var autoInit bool = false
	this.AutoInit = &autoInit
	var allowSquashMerge bool = true
	this.AllowSquashMerge = &allowSquashMerge
	var allowMergeCommit bool = true
	this.AllowMergeCommit = &allowMergeCommit
	var allowRebaseMerge bool = true
	this.AllowRebaseMerge = &allowRebaseMerge
	var allowAutoMerge bool = false
	this.AllowAutoMerge = &allowAutoMerge
	var deleteBranchOnMerge bool = false
	this.DeleteBranchOnMerge = &deleteBranchOnMerge
	var useSquashPrTitleAsDefault bool = false
	this.UseSquashPrTitleAsDefault = &useSquashPrTitleAsDefault
	return &this
}

// NewReposCreateInOrgRequestWithDefaults instantiates a new ReposCreateInOrgRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReposCreateInOrgRequestWithDefaults() *ReposCreateInOrgRequest {
	this := ReposCreateInOrgRequest{}
	var private bool = false
	this.Private = &private
	var hasIssues bool = true
	this.HasIssues = &hasIssues
	var hasProjects bool = true
	this.HasProjects = &hasProjects
	var hasWiki bool = true
	this.HasWiki = &hasWiki
	var isTemplate bool = false
	this.IsTemplate = &isTemplate
	var autoInit bool = false
	this.AutoInit = &autoInit
	var allowSquashMerge bool = true
	this.AllowSquashMerge = &allowSquashMerge
	var allowMergeCommit bool = true
	this.AllowMergeCommit = &allowMergeCommit
	var allowRebaseMerge bool = true
	this.AllowRebaseMerge = &allowRebaseMerge
	var allowAutoMerge bool = false
	this.AllowAutoMerge = &allowAutoMerge
	var deleteBranchOnMerge bool = false
	this.DeleteBranchOnMerge = &deleteBranchOnMerge
	var useSquashPrTitleAsDefault bool = false
	this.UseSquashPrTitleAsDefault = &useSquashPrTitleAsDefault
	return &this
}

// GetName returns the Name field value
func (o *ReposCreateInOrgRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ReposCreateInOrgRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReposCreateInOrgRequest) SetDescription(v string) {
	o.Description = &v
}

// GetHomepage returns the Homepage field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetHomepage() string {
	if o == nil || o.Homepage == nil {
		var ret string
		return ret
	}
	return *o.Homepage
}

// GetHomepageOk returns a tuple with the Homepage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetHomepageOk() (*string, bool) {
	if o == nil || o.Homepage == nil {
		return nil, false
	}
	return o.Homepage, true
}

// HasHomepage returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasHomepage() bool {
	if o != nil && o.Homepage != nil {
		return true
	}

	return false
}

// SetHomepage gets a reference to the given string and assigns it to the Homepage field.
func (o *ReposCreateInOrgRequest) SetHomepage(v string) {
	o.Homepage = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetPrivate() bool {
	if o == nil || o.Private == nil {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetPrivateOk() (*bool, bool) {
	if o == nil || o.Private == nil {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasPrivate() bool {
	if o != nil && o.Private != nil {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *ReposCreateInOrgRequest) SetPrivate(v bool) {
	o.Private = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *ReposCreateInOrgRequest) SetVisibility(v string) {
	o.Visibility = &v
}

// GetHasIssues returns the HasIssues field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetHasIssues() bool {
	if o == nil || o.HasIssues == nil {
		var ret bool
		return ret
	}
	return *o.HasIssues
}

// GetHasIssuesOk returns a tuple with the HasIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetHasIssuesOk() (*bool, bool) {
	if o == nil || o.HasIssues == nil {
		return nil, false
	}
	return o.HasIssues, true
}

// HasHasIssues returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasHasIssues() bool {
	if o != nil && o.HasIssues != nil {
		return true
	}

	return false
}

// SetHasIssues gets a reference to the given bool and assigns it to the HasIssues field.
func (o *ReposCreateInOrgRequest) SetHasIssues(v bool) {
	o.HasIssues = &v
}

// GetHasProjects returns the HasProjects field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetHasProjects() bool {
	if o == nil || o.HasProjects == nil {
		var ret bool
		return ret
	}
	return *o.HasProjects
}

// GetHasProjectsOk returns a tuple with the HasProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetHasProjectsOk() (*bool, bool) {
	if o == nil || o.HasProjects == nil {
		return nil, false
	}
	return o.HasProjects, true
}

// HasHasProjects returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasHasProjects() bool {
	if o != nil && o.HasProjects != nil {
		return true
	}

	return false
}

// SetHasProjects gets a reference to the given bool and assigns it to the HasProjects field.
func (o *ReposCreateInOrgRequest) SetHasProjects(v bool) {
	o.HasProjects = &v
}

// GetHasWiki returns the HasWiki field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetHasWiki() bool {
	if o == nil || o.HasWiki == nil {
		var ret bool
		return ret
	}
	return *o.HasWiki
}

// GetHasWikiOk returns a tuple with the HasWiki field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetHasWikiOk() (*bool, bool) {
	if o == nil || o.HasWiki == nil {
		return nil, false
	}
	return o.HasWiki, true
}

// HasHasWiki returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasHasWiki() bool {
	if o != nil && o.HasWiki != nil {
		return true
	}

	return false
}

// SetHasWiki gets a reference to the given bool and assigns it to the HasWiki field.
func (o *ReposCreateInOrgRequest) SetHasWiki(v bool) {
	o.HasWiki = &v
}

// GetIsTemplate returns the IsTemplate field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetIsTemplate() bool {
	if o == nil || o.IsTemplate == nil {
		var ret bool
		return ret
	}
	return *o.IsTemplate
}

// GetIsTemplateOk returns a tuple with the IsTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetIsTemplateOk() (*bool, bool) {
	if o == nil || o.IsTemplate == nil {
		return nil, false
	}
	return o.IsTemplate, true
}

// HasIsTemplate returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasIsTemplate() bool {
	if o != nil && o.IsTemplate != nil {
		return true
	}

	return false
}

// SetIsTemplate gets a reference to the given bool and assigns it to the IsTemplate field.
func (o *ReposCreateInOrgRequest) SetIsTemplate(v bool) {
	o.IsTemplate = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetTeamId() int32 {
	if o == nil || o.TeamId == nil {
		var ret int32
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetTeamIdOk() (*int32, bool) {
	if o == nil || o.TeamId == nil {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasTeamId() bool {
	if o != nil && o.TeamId != nil {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given int32 and assigns it to the TeamId field.
func (o *ReposCreateInOrgRequest) SetTeamId(v int32) {
	o.TeamId = &v
}

// GetAutoInit returns the AutoInit field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetAutoInit() bool {
	if o == nil || o.AutoInit == nil {
		var ret bool
		return ret
	}
	return *o.AutoInit
}

// GetAutoInitOk returns a tuple with the AutoInit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetAutoInitOk() (*bool, bool) {
	if o == nil || o.AutoInit == nil {
		return nil, false
	}
	return o.AutoInit, true
}

// HasAutoInit returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasAutoInit() bool {
	if o != nil && o.AutoInit != nil {
		return true
	}

	return false
}

// SetAutoInit gets a reference to the given bool and assigns it to the AutoInit field.
func (o *ReposCreateInOrgRequest) SetAutoInit(v bool) {
	o.AutoInit = &v
}

// GetGitignoreTemplate returns the GitignoreTemplate field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetGitignoreTemplate() string {
	if o == nil || o.GitignoreTemplate == nil {
		var ret string
		return ret
	}
	return *o.GitignoreTemplate
}

// GetGitignoreTemplateOk returns a tuple with the GitignoreTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetGitignoreTemplateOk() (*string, bool) {
	if o == nil || o.GitignoreTemplate == nil {
		return nil, false
	}
	return o.GitignoreTemplate, true
}

// HasGitignoreTemplate returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasGitignoreTemplate() bool {
	if o != nil && o.GitignoreTemplate != nil {
		return true
	}

	return false
}

// SetGitignoreTemplate gets a reference to the given string and assigns it to the GitignoreTemplate field.
func (o *ReposCreateInOrgRequest) SetGitignoreTemplate(v string) {
	o.GitignoreTemplate = &v
}

// GetLicenseTemplate returns the LicenseTemplate field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetLicenseTemplate() string {
	if o == nil || o.LicenseTemplate == nil {
		var ret string
		return ret
	}
	return *o.LicenseTemplate
}

// GetLicenseTemplateOk returns a tuple with the LicenseTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetLicenseTemplateOk() (*string, bool) {
	if o == nil || o.LicenseTemplate == nil {
		return nil, false
	}
	return o.LicenseTemplate, true
}

// HasLicenseTemplate returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasLicenseTemplate() bool {
	if o != nil && o.LicenseTemplate != nil {
		return true
	}

	return false
}

// SetLicenseTemplate gets a reference to the given string and assigns it to the LicenseTemplate field.
func (o *ReposCreateInOrgRequest) SetLicenseTemplate(v string) {
	o.LicenseTemplate = &v
}

// GetAllowSquashMerge returns the AllowSquashMerge field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetAllowSquashMerge() bool {
	if o == nil || o.AllowSquashMerge == nil {
		var ret bool
		return ret
	}
	return *o.AllowSquashMerge
}

// GetAllowSquashMergeOk returns a tuple with the AllowSquashMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetAllowSquashMergeOk() (*bool, bool) {
	if o == nil || o.AllowSquashMerge == nil {
		return nil, false
	}
	return o.AllowSquashMerge, true
}

// HasAllowSquashMerge returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasAllowSquashMerge() bool {
	if o != nil && o.AllowSquashMerge != nil {
		return true
	}

	return false
}

// SetAllowSquashMerge gets a reference to the given bool and assigns it to the AllowSquashMerge field.
func (o *ReposCreateInOrgRequest) SetAllowSquashMerge(v bool) {
	o.AllowSquashMerge = &v
}

// GetAllowMergeCommit returns the AllowMergeCommit field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetAllowMergeCommit() bool {
	if o == nil || o.AllowMergeCommit == nil {
		var ret bool
		return ret
	}
	return *o.AllowMergeCommit
}

// GetAllowMergeCommitOk returns a tuple with the AllowMergeCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetAllowMergeCommitOk() (*bool, bool) {
	if o == nil || o.AllowMergeCommit == nil {
		return nil, false
	}
	return o.AllowMergeCommit, true
}

// HasAllowMergeCommit returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasAllowMergeCommit() bool {
	if o != nil && o.AllowMergeCommit != nil {
		return true
	}

	return false
}

// SetAllowMergeCommit gets a reference to the given bool and assigns it to the AllowMergeCommit field.
func (o *ReposCreateInOrgRequest) SetAllowMergeCommit(v bool) {
	o.AllowMergeCommit = &v
}

// GetAllowRebaseMerge returns the AllowRebaseMerge field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetAllowRebaseMerge() bool {
	if o == nil || o.AllowRebaseMerge == nil {
		var ret bool
		return ret
	}
	return *o.AllowRebaseMerge
}

// GetAllowRebaseMergeOk returns a tuple with the AllowRebaseMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetAllowRebaseMergeOk() (*bool, bool) {
	if o == nil || o.AllowRebaseMerge == nil {
		return nil, false
	}
	return o.AllowRebaseMerge, true
}

// HasAllowRebaseMerge returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasAllowRebaseMerge() bool {
	if o != nil && o.AllowRebaseMerge != nil {
		return true
	}

	return false
}

// SetAllowRebaseMerge gets a reference to the given bool and assigns it to the AllowRebaseMerge field.
func (o *ReposCreateInOrgRequest) SetAllowRebaseMerge(v bool) {
	o.AllowRebaseMerge = &v
}

// GetAllowAutoMerge returns the AllowAutoMerge field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetAllowAutoMerge() bool {
	if o == nil || o.AllowAutoMerge == nil {
		var ret bool
		return ret
	}
	return *o.AllowAutoMerge
}

// GetAllowAutoMergeOk returns a tuple with the AllowAutoMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetAllowAutoMergeOk() (*bool, bool) {
	if o == nil || o.AllowAutoMerge == nil {
		return nil, false
	}
	return o.AllowAutoMerge, true
}

// HasAllowAutoMerge returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasAllowAutoMerge() bool {
	if o != nil && o.AllowAutoMerge != nil {
		return true
	}

	return false
}

// SetAllowAutoMerge gets a reference to the given bool and assigns it to the AllowAutoMerge field.
func (o *ReposCreateInOrgRequest) SetAllowAutoMerge(v bool) {
	o.AllowAutoMerge = &v
}

// GetDeleteBranchOnMerge returns the DeleteBranchOnMerge field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetDeleteBranchOnMerge() bool {
	if o == nil || o.DeleteBranchOnMerge == nil {
		var ret bool
		return ret
	}
	return *o.DeleteBranchOnMerge
}

// GetDeleteBranchOnMergeOk returns a tuple with the DeleteBranchOnMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetDeleteBranchOnMergeOk() (*bool, bool) {
	if o == nil || o.DeleteBranchOnMerge == nil {
		return nil, false
	}
	return o.DeleteBranchOnMerge, true
}

// HasDeleteBranchOnMerge returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasDeleteBranchOnMerge() bool {
	if o != nil && o.DeleteBranchOnMerge != nil {
		return true
	}

	return false
}

// SetDeleteBranchOnMerge gets a reference to the given bool and assigns it to the DeleteBranchOnMerge field.
func (o *ReposCreateInOrgRequest) SetDeleteBranchOnMerge(v bool) {
	o.DeleteBranchOnMerge = &v
}

// GetUseSquashPrTitleAsDefault returns the UseSquashPrTitleAsDefault field value if set, zero value otherwise.
func (o *ReposCreateInOrgRequest) GetUseSquashPrTitleAsDefault() bool {
	if o == nil || o.UseSquashPrTitleAsDefault == nil {
		var ret bool
		return ret
	}
	return *o.UseSquashPrTitleAsDefault
}

// GetUseSquashPrTitleAsDefaultOk returns a tuple with the UseSquashPrTitleAsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposCreateInOrgRequest) GetUseSquashPrTitleAsDefaultOk() (*bool, bool) {
	if o == nil || o.UseSquashPrTitleAsDefault == nil {
		return nil, false
	}
	return o.UseSquashPrTitleAsDefault, true
}

// HasUseSquashPrTitleAsDefault returns a boolean if a field has been set.
func (o *ReposCreateInOrgRequest) HasUseSquashPrTitleAsDefault() bool {
	if o != nil && o.UseSquashPrTitleAsDefault != nil {
		return true
	}

	return false
}

// SetUseSquashPrTitleAsDefault gets a reference to the given bool and assigns it to the UseSquashPrTitleAsDefault field.
func (o *ReposCreateInOrgRequest) SetUseSquashPrTitleAsDefault(v bool) {
	o.UseSquashPrTitleAsDefault = &v
}

func (o ReposCreateInOrgRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Homepage != nil {
		toSerialize["homepage"] = o.Homepage
	}
	if o.Private != nil {
		toSerialize["private"] = o.Private
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.HasIssues != nil {
		toSerialize["has_issues"] = o.HasIssues
	}
	if o.HasProjects != nil {
		toSerialize["has_projects"] = o.HasProjects
	}
	if o.HasWiki != nil {
		toSerialize["has_wiki"] = o.HasWiki
	}
	if o.IsTemplate != nil {
		toSerialize["is_template"] = o.IsTemplate
	}
	if o.TeamId != nil {
		toSerialize["team_id"] = o.TeamId
	}
	if o.AutoInit != nil {
		toSerialize["auto_init"] = o.AutoInit
	}
	if o.GitignoreTemplate != nil {
		toSerialize["gitignore_template"] = o.GitignoreTemplate
	}
	if o.LicenseTemplate != nil {
		toSerialize["license_template"] = o.LicenseTemplate
	}
	if o.AllowSquashMerge != nil {
		toSerialize["allow_squash_merge"] = o.AllowSquashMerge
	}
	if o.AllowMergeCommit != nil {
		toSerialize["allow_merge_commit"] = o.AllowMergeCommit
	}
	if o.AllowRebaseMerge != nil {
		toSerialize["allow_rebase_merge"] = o.AllowRebaseMerge
	}
	if o.AllowAutoMerge != nil {
		toSerialize["allow_auto_merge"] = o.AllowAutoMerge
	}
	if o.DeleteBranchOnMerge != nil {
		toSerialize["delete_branch_on_merge"] = o.DeleteBranchOnMerge
	}
	if o.UseSquashPrTitleAsDefault != nil {
		toSerialize["use_squash_pr_title_as_default"] = o.UseSquashPrTitleAsDefault
	}
	return json.Marshal(toSerialize)
}

type NullableReposCreateInOrgRequest struct {
	value *ReposCreateInOrgRequest
	isSet bool
}

func (v NullableReposCreateInOrgRequest) Get() *ReposCreateInOrgRequest {
	return v.value
}

func (v *NullableReposCreateInOrgRequest) Set(val *ReposCreateInOrgRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReposCreateInOrgRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReposCreateInOrgRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposCreateInOrgRequest(val *ReposCreateInOrgRequest) *NullableReposCreateInOrgRequest {
	return &NullableReposCreateInOrgRequest{value: val, isSet: true}
}

func (v NullableReposCreateInOrgRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposCreateInOrgRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


