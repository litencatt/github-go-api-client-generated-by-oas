/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ActionsCacheUsageByRepository GitHub Actions Cache Usage by repository.
type ActionsCacheUsageByRepository struct {
	// The repository owner and name for the cache usage being shown.
	FullName string `json:"full_name"`
	// The sum of the size in bytes of all the active cache items in the repository.
	ActiveCachesSizeInBytes int32 `json:"active_caches_size_in_bytes"`
	// The number of active caches in the repository.
	ActiveCachesCount int32 `json:"active_caches_count"`
}

// NewActionsCacheUsageByRepository instantiates a new ActionsCacheUsageByRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionsCacheUsageByRepository(fullName string, activeCachesSizeInBytes int32, activeCachesCount int32) *ActionsCacheUsageByRepository {
	this := ActionsCacheUsageByRepository{}
	this.FullName = fullName
	this.ActiveCachesSizeInBytes = activeCachesSizeInBytes
	this.ActiveCachesCount = activeCachesCount
	return &this
}

// NewActionsCacheUsageByRepositoryWithDefaults instantiates a new ActionsCacheUsageByRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionsCacheUsageByRepositoryWithDefaults() *ActionsCacheUsageByRepository {
	this := ActionsCacheUsageByRepository{}
	return &this
}

// GetFullName returns the FullName field value
func (o *ActionsCacheUsageByRepository) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *ActionsCacheUsageByRepository) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *ActionsCacheUsageByRepository) SetFullName(v string) {
	o.FullName = v
}

// GetActiveCachesSizeInBytes returns the ActiveCachesSizeInBytes field value
func (o *ActionsCacheUsageByRepository) GetActiveCachesSizeInBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ActiveCachesSizeInBytes
}

// GetActiveCachesSizeInBytesOk returns a tuple with the ActiveCachesSizeInBytes field value
// and a boolean to check if the value has been set.
func (o *ActionsCacheUsageByRepository) GetActiveCachesSizeInBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveCachesSizeInBytes, true
}

// SetActiveCachesSizeInBytes sets field value
func (o *ActionsCacheUsageByRepository) SetActiveCachesSizeInBytes(v int32) {
	o.ActiveCachesSizeInBytes = v
}

// GetActiveCachesCount returns the ActiveCachesCount field value
func (o *ActionsCacheUsageByRepository) GetActiveCachesCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ActiveCachesCount
}

// GetActiveCachesCountOk returns a tuple with the ActiveCachesCount field value
// and a boolean to check if the value has been set.
func (o *ActionsCacheUsageByRepository) GetActiveCachesCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveCachesCount, true
}

// SetActiveCachesCount sets field value
func (o *ActionsCacheUsageByRepository) SetActiveCachesCount(v int32) {
	o.ActiveCachesCount = v
}

func (o ActionsCacheUsageByRepository) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["full_name"] = o.FullName
	}
	if true {
		toSerialize["active_caches_size_in_bytes"] = o.ActiveCachesSizeInBytes
	}
	if true {
		toSerialize["active_caches_count"] = o.ActiveCachesCount
	}
	return json.Marshal(toSerialize)
}

type NullableActionsCacheUsageByRepository struct {
	value *ActionsCacheUsageByRepository
	isSet bool
}

func (v NullableActionsCacheUsageByRepository) Get() *ActionsCacheUsageByRepository {
	return v.value
}

func (v *NullableActionsCacheUsageByRepository) Set(val *ActionsCacheUsageByRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableActionsCacheUsageByRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableActionsCacheUsageByRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionsCacheUsageByRepository(val *ActionsCacheUsageByRepository) *NullableActionsCacheUsageByRepository {
	return &NullableActionsCacheUsageByRepository{value: val, isSet: true}
}

func (v NullableActionsCacheUsageByRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionsCacheUsageByRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


