/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReposDeleteFileRequest struct for ReposDeleteFileRequest
type ReposDeleteFileRequest struct {
	// The commit message.
	Message string `json:"message"`
	// The blob SHA of the file being replaced.
	Sha string `json:"sha"`
	// The branch name. Default: the repositoryâ€™s default branch (usually `master`)
	Branch *string `json:"branch,omitempty"`
	Committer *ReposDeleteFileRequestCommitter `json:"committer,omitempty"`
	Author *ReposDeleteFileRequestAuthor `json:"author,omitempty"`
}

// NewReposDeleteFileRequest instantiates a new ReposDeleteFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReposDeleteFileRequest(message string, sha string) *ReposDeleteFileRequest {
	this := ReposDeleteFileRequest{}
	this.Message = message
	this.Sha = sha
	return &this
}

// NewReposDeleteFileRequestWithDefaults instantiates a new ReposDeleteFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReposDeleteFileRequestWithDefaults() *ReposDeleteFileRequest {
	this := ReposDeleteFileRequest{}
	return &this
}

// GetMessage returns the Message field value
func (o *ReposDeleteFileRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ReposDeleteFileRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ReposDeleteFileRequest) SetMessage(v string) {
	o.Message = v
}

// GetSha returns the Sha field value
func (o *ReposDeleteFileRequest) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *ReposDeleteFileRequest) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *ReposDeleteFileRequest) SetSha(v string) {
	o.Sha = v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *ReposDeleteFileRequest) GetBranch() string {
	if o == nil || o.Branch == nil {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposDeleteFileRequest) GetBranchOk() (*string, bool) {
	if o == nil || o.Branch == nil {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *ReposDeleteFileRequest) HasBranch() bool {
	if o != nil && o.Branch != nil {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *ReposDeleteFileRequest) SetBranch(v string) {
	o.Branch = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *ReposDeleteFileRequest) GetCommitter() ReposDeleteFileRequestCommitter {
	if o == nil || o.Committer == nil {
		var ret ReposDeleteFileRequestCommitter
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposDeleteFileRequest) GetCommitterOk() (*ReposDeleteFileRequestCommitter, bool) {
	if o == nil || o.Committer == nil {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *ReposDeleteFileRequest) HasCommitter() bool {
	if o != nil && o.Committer != nil {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given ReposDeleteFileRequestCommitter and assigns it to the Committer field.
func (o *ReposDeleteFileRequest) SetCommitter(v ReposDeleteFileRequestCommitter) {
	o.Committer = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ReposDeleteFileRequest) GetAuthor() ReposDeleteFileRequestAuthor {
	if o == nil || o.Author == nil {
		var ret ReposDeleteFileRequestAuthor
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposDeleteFileRequest) GetAuthorOk() (*ReposDeleteFileRequestAuthor, bool) {
	if o == nil || o.Author == nil {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ReposDeleteFileRequest) HasAuthor() bool {
	if o != nil && o.Author != nil {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given ReposDeleteFileRequestAuthor and assigns it to the Author field.
func (o *ReposDeleteFileRequest) SetAuthor(v ReposDeleteFileRequestAuthor) {
	o.Author = &v
}

func (o ReposDeleteFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["sha"] = o.Sha
	}
	if o.Branch != nil {
		toSerialize["branch"] = o.Branch
	}
	if o.Committer != nil {
		toSerialize["committer"] = o.Committer
	}
	if o.Author != nil {
		toSerialize["author"] = o.Author
	}
	return json.Marshal(toSerialize)
}

type NullableReposDeleteFileRequest struct {
	value *ReposDeleteFileRequest
	isSet bool
}

func (v NullableReposDeleteFileRequest) Get() *ReposDeleteFileRequest {
	return v.value
}

func (v *NullableReposDeleteFileRequest) Set(val *ReposDeleteFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReposDeleteFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReposDeleteFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposDeleteFileRequest(val *ReposDeleteFileRequest) *NullableReposDeleteFileRequest {
	return &NullableReposDeleteFileRequest{value: val, isSet: true}
}

func (v NullableReposDeleteFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposDeleteFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


