/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// SecretScanningUpdateAlertRequest struct for SecretScanningUpdateAlertRequest
type SecretScanningUpdateAlertRequest struct {
	State SecretScanningAlertState `json:"state"`
	Resolution NullableSecretScanningAlertResolution `json:"resolution,omitempty"`
}

// NewSecretScanningUpdateAlertRequest instantiates a new SecretScanningUpdateAlertRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretScanningUpdateAlertRequest(state SecretScanningAlertState) *SecretScanningUpdateAlertRequest {
	this := SecretScanningUpdateAlertRequest{}
	this.State = state
	return &this
}

// NewSecretScanningUpdateAlertRequestWithDefaults instantiates a new SecretScanningUpdateAlertRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretScanningUpdateAlertRequestWithDefaults() *SecretScanningUpdateAlertRequest {
	this := SecretScanningUpdateAlertRequest{}
	return &this
}

// GetState returns the State field value
func (o *SecretScanningUpdateAlertRequest) GetState() SecretScanningAlertState {
	if o == nil {
		var ret SecretScanningAlertState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SecretScanningUpdateAlertRequest) GetStateOk() (*SecretScanningAlertState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SecretScanningUpdateAlertRequest) SetState(v SecretScanningAlertState) {
	o.State = v
}

// GetResolution returns the Resolution field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecretScanningUpdateAlertRequest) GetResolution() SecretScanningAlertResolution {
	if o == nil || o.Resolution.Get() == nil {
		var ret SecretScanningAlertResolution
		return ret
	}
	return *o.Resolution.Get()
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecretScanningUpdateAlertRequest) GetResolutionOk() (*SecretScanningAlertResolution, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resolution.Get(), o.Resolution.IsSet()
}

// HasResolution returns a boolean if a field has been set.
func (o *SecretScanningUpdateAlertRequest) HasResolution() bool {
	if o != nil && o.Resolution.IsSet() {
		return true
	}

	return false
}

// SetResolution gets a reference to the given NullableSecretScanningAlertResolution and assigns it to the Resolution field.
func (o *SecretScanningUpdateAlertRequest) SetResolution(v SecretScanningAlertResolution) {
	o.Resolution.Set(&v)
}
// SetResolutionNil sets the value for Resolution to be an explicit nil
func (o *SecretScanningUpdateAlertRequest) SetResolutionNil() {
	o.Resolution.Set(nil)
}

// UnsetResolution ensures that no value is present for Resolution, not even an explicit nil
func (o *SecretScanningUpdateAlertRequest) UnsetResolution() {
	o.Resolution.Unset()
}

func (o SecretScanningUpdateAlertRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["state"] = o.State
	}
	if o.Resolution.IsSet() {
		toSerialize["resolution"] = o.Resolution.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSecretScanningUpdateAlertRequest struct {
	value *SecretScanningUpdateAlertRequest
	isSet bool
}

func (v NullableSecretScanningUpdateAlertRequest) Get() *SecretScanningUpdateAlertRequest {
	return v.value
}

func (v *NullableSecretScanningUpdateAlertRequest) Set(val *SecretScanningUpdateAlertRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretScanningUpdateAlertRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretScanningUpdateAlertRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretScanningUpdateAlertRequest(val *SecretScanningUpdateAlertRequest) *NullableSecretScanningUpdateAlertRequest {
	return &NullableSecretScanningUpdateAlertRequest{value: val, isSet: true}
}

func (v NullableSecretScanningUpdateAlertRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretScanningUpdateAlertRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


