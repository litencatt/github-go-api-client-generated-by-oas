/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// Commit Commit
type Commit struct {
	Url string `json:"url"`
	Sha string `json:"sha"`
	NodeId string `json:"node_id"`
	HtmlUrl string `json:"html_url"`
	CommentsUrl string `json:"comments_url"`
	Commit CommitCommit `json:"commit"`
	Author NullableNullableSimpleUser `json:"author"`
	Committer NullableNullableSimpleUser `json:"committer"`
	Parents []CommitParentsInner `json:"parents"`
	Stats *CommitStats `json:"stats,omitempty"`
	Files []DiffEntry `json:"files,omitempty"`
}

// NewCommit instantiates a new Commit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommit(url string, sha string, nodeId string, htmlUrl string, commentsUrl string, commit CommitCommit, author NullableNullableSimpleUser, committer NullableNullableSimpleUser, parents []CommitParentsInner) *Commit {
	this := Commit{}
	this.Url = url
	this.Sha = sha
	this.NodeId = nodeId
	this.HtmlUrl = htmlUrl
	this.CommentsUrl = commentsUrl
	this.Commit = commit
	this.Author = author
	this.Committer = committer
	this.Parents = parents
	return &this
}

// NewCommitWithDefaults instantiates a new Commit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitWithDefaults() *Commit {
	this := Commit{}
	return &this
}

// GetUrl returns the Url field value
func (o *Commit) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Commit) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Commit) SetUrl(v string) {
	o.Url = v
}

// GetSha returns the Sha field value
func (o *Commit) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *Commit) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *Commit) SetSha(v string) {
	o.Sha = v
}

// GetNodeId returns the NodeId field value
func (o *Commit) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *Commit) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *Commit) SetNodeId(v string) {
	o.NodeId = v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *Commit) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *Commit) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *Commit) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetCommentsUrl returns the CommentsUrl field value
func (o *Commit) GetCommentsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommentsUrl
}

// GetCommentsUrlOk returns a tuple with the CommentsUrl field value
// and a boolean to check if the value has been set.
func (o *Commit) GetCommentsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommentsUrl, true
}

// SetCommentsUrl sets field value
func (o *Commit) SetCommentsUrl(v string) {
	o.CommentsUrl = v
}

// GetCommit returns the Commit field value
func (o *Commit) GetCommit() CommitCommit {
	if o == nil {
		var ret CommitCommit
		return ret
	}

	return o.Commit
}

// GetCommitOk returns a tuple with the Commit field value
// and a boolean to check if the value has been set.
func (o *Commit) GetCommitOk() (*CommitCommit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Commit, true
}

// SetCommit sets field value
func (o *Commit) SetCommit(v CommitCommit) {
	o.Commit = v
}

// GetAuthor returns the Author field value
// If the value is explicit nil, the zero value for NullableSimpleUser will be returned
func (o *Commit) GetAuthor() NullableSimpleUser {
	if o == nil || o.Author.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}

	return *o.Author.Get()
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commit) GetAuthorOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Author.Get(), o.Author.IsSet()
}

// SetAuthor sets field value
func (o *Commit) SetAuthor(v NullableSimpleUser) {
	o.Author.Set(&v)
}

// GetCommitter returns the Committer field value
// If the value is explicit nil, the zero value for NullableSimpleUser will be returned
func (o *Commit) GetCommitter() NullableSimpleUser {
	if o == nil || o.Committer.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}

	return *o.Committer.Get()
}

// GetCommitterOk returns a tuple with the Committer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Commit) GetCommitterOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.Committer.Get(), o.Committer.IsSet()
}

// SetCommitter sets field value
func (o *Commit) SetCommitter(v NullableSimpleUser) {
	o.Committer.Set(&v)
}

// GetParents returns the Parents field value
func (o *Commit) GetParents() []CommitParentsInner {
	if o == nil {
		var ret []CommitParentsInner
		return ret
	}

	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value
// and a boolean to check if the value has been set.
func (o *Commit) GetParentsOk() ([]CommitParentsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parents, true
}

// SetParents sets field value
func (o *Commit) SetParents(v []CommitParentsInner) {
	o.Parents = v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *Commit) GetStats() CommitStats {
	if o == nil || o.Stats == nil {
		var ret CommitStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetStatsOk() (*CommitStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *Commit) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given CommitStats and assigns it to the Stats field.
func (o *Commit) SetStats(v CommitStats) {
	o.Stats = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *Commit) GetFiles() []DiffEntry {
	if o == nil || o.Files == nil {
		var ret []DiffEntry
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetFilesOk() ([]DiffEntry, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *Commit) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []DiffEntry and assigns it to the Files field.
func (o *Commit) SetFiles(v []DiffEntry) {
	o.Files = v
}

func (o Commit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["sha"] = o.Sha
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if true {
		toSerialize["comments_url"] = o.CommentsUrl
	}
	if true {
		toSerialize["commit"] = o.Commit
	}
	if true {
		toSerialize["author"] = o.Author.Get()
	}
	if true {
		toSerialize["committer"] = o.Committer.Get()
	}
	if true {
		toSerialize["parents"] = o.Parents
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	return json.Marshal(toSerialize)
}

type NullableCommit struct {
	value *Commit
	isSet bool
}

func (v NullableCommit) Get() *Commit {
	return v.value
}

func (v *NullableCommit) Set(val *Commit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommit(val *Commit) *NullableCommit {
	return &NullableCommit{value: val, isSet: true}
}

func (v NullableCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


