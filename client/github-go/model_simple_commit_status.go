/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// SimpleCommitStatus struct for SimpleCommitStatus
type SimpleCommitStatus struct {
	Description NullableString `json:"description"`
	Id int32 `json:"id"`
	NodeId string `json:"node_id"`
	State string `json:"state"`
	Context string `json:"context"`
	TargetUrl NullableString `json:"target_url"`
	Required NullableBool `json:"required,omitempty"`
	AvatarUrl NullableString `json:"avatar_url"`
	Url string `json:"url"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// NewSimpleCommitStatus instantiates a new SimpleCommitStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleCommitStatus(description NullableString, id int32, nodeId string, state string, context string, targetUrl NullableString, avatarUrl NullableString, url string, createdAt time.Time, updatedAt time.Time) *SimpleCommitStatus {
	this := SimpleCommitStatus{}
	this.Description = description
	this.Id = id
	this.NodeId = nodeId
	this.State = state
	this.Context = context
	this.TargetUrl = targetUrl
	this.AvatarUrl = avatarUrl
	this.Url = url
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewSimpleCommitStatusWithDefaults instantiates a new SimpleCommitStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleCommitStatusWithDefaults() *SimpleCommitStatus {
	this := SimpleCommitStatus{}
	return &this
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SimpleCommitStatus) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimpleCommitStatus) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *SimpleCommitStatus) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetId returns the Id field value
func (o *SimpleCommitStatus) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SimpleCommitStatus) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SimpleCommitStatus) SetId(v int32) {
	o.Id = v
}

// GetNodeId returns the NodeId field value
func (o *SimpleCommitStatus) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *SimpleCommitStatus) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *SimpleCommitStatus) SetNodeId(v string) {
	o.NodeId = v
}

// GetState returns the State field value
func (o *SimpleCommitStatus) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SimpleCommitStatus) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SimpleCommitStatus) SetState(v string) {
	o.State = v
}

// GetContext returns the Context field value
func (o *SimpleCommitStatus) GetContext() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *SimpleCommitStatus) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *SimpleCommitStatus) SetContext(v string) {
	o.Context = v
}

// GetTargetUrl returns the TargetUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SimpleCommitStatus) GetTargetUrl() string {
	if o == nil || o.TargetUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.TargetUrl.Get()
}

// GetTargetUrlOk returns a tuple with the TargetUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimpleCommitStatus) GetTargetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetUrl.Get(), o.TargetUrl.IsSet()
}

// SetTargetUrl sets field value
func (o *SimpleCommitStatus) SetTargetUrl(v string) {
	o.TargetUrl.Set(&v)
}

// GetRequired returns the Required field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimpleCommitStatus) GetRequired() bool {
	if o == nil || o.Required.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Required.Get()
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimpleCommitStatus) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Required.Get(), o.Required.IsSet()
}

// HasRequired returns a boolean if a field has been set.
func (o *SimpleCommitStatus) HasRequired() bool {
	if o != nil && o.Required.IsSet() {
		return true
	}

	return false
}

// SetRequired gets a reference to the given NullableBool and assigns it to the Required field.
func (o *SimpleCommitStatus) SetRequired(v bool) {
	o.Required.Set(&v)
}
// SetRequiredNil sets the value for Required to be an explicit nil
func (o *SimpleCommitStatus) SetRequiredNil() {
	o.Required.Set(nil)
}

// UnsetRequired ensures that no value is present for Required, not even an explicit nil
func (o *SimpleCommitStatus) UnsetRequired() {
	o.Required.Unset()
}

// GetAvatarUrl returns the AvatarUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SimpleCommitStatus) GetAvatarUrl() string {
	if o == nil || o.AvatarUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.AvatarUrl.Get()
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimpleCommitStatus) GetAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvatarUrl.Get(), o.AvatarUrl.IsSet()
}

// SetAvatarUrl sets field value
func (o *SimpleCommitStatus) SetAvatarUrl(v string) {
	o.AvatarUrl.Set(&v)
}

// GetUrl returns the Url field value
func (o *SimpleCommitStatus) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SimpleCommitStatus) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SimpleCommitStatus) SetUrl(v string) {
	o.Url = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *SimpleCommitStatus) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SimpleCommitStatus) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SimpleCommitStatus) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *SimpleCommitStatus) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *SimpleCommitStatus) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *SimpleCommitStatus) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o SimpleCommitStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description.Get()
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["context"] = o.Context
	}
	if true {
		toSerialize["target_url"] = o.TargetUrl.Get()
	}
	if o.Required.IsSet() {
		toSerialize["required"] = o.Required.Get()
	}
	if true {
		toSerialize["avatar_url"] = o.AvatarUrl.Get()
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableSimpleCommitStatus struct {
	value *SimpleCommitStatus
	isSet bool
}

func (v NullableSimpleCommitStatus) Get() *SimpleCommitStatus {
	return v.value
}

func (v *NullableSimpleCommitStatus) Set(val *SimpleCommitStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleCommitStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleCommitStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleCommitStatus(val *SimpleCommitStatus) *NullableSimpleCommitStatus {
	return &NullableSimpleCommitStatus{value: val, isSet: true}
}

func (v NullableSimpleCommitStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleCommitStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


