/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// UsersDeleteEmailForAuthenticatedUserRequest - struct for UsersDeleteEmailForAuthenticatedUserRequest
type UsersDeleteEmailForAuthenticatedUserRequest struct {
	UsersDeleteEmailForAuthenticatedUserRequestOneOf *UsersDeleteEmailForAuthenticatedUserRequestOneOf
	ArrayOfString *[]string
	String *string
}

// UsersDeleteEmailForAuthenticatedUserRequestOneOfAsUsersDeleteEmailForAuthenticatedUserRequest is a convenience function that returns UsersDeleteEmailForAuthenticatedUserRequestOneOf wrapped in UsersDeleteEmailForAuthenticatedUserRequest
func UsersDeleteEmailForAuthenticatedUserRequestOneOfAsUsersDeleteEmailForAuthenticatedUserRequest(v *UsersDeleteEmailForAuthenticatedUserRequestOneOf) UsersDeleteEmailForAuthenticatedUserRequest {
	return UsersDeleteEmailForAuthenticatedUserRequest{
		UsersDeleteEmailForAuthenticatedUserRequestOneOf: v,
	}
}

// []stringAsUsersDeleteEmailForAuthenticatedUserRequest is a convenience function that returns []string wrapped in UsersDeleteEmailForAuthenticatedUserRequest
func ArrayOfStringAsUsersDeleteEmailForAuthenticatedUserRequest(v *[]string) UsersDeleteEmailForAuthenticatedUserRequest {
	return UsersDeleteEmailForAuthenticatedUserRequest{
		ArrayOfString: v,
	}
}

// stringAsUsersDeleteEmailForAuthenticatedUserRequest is a convenience function that returns string wrapped in UsersDeleteEmailForAuthenticatedUserRequest
func StringAsUsersDeleteEmailForAuthenticatedUserRequest(v *string) UsersDeleteEmailForAuthenticatedUserRequest {
	return UsersDeleteEmailForAuthenticatedUserRequest{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UsersDeleteEmailForAuthenticatedUserRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UsersDeleteEmailForAuthenticatedUserRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.UsersDeleteEmailForAuthenticatedUserRequestOneOf)
	if err == nil {
		jsonUsersDeleteEmailForAuthenticatedUserRequestOneOf, _ := json.Marshal(dst.UsersDeleteEmailForAuthenticatedUserRequestOneOf)
		if string(jsonUsersDeleteEmailForAuthenticatedUserRequestOneOf) == "{}" { // empty struct
			dst.UsersDeleteEmailForAuthenticatedUserRequestOneOf = nil
		} else {
			match++
		}
	} else {
		dst.UsersDeleteEmailForAuthenticatedUserRequestOneOf = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UsersDeleteEmailForAuthenticatedUserRequestOneOf = nil
		dst.ArrayOfString = nil
		dst.String = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(UsersDeleteEmailForAuthenticatedUserRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(UsersDeleteEmailForAuthenticatedUserRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UsersDeleteEmailForAuthenticatedUserRequest) MarshalJSON() ([]byte, error) {
	if src.UsersDeleteEmailForAuthenticatedUserRequestOneOf != nil {
		return json.Marshal(&src.UsersDeleteEmailForAuthenticatedUserRequestOneOf)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UsersDeleteEmailForAuthenticatedUserRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UsersDeleteEmailForAuthenticatedUserRequestOneOf != nil {
		return obj.UsersDeleteEmailForAuthenticatedUserRequestOneOf
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableUsersDeleteEmailForAuthenticatedUserRequest struct {
	value *UsersDeleteEmailForAuthenticatedUserRequest
	isSet bool
}

func (v NullableUsersDeleteEmailForAuthenticatedUserRequest) Get() *UsersDeleteEmailForAuthenticatedUserRequest {
	return v.value
}

func (v *NullableUsersDeleteEmailForAuthenticatedUserRequest) Set(val *UsersDeleteEmailForAuthenticatedUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersDeleteEmailForAuthenticatedUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersDeleteEmailForAuthenticatedUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersDeleteEmailForAuthenticatedUserRequest(val *UsersDeleteEmailForAuthenticatedUserRequest) *NullableUsersDeleteEmailForAuthenticatedUserRequest {
	return &NullableUsersDeleteEmailForAuthenticatedUserRequest{value: val, isSet: true}
}

func (v NullableUsersDeleteEmailForAuthenticatedUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersDeleteEmailForAuthenticatedUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


