/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ShortBranch Short Branch
type ShortBranch struct {
	Name string `json:"name"`
	Commit ShortBranchCommit `json:"commit"`
	Protected bool `json:"protected"`
	Protection *BranchProtection `json:"protection,omitempty"`
	ProtectionUrl *string `json:"protection_url,omitempty"`
}

// NewShortBranch instantiates a new ShortBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShortBranch(name string, commit ShortBranchCommit, protected bool) *ShortBranch {
	this := ShortBranch{}
	this.Name = name
	this.Commit = commit
	this.Protected = protected
	return &this
}

// NewShortBranchWithDefaults instantiates a new ShortBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShortBranchWithDefaults() *ShortBranch {
	this := ShortBranch{}
	return &this
}

// GetName returns the Name field value
func (o *ShortBranch) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ShortBranch) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ShortBranch) SetName(v string) {
	o.Name = v
}

// GetCommit returns the Commit field value
func (o *ShortBranch) GetCommit() ShortBranchCommit {
	if o == nil {
		var ret ShortBranchCommit
		return ret
	}

	return o.Commit
}

// GetCommitOk returns a tuple with the Commit field value
// and a boolean to check if the value has been set.
func (o *ShortBranch) GetCommitOk() (*ShortBranchCommit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Commit, true
}

// SetCommit sets field value
func (o *ShortBranch) SetCommit(v ShortBranchCommit) {
	o.Commit = v
}

// GetProtected returns the Protected field value
func (o *ShortBranch) GetProtected() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Protected
}

// GetProtectedOk returns a tuple with the Protected field value
// and a boolean to check if the value has been set.
func (o *ShortBranch) GetProtectedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protected, true
}

// SetProtected sets field value
func (o *ShortBranch) SetProtected(v bool) {
	o.Protected = v
}

// GetProtection returns the Protection field value if set, zero value otherwise.
func (o *ShortBranch) GetProtection() BranchProtection {
	if o == nil || o.Protection == nil {
		var ret BranchProtection
		return ret
	}
	return *o.Protection
}

// GetProtectionOk returns a tuple with the Protection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortBranch) GetProtectionOk() (*BranchProtection, bool) {
	if o == nil || o.Protection == nil {
		return nil, false
	}
	return o.Protection, true
}

// HasProtection returns a boolean if a field has been set.
func (o *ShortBranch) HasProtection() bool {
	if o != nil && o.Protection != nil {
		return true
	}

	return false
}

// SetProtection gets a reference to the given BranchProtection and assigns it to the Protection field.
func (o *ShortBranch) SetProtection(v BranchProtection) {
	o.Protection = &v
}

// GetProtectionUrl returns the ProtectionUrl field value if set, zero value otherwise.
func (o *ShortBranch) GetProtectionUrl() string {
	if o == nil || o.ProtectionUrl == nil {
		var ret string
		return ret
	}
	return *o.ProtectionUrl
}

// GetProtectionUrlOk returns a tuple with the ProtectionUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortBranch) GetProtectionUrlOk() (*string, bool) {
	if o == nil || o.ProtectionUrl == nil {
		return nil, false
	}
	return o.ProtectionUrl, true
}

// HasProtectionUrl returns a boolean if a field has been set.
func (o *ShortBranch) HasProtectionUrl() bool {
	if o != nil && o.ProtectionUrl != nil {
		return true
	}

	return false
}

// SetProtectionUrl gets a reference to the given string and assigns it to the ProtectionUrl field.
func (o *ShortBranch) SetProtectionUrl(v string) {
	o.ProtectionUrl = &v
}

func (o ShortBranch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["commit"] = o.Commit
	}
	if true {
		toSerialize["protected"] = o.Protected
	}
	if o.Protection != nil {
		toSerialize["protection"] = o.Protection
	}
	if o.ProtectionUrl != nil {
		toSerialize["protection_url"] = o.ProtectionUrl
	}
	return json.Marshal(toSerialize)
}

type NullableShortBranch struct {
	value *ShortBranch
	isSet bool
}

func (v NullableShortBranch) Get() *ShortBranch {
	return v.value
}

func (v *NullableShortBranch) Set(val *ShortBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableShortBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableShortBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShortBranch(val *ShortBranch) *NullableShortBranch {
	return &NullableShortBranch{value: val, isSet: true}
}

func (v NullableShortBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShortBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


