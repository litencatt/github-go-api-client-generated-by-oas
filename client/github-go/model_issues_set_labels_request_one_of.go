/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// IssuesSetLabelsRequestOneOf struct for IssuesSetLabelsRequestOneOf
type IssuesSetLabelsRequestOneOf struct {
	// The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see \"[Add labels to an issue](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue).\"
	Labels []string `json:"labels,omitempty"`
}

// NewIssuesSetLabelsRequestOneOf instantiates a new IssuesSetLabelsRequestOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesSetLabelsRequestOneOf() *IssuesSetLabelsRequestOneOf {
	this := IssuesSetLabelsRequestOneOf{}
	return &this
}

// NewIssuesSetLabelsRequestOneOfWithDefaults instantiates a new IssuesSetLabelsRequestOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesSetLabelsRequestOneOfWithDefaults() *IssuesSetLabelsRequestOneOf {
	this := IssuesSetLabelsRequestOneOf{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *IssuesSetLabelsRequestOneOf) GetLabels() []string {
	if o == nil || o.Labels == nil {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSetLabelsRequestOneOf) GetLabelsOk() ([]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *IssuesSetLabelsRequestOneOf) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *IssuesSetLabelsRequestOneOf) SetLabels(v []string) {
	o.Labels = v
}

func (o IssuesSetLabelsRequestOneOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	return json.Marshal(toSerialize)
}

type NullableIssuesSetLabelsRequestOneOf struct {
	value *IssuesSetLabelsRequestOneOf
	isSet bool
}

func (v NullableIssuesSetLabelsRequestOneOf) Get() *IssuesSetLabelsRequestOneOf {
	return v.value
}

func (v *NullableIssuesSetLabelsRequestOneOf) Set(val *IssuesSetLabelsRequestOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesSetLabelsRequestOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesSetLabelsRequestOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesSetLabelsRequestOneOf(val *IssuesSetLabelsRequestOneOf) *NullableIssuesSetLabelsRequestOneOf {
	return &NullableIssuesSetLabelsRequestOneOf{value: val, isSet: true}
}

func (v NullableIssuesSetLabelsRequestOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesSetLabelsRequestOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


