/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// Authorization The authorization for an OAuth app, GitHub App, or a Personal Access Token.
type Authorization struct {
	Id int32 `json:"id"`
	Url string `json:"url"`
	// A list of scopes that this authorization is in.
	Scopes []string `json:"scopes"`
	Token string `json:"token"`
	TokenLastEight NullableString `json:"token_last_eight"`
	HashedToken NullableString `json:"hashed_token"`
	App AuthorizationApp `json:"app"`
	Note NullableString `json:"note"`
	NoteUrl NullableString `json:"note_url"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
	Fingerprint NullableString `json:"fingerprint"`
	User NullableNullableSimpleUser `json:"user,omitempty"`
	Installation NullableNullableScopedInstallation `json:"installation,omitempty"`
	ExpiresAt NullableTime `json:"expires_at"`
}

// NewAuthorization instantiates a new Authorization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorization(id int32, url string, scopes []string, token string, tokenLastEight NullableString, hashedToken NullableString, app AuthorizationApp, note NullableString, noteUrl NullableString, updatedAt time.Time, createdAt time.Time, fingerprint NullableString, expiresAt NullableTime) *Authorization {
	this := Authorization{}
	this.Id = id
	this.Url = url
	this.Scopes = scopes
	this.Token = token
	this.TokenLastEight = tokenLastEight
	this.HashedToken = hashedToken
	this.App = app
	this.Note = note
	this.NoteUrl = noteUrl
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	this.Fingerprint = fingerprint
	this.ExpiresAt = expiresAt
	return &this
}

// NewAuthorizationWithDefaults instantiates a new Authorization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizationWithDefaults() *Authorization {
	this := Authorization{}
	return &this
}

// GetId returns the Id field value
func (o *Authorization) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Authorization) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Authorization) SetId(v int32) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *Authorization) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Authorization) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Authorization) SetUrl(v string) {
	o.Url = v
}

// GetScopes returns the Scopes field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *Authorization) GetScopes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Authorization) GetScopesOk() ([]string, bool) {
	if o == nil || o.Scopes == nil {
		return nil, false
	}
	return o.Scopes, true
}

// SetScopes sets field value
func (o *Authorization) SetScopes(v []string) {
	o.Scopes = v
}

// GetToken returns the Token field value
func (o *Authorization) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *Authorization) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *Authorization) SetToken(v string) {
	o.Token = v
}

// GetTokenLastEight returns the TokenLastEight field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Authorization) GetTokenLastEight() string {
	if o == nil || o.TokenLastEight.Get() == nil {
		var ret string
		return ret
	}

	return *o.TokenLastEight.Get()
}

// GetTokenLastEightOk returns a tuple with the TokenLastEight field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Authorization) GetTokenLastEightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenLastEight.Get(), o.TokenLastEight.IsSet()
}

// SetTokenLastEight sets field value
func (o *Authorization) SetTokenLastEight(v string) {
	o.TokenLastEight.Set(&v)
}

// GetHashedToken returns the HashedToken field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Authorization) GetHashedToken() string {
	if o == nil || o.HashedToken.Get() == nil {
		var ret string
		return ret
	}

	return *o.HashedToken.Get()
}

// GetHashedTokenOk returns a tuple with the HashedToken field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Authorization) GetHashedTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HashedToken.Get(), o.HashedToken.IsSet()
}

// SetHashedToken sets field value
func (o *Authorization) SetHashedToken(v string) {
	o.HashedToken.Set(&v)
}

// GetApp returns the App field value
func (o *Authorization) GetApp() AuthorizationApp {
	if o == nil {
		var ret AuthorizationApp
		return ret
	}

	return o.App
}

// GetAppOk returns a tuple with the App field value
// and a boolean to check if the value has been set.
func (o *Authorization) GetAppOk() (*AuthorizationApp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.App, true
}

// SetApp sets field value
func (o *Authorization) SetApp(v AuthorizationApp) {
	o.App = v
}

// GetNote returns the Note field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Authorization) GetNote() string {
	if o == nil || o.Note.Get() == nil {
		var ret string
		return ret
	}

	return *o.Note.Get()
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Authorization) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Note.Get(), o.Note.IsSet()
}

// SetNote sets field value
func (o *Authorization) SetNote(v string) {
	o.Note.Set(&v)
}

// GetNoteUrl returns the NoteUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Authorization) GetNoteUrl() string {
	if o == nil || o.NoteUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.NoteUrl.Get()
}

// GetNoteUrlOk returns a tuple with the NoteUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Authorization) GetNoteUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoteUrl.Get(), o.NoteUrl.IsSet()
}

// SetNoteUrl sets field value
func (o *Authorization) SetNoteUrl(v string) {
	o.NoteUrl.Set(&v)
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Authorization) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Authorization) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Authorization) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Authorization) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Authorization) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Authorization) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetFingerprint returns the Fingerprint field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Authorization) GetFingerprint() string {
	if o == nil || o.Fingerprint.Get() == nil {
		var ret string
		return ret
	}

	return *o.Fingerprint.Get()
}

// GetFingerprintOk returns a tuple with the Fingerprint field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Authorization) GetFingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fingerprint.Get(), o.Fingerprint.IsSet()
}

// SetFingerprint sets field value
func (o *Authorization) SetFingerprint(v string) {
	o.Fingerprint.Set(&v)
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Authorization) GetUser() NullableSimpleUser {
	if o == nil || o.User.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Authorization) GetUserOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *Authorization) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableNullableSimpleUser and assigns it to the User field.
func (o *Authorization) SetUser(v NullableSimpleUser) {
	o.User.Set(&v)
}
// SetUserNil sets the value for User to be an explicit nil
func (o *Authorization) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *Authorization) UnsetUser() {
	o.User.Unset()
}

// GetInstallation returns the Installation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Authorization) GetInstallation() NullableScopedInstallation {
	if o == nil || o.Installation.Get() == nil {
		var ret NullableScopedInstallation
		return ret
	}
	return *o.Installation.Get()
}

// GetInstallationOk returns a tuple with the Installation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Authorization) GetInstallationOk() (*NullableScopedInstallation, bool) {
	if o == nil {
		return nil, false
	}
	return o.Installation.Get(), o.Installation.IsSet()
}

// HasInstallation returns a boolean if a field has been set.
func (o *Authorization) HasInstallation() bool {
	if o != nil && o.Installation.IsSet() {
		return true
	}

	return false
}

// SetInstallation gets a reference to the given NullableNullableScopedInstallation and assigns it to the Installation field.
func (o *Authorization) SetInstallation(v NullableScopedInstallation) {
	o.Installation.Set(&v)
}
// SetInstallationNil sets the value for Installation to be an explicit nil
func (o *Authorization) SetInstallationNil() {
	o.Installation.Set(nil)
}

// UnsetInstallation ensures that no value is present for Installation, not even an explicit nil
func (o *Authorization) UnsetInstallation() {
	o.Installation.Unset()
}

// GetExpiresAt returns the ExpiresAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Authorization) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Authorization) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// SetExpiresAt sets field value
func (o *Authorization) SetExpiresAt(v time.Time) {
	o.ExpiresAt.Set(&v)
}

func (o Authorization) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if true {
		toSerialize["token"] = o.Token
	}
	if true {
		toSerialize["token_last_eight"] = o.TokenLastEight.Get()
	}
	if true {
		toSerialize["hashed_token"] = o.HashedToken.Get()
	}
	if true {
		toSerialize["app"] = o.App
	}
	if true {
		toSerialize["note"] = o.Note.Get()
	}
	if true {
		toSerialize["note_url"] = o.NoteUrl.Get()
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["fingerprint"] = o.Fingerprint.Get()
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	if o.Installation.IsSet() {
		toSerialize["installation"] = o.Installation.Get()
	}
	if true {
		toSerialize["expires_at"] = o.ExpiresAt.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAuthorization struct {
	value *Authorization
	isSet bool
}

func (v NullableAuthorization) Get() *Authorization {
	return v.value
}

func (v *NullableAuthorization) Set(val *Authorization) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorization) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorization(val *Authorization) *NullableAuthorization {
	return &NullableAuthorization{value: val, isSet: true}
}

func (v NullableAuthorization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


