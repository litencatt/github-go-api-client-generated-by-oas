/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// Release A release.
type Release struct {
	Url string `json:"url"`
	HtmlUrl string `json:"html_url"`
	AssetsUrl string `json:"assets_url"`
	UploadUrl string `json:"upload_url"`
	TarballUrl NullableString `json:"tarball_url"`
	ZipballUrl NullableString `json:"zipball_url"`
	Id int32 `json:"id"`
	NodeId string `json:"node_id"`
	// The name of the tag.
	TagName string `json:"tag_name"`
	// Specifies the commitish value that determines where the Git tag is created from.
	TargetCommitish string `json:"target_commitish"`
	Name NullableString `json:"name"`
	Body NullableString `json:"body,omitempty"`
	// true to create a draft (unpublished) release, false to create a published one.
	Draft bool `json:"draft"`
	// Whether to identify the release as a prerelease or a full release.
	Prerelease bool `json:"prerelease"`
	CreatedAt time.Time `json:"created_at"`
	PublishedAt NullableTime `json:"published_at"`
	Author SimpleUser `json:"author"`
	Assets []ReleaseAsset `json:"assets"`
	BodyHtml *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`
	MentionsCount *int32 `json:"mentions_count,omitempty"`
	// The URL of the release discussion.
	DiscussionUrl *string `json:"discussion_url,omitempty"`
	Reactions *ReactionRollup `json:"reactions,omitempty"`
}

// NewRelease instantiates a new Release object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelease(url string, htmlUrl string, assetsUrl string, uploadUrl string, tarballUrl NullableString, zipballUrl NullableString, id int32, nodeId string, tagName string, targetCommitish string, name NullableString, draft bool, prerelease bool, createdAt time.Time, publishedAt NullableTime, author SimpleUser, assets []ReleaseAsset) *Release {
	this := Release{}
	this.Url = url
	this.HtmlUrl = htmlUrl
	this.AssetsUrl = assetsUrl
	this.UploadUrl = uploadUrl
	this.TarballUrl = tarballUrl
	this.ZipballUrl = zipballUrl
	this.Id = id
	this.NodeId = nodeId
	this.TagName = tagName
	this.TargetCommitish = targetCommitish
	this.Name = name
	this.Draft = draft
	this.Prerelease = prerelease
	this.CreatedAt = createdAt
	this.PublishedAt = publishedAt
	this.Author = author
	this.Assets = assets
	return &this
}

// NewReleaseWithDefaults instantiates a new Release object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseWithDefaults() *Release {
	this := Release{}
	return &this
}

// GetUrl returns the Url field value
func (o *Release) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Release) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Release) SetUrl(v string) {
	o.Url = v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *Release) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *Release) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *Release) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetAssetsUrl returns the AssetsUrl field value
func (o *Release) GetAssetsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetsUrl
}

// GetAssetsUrlOk returns a tuple with the AssetsUrl field value
// and a boolean to check if the value has been set.
func (o *Release) GetAssetsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetsUrl, true
}

// SetAssetsUrl sets field value
func (o *Release) SetAssetsUrl(v string) {
	o.AssetsUrl = v
}

// GetUploadUrl returns the UploadUrl field value
func (o *Release) GetUploadUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadUrl
}

// GetUploadUrlOk returns a tuple with the UploadUrl field value
// and a boolean to check if the value has been set.
func (o *Release) GetUploadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadUrl, true
}

// SetUploadUrl sets field value
func (o *Release) SetUploadUrl(v string) {
	o.UploadUrl = v
}

// GetTarballUrl returns the TarballUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Release) GetTarballUrl() string {
	if o == nil || o.TarballUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.TarballUrl.Get()
}

// GetTarballUrlOk returns a tuple with the TarballUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Release) GetTarballUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TarballUrl.Get(), o.TarballUrl.IsSet()
}

// SetTarballUrl sets field value
func (o *Release) SetTarballUrl(v string) {
	o.TarballUrl.Set(&v)
}

// GetZipballUrl returns the ZipballUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Release) GetZipballUrl() string {
	if o == nil || o.ZipballUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.ZipballUrl.Get()
}

// GetZipballUrlOk returns a tuple with the ZipballUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Release) GetZipballUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZipballUrl.Get(), o.ZipballUrl.IsSet()
}

// SetZipballUrl sets field value
func (o *Release) SetZipballUrl(v string) {
	o.ZipballUrl.Set(&v)
}

// GetId returns the Id field value
func (o *Release) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Release) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Release) SetId(v int32) {
	o.Id = v
}

// GetNodeId returns the NodeId field value
func (o *Release) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *Release) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *Release) SetNodeId(v string) {
	o.NodeId = v
}

// GetTagName returns the TagName field value
func (o *Release) GetTagName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TagName
}

// GetTagNameOk returns a tuple with the TagName field value
// and a boolean to check if the value has been set.
func (o *Release) GetTagNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TagName, true
}

// SetTagName sets field value
func (o *Release) SetTagName(v string) {
	o.TagName = v
}

// GetTargetCommitish returns the TargetCommitish field value
func (o *Release) GetTargetCommitish() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetCommitish
}

// GetTargetCommitishOk returns a tuple with the TargetCommitish field value
// and a boolean to check if the value has been set.
func (o *Release) GetTargetCommitishOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetCommitish, true
}

// SetTargetCommitish sets field value
func (o *Release) SetTargetCommitish(v string) {
	o.TargetCommitish = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Release) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Release) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *Release) SetName(v string) {
	o.Name.Set(&v)
}

// GetBody returns the Body field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Release) GetBody() string {
	if o == nil || o.Body.Get() == nil {
		var ret string
		return ret
	}
	return *o.Body.Get()
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Release) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Body.Get(), o.Body.IsSet()
}

// HasBody returns a boolean if a field has been set.
func (o *Release) HasBody() bool {
	if o != nil && o.Body.IsSet() {
		return true
	}

	return false
}

// SetBody gets a reference to the given NullableString and assigns it to the Body field.
func (o *Release) SetBody(v string) {
	o.Body.Set(&v)
}
// SetBodyNil sets the value for Body to be an explicit nil
func (o *Release) SetBodyNil() {
	o.Body.Set(nil)
}

// UnsetBody ensures that no value is present for Body, not even an explicit nil
func (o *Release) UnsetBody() {
	o.Body.Unset()
}

// GetDraft returns the Draft field value
func (o *Release) GetDraft() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Draft
}

// GetDraftOk returns a tuple with the Draft field value
// and a boolean to check if the value has been set.
func (o *Release) GetDraftOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Draft, true
}

// SetDraft sets field value
func (o *Release) SetDraft(v bool) {
	o.Draft = v
}

// GetPrerelease returns the Prerelease field value
func (o *Release) GetPrerelease() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Prerelease
}

// GetPrereleaseOk returns a tuple with the Prerelease field value
// and a boolean to check if the value has been set.
func (o *Release) GetPrereleaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prerelease, true
}

// SetPrerelease sets field value
func (o *Release) SetPrerelease(v bool) {
	o.Prerelease = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Release) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Release) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Release) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetPublishedAt returns the PublishedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Release) GetPublishedAt() time.Time {
	if o == nil || o.PublishedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.PublishedAt.Get()
}

// GetPublishedAtOk returns a tuple with the PublishedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Release) GetPublishedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublishedAt.Get(), o.PublishedAt.IsSet()
}

// SetPublishedAt sets field value
func (o *Release) SetPublishedAt(v time.Time) {
	o.PublishedAt.Set(&v)
}

// GetAuthor returns the Author field value
func (o *Release) GetAuthor() SimpleUser {
	if o == nil {
		var ret SimpleUser
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *Release) GetAuthorOk() (*SimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *Release) SetAuthor(v SimpleUser) {
	o.Author = v
}

// GetAssets returns the Assets field value
func (o *Release) GetAssets() []ReleaseAsset {
	if o == nil {
		var ret []ReleaseAsset
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *Release) GetAssetsOk() ([]ReleaseAsset, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assets, true
}

// SetAssets sets field value
func (o *Release) SetAssets(v []ReleaseAsset) {
	o.Assets = v
}

// GetBodyHtml returns the BodyHtml field value if set, zero value otherwise.
func (o *Release) GetBodyHtml() string {
	if o == nil || o.BodyHtml == nil {
		var ret string
		return ret
	}
	return *o.BodyHtml
}

// GetBodyHtmlOk returns a tuple with the BodyHtml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetBodyHtmlOk() (*string, bool) {
	if o == nil || o.BodyHtml == nil {
		return nil, false
	}
	return o.BodyHtml, true
}

// HasBodyHtml returns a boolean if a field has been set.
func (o *Release) HasBodyHtml() bool {
	if o != nil && o.BodyHtml != nil {
		return true
	}

	return false
}

// SetBodyHtml gets a reference to the given string and assigns it to the BodyHtml field.
func (o *Release) SetBodyHtml(v string) {
	o.BodyHtml = &v
}

// GetBodyText returns the BodyText field value if set, zero value otherwise.
func (o *Release) GetBodyText() string {
	if o == nil || o.BodyText == nil {
		var ret string
		return ret
	}
	return *o.BodyText
}

// GetBodyTextOk returns a tuple with the BodyText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetBodyTextOk() (*string, bool) {
	if o == nil || o.BodyText == nil {
		return nil, false
	}
	return o.BodyText, true
}

// HasBodyText returns a boolean if a field has been set.
func (o *Release) HasBodyText() bool {
	if o != nil && o.BodyText != nil {
		return true
	}

	return false
}

// SetBodyText gets a reference to the given string and assigns it to the BodyText field.
func (o *Release) SetBodyText(v string) {
	o.BodyText = &v
}

// GetMentionsCount returns the MentionsCount field value if set, zero value otherwise.
func (o *Release) GetMentionsCount() int32 {
	if o == nil || o.MentionsCount == nil {
		var ret int32
		return ret
	}
	return *o.MentionsCount
}

// GetMentionsCountOk returns a tuple with the MentionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetMentionsCountOk() (*int32, bool) {
	if o == nil || o.MentionsCount == nil {
		return nil, false
	}
	return o.MentionsCount, true
}

// HasMentionsCount returns a boolean if a field has been set.
func (o *Release) HasMentionsCount() bool {
	if o != nil && o.MentionsCount != nil {
		return true
	}

	return false
}

// SetMentionsCount gets a reference to the given int32 and assigns it to the MentionsCount field.
func (o *Release) SetMentionsCount(v int32) {
	o.MentionsCount = &v
}

// GetDiscussionUrl returns the DiscussionUrl field value if set, zero value otherwise.
func (o *Release) GetDiscussionUrl() string {
	if o == nil || o.DiscussionUrl == nil {
		var ret string
		return ret
	}
	return *o.DiscussionUrl
}

// GetDiscussionUrlOk returns a tuple with the DiscussionUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetDiscussionUrlOk() (*string, bool) {
	if o == nil || o.DiscussionUrl == nil {
		return nil, false
	}
	return o.DiscussionUrl, true
}

// HasDiscussionUrl returns a boolean if a field has been set.
func (o *Release) HasDiscussionUrl() bool {
	if o != nil && o.DiscussionUrl != nil {
		return true
	}

	return false
}

// SetDiscussionUrl gets a reference to the given string and assigns it to the DiscussionUrl field.
func (o *Release) SetDiscussionUrl(v string) {
	o.DiscussionUrl = &v
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *Release) GetReactions() ReactionRollup {
	if o == nil || o.Reactions == nil {
		var ret ReactionRollup
		return ret
	}
	return *o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Release) GetReactionsOk() (*ReactionRollup, bool) {
	if o == nil || o.Reactions == nil {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *Release) HasReactions() bool {
	if o != nil && o.Reactions != nil {
		return true
	}

	return false
}

// SetReactions gets a reference to the given ReactionRollup and assigns it to the Reactions field.
func (o *Release) SetReactions(v ReactionRollup) {
	o.Reactions = &v
}

func (o Release) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if true {
		toSerialize["assets_url"] = o.AssetsUrl
	}
	if true {
		toSerialize["upload_url"] = o.UploadUrl
	}
	if true {
		toSerialize["tarball_url"] = o.TarballUrl.Get()
	}
	if true {
		toSerialize["zipball_url"] = o.ZipballUrl.Get()
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if true {
		toSerialize["tag_name"] = o.TagName
	}
	if true {
		toSerialize["target_commitish"] = o.TargetCommitish
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Body.IsSet() {
		toSerialize["body"] = o.Body.Get()
	}
	if true {
		toSerialize["draft"] = o.Draft
	}
	if true {
		toSerialize["prerelease"] = o.Prerelease
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["published_at"] = o.PublishedAt.Get()
	}
	if true {
		toSerialize["author"] = o.Author
	}
	if true {
		toSerialize["assets"] = o.Assets
	}
	if o.BodyHtml != nil {
		toSerialize["body_html"] = o.BodyHtml
	}
	if o.BodyText != nil {
		toSerialize["body_text"] = o.BodyText
	}
	if o.MentionsCount != nil {
		toSerialize["mentions_count"] = o.MentionsCount
	}
	if o.DiscussionUrl != nil {
		toSerialize["discussion_url"] = o.DiscussionUrl
	}
	if o.Reactions != nil {
		toSerialize["reactions"] = o.Reactions
	}
	return json.Marshal(toSerialize)
}

type NullableRelease struct {
	value *Release
	isSet bool
}

func (v NullableRelease) Get() *Release {
	return v.value
}

func (v *NullableRelease) Set(val *Release) {
	v.value = val
	v.isSet = true
}

func (v NullableRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelease(val *Release) *NullableRelease {
	return &NullableRelease{value: val, isSet: true}
}

func (v NullableRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


