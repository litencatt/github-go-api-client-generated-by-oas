/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// Runner A self hosted runner
type Runner struct {
	// The id of the runner.
	Id int32 `json:"id"`
	// The name of the runner.
	Name string `json:"name"`
	// The Operating System of the runner.
	Os string `json:"os"`
	// The status of the runner.
	Status string `json:"status"`
	Busy bool `json:"busy"`
	Labels []RunnerLabel `json:"labels"`
}

// NewRunner instantiates a new Runner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunner(id int32, name string, os string, status string, busy bool, labels []RunnerLabel) *Runner {
	this := Runner{}
	this.Id = id
	this.Name = name
	this.Os = os
	this.Status = status
	this.Busy = busy
	this.Labels = labels
	return &this
}

// NewRunnerWithDefaults instantiates a new Runner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunnerWithDefaults() *Runner {
	this := Runner{}
	return &this
}

// GetId returns the Id field value
func (o *Runner) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Runner) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Runner) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Runner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Runner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Runner) SetName(v string) {
	o.Name = v
}

// GetOs returns the Os field value
func (o *Runner) GetOs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *Runner) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *Runner) SetOs(v string) {
	o.Os = v
}

// GetStatus returns the Status field value
func (o *Runner) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Runner) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Runner) SetStatus(v string) {
	o.Status = v
}

// GetBusy returns the Busy field value
func (o *Runner) GetBusy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Busy
}

// GetBusyOk returns a tuple with the Busy field value
// and a boolean to check if the value has been set.
func (o *Runner) GetBusyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Busy, true
}

// SetBusy sets field value
func (o *Runner) SetBusy(v bool) {
	o.Busy = v
}

// GetLabels returns the Labels field value
func (o *Runner) GetLabels() []RunnerLabel {
	if o == nil {
		var ret []RunnerLabel
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *Runner) GetLabelsOk() ([]RunnerLabel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *Runner) SetLabels(v []RunnerLabel) {
	o.Labels = v
}

func (o Runner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["os"] = o.Os
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["busy"] = o.Busy
	}
	if true {
		toSerialize["labels"] = o.Labels
	}
	return json.Marshal(toSerialize)
}

type NullableRunner struct {
	value *Runner
	isSet bool
}

func (v NullableRunner) Get() *Runner {
	return v.value
}

func (v *NullableRunner) Set(val *Runner) {
	v.value = val
	v.isSet = true
}

func (v NullableRunner) IsSet() bool {
	return v.isSet
}

func (v *NullableRunner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunner(val *Runner) *NullableRunner {
	return &NullableRunner{value: val, isSet: true}
}

func (v NullableRunner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


