/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// TeamsCreateDiscussionInOrgRequest struct for TeamsCreateDiscussionInOrgRequest
type TeamsCreateDiscussionInOrgRequest struct {
	// The discussion post's title.
	Title string `json:"title"`
	// The discussion post's body text.
	Body string `json:"body"`
	// Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
	Private *bool `json:"private,omitempty"`
}

// NewTeamsCreateDiscussionInOrgRequest instantiates a new TeamsCreateDiscussionInOrgRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamsCreateDiscussionInOrgRequest(title string, body string) *TeamsCreateDiscussionInOrgRequest {
	this := TeamsCreateDiscussionInOrgRequest{}
	this.Title = title
	this.Body = body
	var private bool = false
	this.Private = &private
	return &this
}

// NewTeamsCreateDiscussionInOrgRequestWithDefaults instantiates a new TeamsCreateDiscussionInOrgRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamsCreateDiscussionInOrgRequestWithDefaults() *TeamsCreateDiscussionInOrgRequest {
	this := TeamsCreateDiscussionInOrgRequest{}
	var private bool = false
	this.Private = &private
	return &this
}

// GetTitle returns the Title field value
func (o *TeamsCreateDiscussionInOrgRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *TeamsCreateDiscussionInOrgRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *TeamsCreateDiscussionInOrgRequest) SetTitle(v string) {
	o.Title = v
}

// GetBody returns the Body field value
func (o *TeamsCreateDiscussionInOrgRequest) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *TeamsCreateDiscussionInOrgRequest) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *TeamsCreateDiscussionInOrgRequest) SetBody(v string) {
	o.Body = v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *TeamsCreateDiscussionInOrgRequest) GetPrivate() bool {
	if o == nil || o.Private == nil {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamsCreateDiscussionInOrgRequest) GetPrivateOk() (*bool, bool) {
	if o == nil || o.Private == nil {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *TeamsCreateDiscussionInOrgRequest) HasPrivate() bool {
	if o != nil && o.Private != nil {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *TeamsCreateDiscussionInOrgRequest) SetPrivate(v bool) {
	o.Private = &v
}

func (o TeamsCreateDiscussionInOrgRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["body"] = o.Body
	}
	if o.Private != nil {
		toSerialize["private"] = o.Private
	}
	return json.Marshal(toSerialize)
}

type NullableTeamsCreateDiscussionInOrgRequest struct {
	value *TeamsCreateDiscussionInOrgRequest
	isSet bool
}

func (v NullableTeamsCreateDiscussionInOrgRequest) Get() *TeamsCreateDiscussionInOrgRequest {
	return v.value
}

func (v *NullableTeamsCreateDiscussionInOrgRequest) Set(val *TeamsCreateDiscussionInOrgRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamsCreateDiscussionInOrgRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamsCreateDiscussionInOrgRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamsCreateDiscussionInOrgRequest(val *TeamsCreateDiscussionInOrgRequest) *NullableTeamsCreateDiscussionInOrgRequest {
	return &NullableTeamsCreateDiscussionInOrgRequest{value: val, isSet: true}
}

func (v NullableTeamsCreateDiscussionInOrgRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamsCreateDiscussionInOrgRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


