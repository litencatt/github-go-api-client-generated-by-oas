/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// IntegrationPermissions The set of permissions for the GitHub app
type IntegrationPermissions struct {
	Issues *string `json:"issues,omitempty"`
	Checks *string `json:"checks,omitempty"`
	Metadata *string `json:"metadata,omitempty"`
	Contents *string `json:"contents,omitempty"`
	Deployments *string `json:"deployments,omitempty"`
}

// NewIntegrationPermissions instantiates a new IntegrationPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationPermissions() *IntegrationPermissions {
	this := IntegrationPermissions{}
	return &this
}

// NewIntegrationPermissionsWithDefaults instantiates a new IntegrationPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationPermissionsWithDefaults() *IntegrationPermissions {
	this := IntegrationPermissions{}
	return &this
}

// GetIssues returns the Issues field value if set, zero value otherwise.
func (o *IntegrationPermissions) GetIssues() string {
	if o == nil || o.Issues == nil {
		var ret string
		return ret
	}
	return *o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationPermissions) GetIssuesOk() (*string, bool) {
	if o == nil || o.Issues == nil {
		return nil, false
	}
	return o.Issues, true
}

// HasIssues returns a boolean if a field has been set.
func (o *IntegrationPermissions) HasIssues() bool {
	if o != nil && o.Issues != nil {
		return true
	}

	return false
}

// SetIssues gets a reference to the given string and assigns it to the Issues field.
func (o *IntegrationPermissions) SetIssues(v string) {
	o.Issues = &v
}

// GetChecks returns the Checks field value if set, zero value otherwise.
func (o *IntegrationPermissions) GetChecks() string {
	if o == nil || o.Checks == nil {
		var ret string
		return ret
	}
	return *o.Checks
}

// GetChecksOk returns a tuple with the Checks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationPermissions) GetChecksOk() (*string, bool) {
	if o == nil || o.Checks == nil {
		return nil, false
	}
	return o.Checks, true
}

// HasChecks returns a boolean if a field has been set.
func (o *IntegrationPermissions) HasChecks() bool {
	if o != nil && o.Checks != nil {
		return true
	}

	return false
}

// SetChecks gets a reference to the given string and assigns it to the Checks field.
func (o *IntegrationPermissions) SetChecks(v string) {
	o.Checks = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IntegrationPermissions) GetMetadata() string {
	if o == nil || o.Metadata == nil {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationPermissions) GetMetadataOk() (*string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IntegrationPermissions) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *IntegrationPermissions) SetMetadata(v string) {
	o.Metadata = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *IntegrationPermissions) GetContents() string {
	if o == nil || o.Contents == nil {
		var ret string
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationPermissions) GetContentsOk() (*string, bool) {
	if o == nil || o.Contents == nil {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *IntegrationPermissions) HasContents() bool {
	if o != nil && o.Contents != nil {
		return true
	}

	return false
}

// SetContents gets a reference to the given string and assigns it to the Contents field.
func (o *IntegrationPermissions) SetContents(v string) {
	o.Contents = &v
}

// GetDeployments returns the Deployments field value if set, zero value otherwise.
func (o *IntegrationPermissions) GetDeployments() string {
	if o == nil || o.Deployments == nil {
		var ret string
		return ret
	}
	return *o.Deployments
}

// GetDeploymentsOk returns a tuple with the Deployments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationPermissions) GetDeploymentsOk() (*string, bool) {
	if o == nil || o.Deployments == nil {
		return nil, false
	}
	return o.Deployments, true
}

// HasDeployments returns a boolean if a field has been set.
func (o *IntegrationPermissions) HasDeployments() bool {
	if o != nil && o.Deployments != nil {
		return true
	}

	return false
}

// SetDeployments gets a reference to the given string and assigns it to the Deployments field.
func (o *IntegrationPermissions) SetDeployments(v string) {
	o.Deployments = &v
}

func (o IntegrationPermissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Issues != nil {
		toSerialize["issues"] = o.Issues
	}
	if o.Checks != nil {
		toSerialize["checks"] = o.Checks
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Contents != nil {
		toSerialize["contents"] = o.Contents
	}
	if o.Deployments != nil {
		toSerialize["deployments"] = o.Deployments
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationPermissions struct {
	value *IntegrationPermissions
	isSet bool
}

func (v NullableIntegrationPermissions) Get() *IntegrationPermissions {
	return v.value
}

func (v *NullableIntegrationPermissions) Set(val *IntegrationPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationPermissions(val *IntegrationPermissions) *NullableIntegrationPermissions {
	return &NullableIntegrationPermissions{value: val, isSet: true}
}

func (v NullableIntegrationPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


