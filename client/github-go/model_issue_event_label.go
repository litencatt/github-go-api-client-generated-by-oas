/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// IssueEventLabel Issue Event Label
type IssueEventLabel struct {
	Name NullableString `json:"name"`
	Color NullableString `json:"color"`
}

// NewIssueEventLabel instantiates a new IssueEventLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueEventLabel(name NullableString, color NullableString) *IssueEventLabel {
	this := IssueEventLabel{}
	this.Name = name
	this.Color = color
	return &this
}

// NewIssueEventLabelWithDefaults instantiates a new IssueEventLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueEventLabelWithDefaults() *IssueEventLabel {
	this := IssueEventLabel{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IssueEventLabel) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueEventLabel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *IssueEventLabel) SetName(v string) {
	o.Name.Set(&v)
}

// GetColor returns the Color field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IssueEventLabel) GetColor() string {
	if o == nil || o.Color.Get() == nil {
		var ret string
		return ret
	}

	return *o.Color.Get()
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueEventLabel) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Color.Get(), o.Color.IsSet()
}

// SetColor sets field value
func (o *IssueEventLabel) SetColor(v string) {
	o.Color.Set(&v)
}

func (o IssueEventLabel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if true {
		toSerialize["color"] = o.Color.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIssueEventLabel struct {
	value *IssueEventLabel
	isSet bool
}

func (v NullableIssueEventLabel) Get() *IssueEventLabel {
	return v.value
}

func (v *NullableIssueEventLabel) Set(val *IssueEventLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueEventLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueEventLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueEventLabel(val *IssueEventLabel) *NullableIssueEventLabel {
	return &NullableIssueEventLabel{value: val, isSet: true}
}

func (v NullableIssueEventLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueEventLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


