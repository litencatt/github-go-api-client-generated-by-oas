/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReposMergeUpstreamRequest struct for ReposMergeUpstreamRequest
type ReposMergeUpstreamRequest struct {
	// The name of the branch which should be updated to match upstream.
	Branch string `json:"branch"`
}

// NewReposMergeUpstreamRequest instantiates a new ReposMergeUpstreamRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReposMergeUpstreamRequest(branch string) *ReposMergeUpstreamRequest {
	this := ReposMergeUpstreamRequest{}
	this.Branch = branch
	return &this
}

// NewReposMergeUpstreamRequestWithDefaults instantiates a new ReposMergeUpstreamRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReposMergeUpstreamRequestWithDefaults() *ReposMergeUpstreamRequest {
	this := ReposMergeUpstreamRequest{}
	return &this
}

// GetBranch returns the Branch field value
func (o *ReposMergeUpstreamRequest) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *ReposMergeUpstreamRequest) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *ReposMergeUpstreamRequest) SetBranch(v string) {
	o.Branch = v
}

func (o ReposMergeUpstreamRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["branch"] = o.Branch
	}
	return json.Marshal(toSerialize)
}

type NullableReposMergeUpstreamRequest struct {
	value *ReposMergeUpstreamRequest
	isSet bool
}

func (v NullableReposMergeUpstreamRequest) Get() *ReposMergeUpstreamRequest {
	return v.value
}

func (v *NullableReposMergeUpstreamRequest) Set(val *ReposMergeUpstreamRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReposMergeUpstreamRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReposMergeUpstreamRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposMergeUpstreamRequest(val *ReposMergeUpstreamRequest) *NullableReposMergeUpstreamRequest {
	return &NullableReposMergeUpstreamRequest{value: val, isSet: true}
}

func (v NullableReposMergeUpstreamRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposMergeUpstreamRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


