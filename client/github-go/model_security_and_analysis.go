/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// SecurityAndAnalysis struct for SecurityAndAnalysis
type SecurityAndAnalysis struct {
	AdvancedSecurity *SecurityAndAnalysisAdvancedSecurity `json:"advanced_security,omitempty"`
	SecretScanning *SecurityAndAnalysisAdvancedSecurity `json:"secret_scanning,omitempty"`
	SecretScanningPushProtection *SecurityAndAnalysisAdvancedSecurity `json:"secret_scanning_push_protection,omitempty"`
}

// NewSecurityAndAnalysis instantiates a new SecurityAndAnalysis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityAndAnalysis() *SecurityAndAnalysis {
	this := SecurityAndAnalysis{}
	return &this
}

// NewSecurityAndAnalysisWithDefaults instantiates a new SecurityAndAnalysis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityAndAnalysisWithDefaults() *SecurityAndAnalysis {
	this := SecurityAndAnalysis{}
	return &this
}

// GetAdvancedSecurity returns the AdvancedSecurity field value if set, zero value otherwise.
func (o *SecurityAndAnalysis) GetAdvancedSecurity() SecurityAndAnalysisAdvancedSecurity {
	if o == nil || o.AdvancedSecurity == nil {
		var ret SecurityAndAnalysisAdvancedSecurity
		return ret
	}
	return *o.AdvancedSecurity
}

// GetAdvancedSecurityOk returns a tuple with the AdvancedSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityAndAnalysis) GetAdvancedSecurityOk() (*SecurityAndAnalysisAdvancedSecurity, bool) {
	if o == nil || o.AdvancedSecurity == nil {
		return nil, false
	}
	return o.AdvancedSecurity, true
}

// HasAdvancedSecurity returns a boolean if a field has been set.
func (o *SecurityAndAnalysis) HasAdvancedSecurity() bool {
	if o != nil && o.AdvancedSecurity != nil {
		return true
	}

	return false
}

// SetAdvancedSecurity gets a reference to the given SecurityAndAnalysisAdvancedSecurity and assigns it to the AdvancedSecurity field.
func (o *SecurityAndAnalysis) SetAdvancedSecurity(v SecurityAndAnalysisAdvancedSecurity) {
	o.AdvancedSecurity = &v
}

// GetSecretScanning returns the SecretScanning field value if set, zero value otherwise.
func (o *SecurityAndAnalysis) GetSecretScanning() SecurityAndAnalysisAdvancedSecurity {
	if o == nil || o.SecretScanning == nil {
		var ret SecurityAndAnalysisAdvancedSecurity
		return ret
	}
	return *o.SecretScanning
}

// GetSecretScanningOk returns a tuple with the SecretScanning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityAndAnalysis) GetSecretScanningOk() (*SecurityAndAnalysisAdvancedSecurity, bool) {
	if o == nil || o.SecretScanning == nil {
		return nil, false
	}
	return o.SecretScanning, true
}

// HasSecretScanning returns a boolean if a field has been set.
func (o *SecurityAndAnalysis) HasSecretScanning() bool {
	if o != nil && o.SecretScanning != nil {
		return true
	}

	return false
}

// SetSecretScanning gets a reference to the given SecurityAndAnalysisAdvancedSecurity and assigns it to the SecretScanning field.
func (o *SecurityAndAnalysis) SetSecretScanning(v SecurityAndAnalysisAdvancedSecurity) {
	o.SecretScanning = &v
}

// GetSecretScanningPushProtection returns the SecretScanningPushProtection field value if set, zero value otherwise.
func (o *SecurityAndAnalysis) GetSecretScanningPushProtection() SecurityAndAnalysisAdvancedSecurity {
	if o == nil || o.SecretScanningPushProtection == nil {
		var ret SecurityAndAnalysisAdvancedSecurity
		return ret
	}
	return *o.SecretScanningPushProtection
}

// GetSecretScanningPushProtectionOk returns a tuple with the SecretScanningPushProtection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityAndAnalysis) GetSecretScanningPushProtectionOk() (*SecurityAndAnalysisAdvancedSecurity, bool) {
	if o == nil || o.SecretScanningPushProtection == nil {
		return nil, false
	}
	return o.SecretScanningPushProtection, true
}

// HasSecretScanningPushProtection returns a boolean if a field has been set.
func (o *SecurityAndAnalysis) HasSecretScanningPushProtection() bool {
	if o != nil && o.SecretScanningPushProtection != nil {
		return true
	}

	return false
}

// SetSecretScanningPushProtection gets a reference to the given SecurityAndAnalysisAdvancedSecurity and assigns it to the SecretScanningPushProtection field.
func (o *SecurityAndAnalysis) SetSecretScanningPushProtection(v SecurityAndAnalysisAdvancedSecurity) {
	o.SecretScanningPushProtection = &v
}

func (o SecurityAndAnalysis) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdvancedSecurity != nil {
		toSerialize["advanced_security"] = o.AdvancedSecurity
	}
	if o.SecretScanning != nil {
		toSerialize["secret_scanning"] = o.SecretScanning
	}
	if o.SecretScanningPushProtection != nil {
		toSerialize["secret_scanning_push_protection"] = o.SecretScanningPushProtection
	}
	return json.Marshal(toSerialize)
}

type NullableSecurityAndAnalysis struct {
	value *SecurityAndAnalysis
	isSet bool
}

func (v NullableSecurityAndAnalysis) Get() *SecurityAndAnalysis {
	return v.value
}

func (v *NullableSecurityAndAnalysis) Set(val *SecurityAndAnalysis) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityAndAnalysis) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityAndAnalysis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityAndAnalysis(val *SecurityAndAnalysis) *NullableSecurityAndAnalysis {
	return &NullableSecurityAndAnalysis{value: val, isSet: true}
}

func (v NullableSecurityAndAnalysis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityAndAnalysis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


