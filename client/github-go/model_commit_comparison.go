/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// CommitComparison Commit Comparison
type CommitComparison struct {
	Url string `json:"url"`
	HtmlUrl string `json:"html_url"`
	PermalinkUrl string `json:"permalink_url"`
	DiffUrl string `json:"diff_url"`
	PatchUrl string `json:"patch_url"`
	BaseCommit Commit `json:"base_commit"`
	MergeBaseCommit Commit `json:"merge_base_commit"`
	Status string `json:"status"`
	AheadBy int32 `json:"ahead_by"`
	BehindBy int32 `json:"behind_by"`
	TotalCommits int32 `json:"total_commits"`
	Commits []Commit `json:"commits"`
	Files []DiffEntry `json:"files,omitempty"`
}

// NewCommitComparison instantiates a new CommitComparison object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitComparison(url string, htmlUrl string, permalinkUrl string, diffUrl string, patchUrl string, baseCommit Commit, mergeBaseCommit Commit, status string, aheadBy int32, behindBy int32, totalCommits int32, commits []Commit) *CommitComparison {
	this := CommitComparison{}
	this.Url = url
	this.HtmlUrl = htmlUrl
	this.PermalinkUrl = permalinkUrl
	this.DiffUrl = diffUrl
	this.PatchUrl = patchUrl
	this.BaseCommit = baseCommit
	this.MergeBaseCommit = mergeBaseCommit
	this.Status = status
	this.AheadBy = aheadBy
	this.BehindBy = behindBy
	this.TotalCommits = totalCommits
	this.Commits = commits
	return &this
}

// NewCommitComparisonWithDefaults instantiates a new CommitComparison object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitComparisonWithDefaults() *CommitComparison {
	this := CommitComparison{}
	return &this
}

// GetUrl returns the Url field value
func (o *CommitComparison) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CommitComparison) SetUrl(v string) {
	o.Url = v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *CommitComparison) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *CommitComparison) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetPermalinkUrl returns the PermalinkUrl field value
func (o *CommitComparison) GetPermalinkUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PermalinkUrl
}

// GetPermalinkUrlOk returns a tuple with the PermalinkUrl field value
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetPermalinkUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermalinkUrl, true
}

// SetPermalinkUrl sets field value
func (o *CommitComparison) SetPermalinkUrl(v string) {
	o.PermalinkUrl = v
}

// GetDiffUrl returns the DiffUrl field value
func (o *CommitComparison) GetDiffUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiffUrl
}

// GetDiffUrlOk returns a tuple with the DiffUrl field value
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetDiffUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiffUrl, true
}

// SetDiffUrl sets field value
func (o *CommitComparison) SetDiffUrl(v string) {
	o.DiffUrl = v
}

// GetPatchUrl returns the PatchUrl field value
func (o *CommitComparison) GetPatchUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PatchUrl
}

// GetPatchUrlOk returns a tuple with the PatchUrl field value
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetPatchUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PatchUrl, true
}

// SetPatchUrl sets field value
func (o *CommitComparison) SetPatchUrl(v string) {
	o.PatchUrl = v
}

// GetBaseCommit returns the BaseCommit field value
func (o *CommitComparison) GetBaseCommit() Commit {
	if o == nil {
		var ret Commit
		return ret
	}

	return o.BaseCommit
}

// GetBaseCommitOk returns a tuple with the BaseCommit field value
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetBaseCommitOk() (*Commit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseCommit, true
}

// SetBaseCommit sets field value
func (o *CommitComparison) SetBaseCommit(v Commit) {
	o.BaseCommit = v
}

// GetMergeBaseCommit returns the MergeBaseCommit field value
func (o *CommitComparison) GetMergeBaseCommit() Commit {
	if o == nil {
		var ret Commit
		return ret
	}

	return o.MergeBaseCommit
}

// GetMergeBaseCommitOk returns a tuple with the MergeBaseCommit field value
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetMergeBaseCommitOk() (*Commit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MergeBaseCommit, true
}

// SetMergeBaseCommit sets field value
func (o *CommitComparison) SetMergeBaseCommit(v Commit) {
	o.MergeBaseCommit = v
}

// GetStatus returns the Status field value
func (o *CommitComparison) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CommitComparison) SetStatus(v string) {
	o.Status = v
}

// GetAheadBy returns the AheadBy field value
func (o *CommitComparison) GetAheadBy() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AheadBy
}

// GetAheadByOk returns a tuple with the AheadBy field value
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetAheadByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AheadBy, true
}

// SetAheadBy sets field value
func (o *CommitComparison) SetAheadBy(v int32) {
	o.AheadBy = v
}

// GetBehindBy returns the BehindBy field value
func (o *CommitComparison) GetBehindBy() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BehindBy
}

// GetBehindByOk returns a tuple with the BehindBy field value
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetBehindByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BehindBy, true
}

// SetBehindBy sets field value
func (o *CommitComparison) SetBehindBy(v int32) {
	o.BehindBy = v
}

// GetTotalCommits returns the TotalCommits field value
func (o *CommitComparison) GetTotalCommits() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCommits
}

// GetTotalCommitsOk returns a tuple with the TotalCommits field value
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetTotalCommitsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCommits, true
}

// SetTotalCommits sets field value
func (o *CommitComparison) SetTotalCommits(v int32) {
	o.TotalCommits = v
}

// GetCommits returns the Commits field value
func (o *CommitComparison) GetCommits() []Commit {
	if o == nil {
		var ret []Commit
		return ret
	}

	return o.Commits
}

// GetCommitsOk returns a tuple with the Commits field value
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetCommitsOk() ([]Commit, bool) {
	if o == nil {
		return nil, false
	}
	return o.Commits, true
}

// SetCommits sets field value
func (o *CommitComparison) SetCommits(v []Commit) {
	o.Commits = v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *CommitComparison) GetFiles() []DiffEntry {
	if o == nil || o.Files == nil {
		var ret []DiffEntry
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitComparison) GetFilesOk() ([]DiffEntry, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *CommitComparison) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []DiffEntry and assigns it to the Files field.
func (o *CommitComparison) SetFiles(v []DiffEntry) {
	o.Files = v
}

func (o CommitComparison) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if true {
		toSerialize["permalink_url"] = o.PermalinkUrl
	}
	if true {
		toSerialize["diff_url"] = o.DiffUrl
	}
	if true {
		toSerialize["patch_url"] = o.PatchUrl
	}
	if true {
		toSerialize["base_commit"] = o.BaseCommit
	}
	if true {
		toSerialize["merge_base_commit"] = o.MergeBaseCommit
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["ahead_by"] = o.AheadBy
	}
	if true {
		toSerialize["behind_by"] = o.BehindBy
	}
	if true {
		toSerialize["total_commits"] = o.TotalCommits
	}
	if true {
		toSerialize["commits"] = o.Commits
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	return json.Marshal(toSerialize)
}

type NullableCommitComparison struct {
	value *CommitComparison
	isSet bool
}

func (v NullableCommitComparison) Get() *CommitComparison {
	return v.value
}

func (v *NullableCommitComparison) Set(val *CommitComparison) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitComparison) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitComparison) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitComparison(val *CommitComparison) *NullableCommitComparison {
	return &NullableCommitComparison{value: val, isSet: true}
}

func (v NullableCommitComparison) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitComparison) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


