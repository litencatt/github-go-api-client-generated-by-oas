/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// KeySimple Key Simple
type KeySimple struct {
	Id int32 `json:"id"`
	Key string `json:"key"`
}

// NewKeySimple instantiates a new KeySimple object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeySimple(id int32, key string) *KeySimple {
	this := KeySimple{}
	this.Id = id
	this.Key = key
	return &this
}

// NewKeySimpleWithDefaults instantiates a new KeySimple object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeySimpleWithDefaults() *KeySimple {
	this := KeySimple{}
	return &this
}

// GetId returns the Id field value
func (o *KeySimple) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *KeySimple) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *KeySimple) SetId(v int32) {
	o.Id = v
}

// GetKey returns the Key field value
func (o *KeySimple) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *KeySimple) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *KeySimple) SetKey(v string) {
	o.Key = v
}

func (o KeySimple) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableKeySimple struct {
	value *KeySimple
	isSet bool
}

func (v NullableKeySimple) Get() *KeySimple {
	return v.value
}

func (v *NullableKeySimple) Set(val *KeySimple) {
	v.value = val
	v.isSet = true
}

func (v NullableKeySimple) IsSet() bool {
	return v.isSet
}

func (v *NullableKeySimple) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeySimple(val *KeySimple) *NullableKeySimple {
	return &NullableKeySimple{value: val, isSet: true}
}

func (v NullableKeySimple) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeySimple) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


