/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// EnvironmentApprovals An entry in the reviews log for environment deployments
type EnvironmentApprovals struct {
	// The list of environments that were approved or rejected
	Environments []EnvironmentApprovalsEnvironmentsInner `json:"environments"`
	// Whether deployment to the environment(s) was approved or rejected
	State string `json:"state"`
	User SimpleUser `json:"user"`
	// The comment submitted with the deployment review
	Comment string `json:"comment"`
}

// NewEnvironmentApprovals instantiates a new EnvironmentApprovals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentApprovals(environments []EnvironmentApprovalsEnvironmentsInner, state string, user SimpleUser, comment string) *EnvironmentApprovals {
	this := EnvironmentApprovals{}
	this.Environments = environments
	this.State = state
	this.User = user
	this.Comment = comment
	return &this
}

// NewEnvironmentApprovalsWithDefaults instantiates a new EnvironmentApprovals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentApprovalsWithDefaults() *EnvironmentApprovals {
	this := EnvironmentApprovals{}
	return &this
}

// GetEnvironments returns the Environments field value
func (o *EnvironmentApprovals) GetEnvironments() []EnvironmentApprovalsEnvironmentsInner {
	if o == nil {
		var ret []EnvironmentApprovalsEnvironmentsInner
		return ret
	}

	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value
// and a boolean to check if the value has been set.
func (o *EnvironmentApprovals) GetEnvironmentsOk() ([]EnvironmentApprovalsEnvironmentsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environments, true
}

// SetEnvironments sets field value
func (o *EnvironmentApprovals) SetEnvironments(v []EnvironmentApprovalsEnvironmentsInner) {
	o.Environments = v
}

// GetState returns the State field value
func (o *EnvironmentApprovals) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *EnvironmentApprovals) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *EnvironmentApprovals) SetState(v string) {
	o.State = v
}

// GetUser returns the User field value
func (o *EnvironmentApprovals) GetUser() SimpleUser {
	if o == nil {
		var ret SimpleUser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *EnvironmentApprovals) GetUserOk() (*SimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *EnvironmentApprovals) SetUser(v SimpleUser) {
	o.User = v
}

// GetComment returns the Comment field value
func (o *EnvironmentApprovals) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *EnvironmentApprovals) GetCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *EnvironmentApprovals) SetComment(v string) {
	o.Comment = v
}

func (o EnvironmentApprovals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["environments"] = o.Environments
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["user"] = o.User
	}
	if true {
		toSerialize["comment"] = o.Comment
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentApprovals struct {
	value *EnvironmentApprovals
	isSet bool
}

func (v NullableEnvironmentApprovals) Get() *EnvironmentApprovals {
	return v.value
}

func (v *NullableEnvironmentApprovals) Set(val *EnvironmentApprovals) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentApprovals) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentApprovals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentApprovals(val *EnvironmentApprovals) *NullableEnvironmentApprovals {
	return &NullableEnvironmentApprovals{value: val, isSet: true}
}

func (v NullableEnvironmentApprovals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentApprovals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


