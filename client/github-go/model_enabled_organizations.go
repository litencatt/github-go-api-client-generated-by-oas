/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// EnabledOrganizations The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.
type EnabledOrganizations string

// List of enabled-organizations
const (
	ALL EnabledOrganizations = "all"
	NONE EnabledOrganizations = "none"
	SELECTED EnabledOrganizations = "selected"
)

// All allowed values of EnabledOrganizations enum
var AllowedEnabledOrganizationsEnumValues = []EnabledOrganizations{
	"all",
	"none",
	"selected",
}

func (v *EnabledOrganizations) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnabledOrganizations(value)
	for _, existing := range AllowedEnabledOrganizationsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnabledOrganizations", value)
}

// NewEnabledOrganizationsFromValue returns a pointer to a valid EnabledOrganizations
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnabledOrganizationsFromValue(v string) (*EnabledOrganizations, error) {
	ev := EnabledOrganizations(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnabledOrganizations: valid values are %v", v, AllowedEnabledOrganizationsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnabledOrganizations) IsValid() bool {
	for _, existing := range AllowedEnabledOrganizationsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to enabled-organizations value
func (v EnabledOrganizations) Ptr() *EnabledOrganizations {
	return &v
}

type NullableEnabledOrganizations struct {
	value *EnabledOrganizations
	isSet bool
}

func (v NullableEnabledOrganizations) Get() *EnabledOrganizations {
	return v.value
}

func (v *NullableEnabledOrganizations) Set(val *EnabledOrganizations) {
	v.value = val
	v.isSet = true
}

func (v NullableEnabledOrganizations) IsSet() bool {
	return v.isSet
}

func (v *NullableEnabledOrganizations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnabledOrganizations(val *EnabledOrganizations) *NullableEnabledOrganizations {
	return &NullableEnabledOrganizations{value: val, isSet: true}
}

func (v NullableEnabledOrganizations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnabledOrganizations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

