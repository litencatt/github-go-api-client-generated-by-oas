/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// CodeScanningAlertSetState Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
type CodeScanningAlertSetState string

// List of code-scanning-alert-set-state
const (
	OPEN CodeScanningAlertSetState = "open"
	DISMISSED CodeScanningAlertSetState = "dismissed"
)

// All allowed values of CodeScanningAlertSetState enum
var AllowedCodeScanningAlertSetStateEnumValues = []CodeScanningAlertSetState{
	"open",
	"dismissed",
}

func (v *CodeScanningAlertSetState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CodeScanningAlertSetState(value)
	for _, existing := range AllowedCodeScanningAlertSetStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CodeScanningAlertSetState", value)
}

// NewCodeScanningAlertSetStateFromValue returns a pointer to a valid CodeScanningAlertSetState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCodeScanningAlertSetStateFromValue(v string) (*CodeScanningAlertSetState, error) {
	ev := CodeScanningAlertSetState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CodeScanningAlertSetState: valid values are %v", v, AllowedCodeScanningAlertSetStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CodeScanningAlertSetState) IsValid() bool {
	for _, existing := range AllowedCodeScanningAlertSetStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to code-scanning-alert-set-state value
func (v CodeScanningAlertSetState) Ptr() *CodeScanningAlertSetState {
	return &v
}

type NullableCodeScanningAlertSetState struct {
	value *CodeScanningAlertSetState
	isSet bool
}

func (v NullableCodeScanningAlertSetState) Get() *CodeScanningAlertSetState {
	return v.value
}

func (v *NullableCodeScanningAlertSetState) Set(val *CodeScanningAlertSetState) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeScanningAlertSetState) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeScanningAlertSetState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeScanningAlertSetState(val *CodeScanningAlertSetState) *NullableCodeScanningAlertSetState {
	return &NullableCodeScanningAlertSetState{value: val, isSet: true}
}

func (v NullableCodeScanningAlertSetState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeScanningAlertSetState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

