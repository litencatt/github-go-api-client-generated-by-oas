/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// ReposSetTeamAccessRestrictionsRequest - struct for ReposSetTeamAccessRestrictionsRequest
type ReposSetTeamAccessRestrictionsRequest struct {
	ReposSetTeamAccessRestrictionsRequestOneOf *ReposSetTeamAccessRestrictionsRequestOneOf
	ArrayOfString *[]string
}

// ReposSetTeamAccessRestrictionsRequestOneOfAsReposSetTeamAccessRestrictionsRequest is a convenience function that returns ReposSetTeamAccessRestrictionsRequestOneOf wrapped in ReposSetTeamAccessRestrictionsRequest
func ReposSetTeamAccessRestrictionsRequestOneOfAsReposSetTeamAccessRestrictionsRequest(v *ReposSetTeamAccessRestrictionsRequestOneOf) ReposSetTeamAccessRestrictionsRequest {
	return ReposSetTeamAccessRestrictionsRequest{
		ReposSetTeamAccessRestrictionsRequestOneOf: v,
	}
}

// []stringAsReposSetTeamAccessRestrictionsRequest is a convenience function that returns []string wrapped in ReposSetTeamAccessRestrictionsRequest
func ArrayOfStringAsReposSetTeamAccessRestrictionsRequest(v *[]string) ReposSetTeamAccessRestrictionsRequest {
	return ReposSetTeamAccessRestrictionsRequest{
		ArrayOfString: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReposSetTeamAccessRestrictionsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ReposSetTeamAccessRestrictionsRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.ReposSetTeamAccessRestrictionsRequestOneOf)
	if err == nil {
		jsonReposSetTeamAccessRestrictionsRequestOneOf, _ := json.Marshal(dst.ReposSetTeamAccessRestrictionsRequestOneOf)
		if string(jsonReposSetTeamAccessRestrictionsRequestOneOf) == "{}" { // empty struct
			dst.ReposSetTeamAccessRestrictionsRequestOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ReposSetTeamAccessRestrictionsRequestOneOf = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ReposSetTeamAccessRestrictionsRequestOneOf = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ReposSetTeamAccessRestrictionsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ReposSetTeamAccessRestrictionsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReposSetTeamAccessRestrictionsRequest) MarshalJSON() ([]byte, error) {
	if src.ReposSetTeamAccessRestrictionsRequestOneOf != nil {
		return json.Marshal(&src.ReposSetTeamAccessRestrictionsRequestOneOf)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReposSetTeamAccessRestrictionsRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ReposSetTeamAccessRestrictionsRequestOneOf != nil {
		return obj.ReposSetTeamAccessRestrictionsRequestOneOf
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableReposSetTeamAccessRestrictionsRequest struct {
	value *ReposSetTeamAccessRestrictionsRequest
	isSet bool
}

func (v NullableReposSetTeamAccessRestrictionsRequest) Get() *ReposSetTeamAccessRestrictionsRequest {
	return v.value
}

func (v *NullableReposSetTeamAccessRestrictionsRequest) Set(val *ReposSetTeamAccessRestrictionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReposSetTeamAccessRestrictionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReposSetTeamAccessRestrictionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposSetTeamAccessRestrictionsRequest(val *ReposSetTeamAccessRestrictionsRequest) *NullableReposSetTeamAccessRestrictionsRequest {
	return &NullableReposSetTeamAccessRestrictionsRequest{value: val, isSet: true}
}

func (v NullableReposSetTeamAccessRestrictionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposSetTeamAccessRestrictionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


