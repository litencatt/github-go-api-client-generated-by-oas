/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// DiffEntry Diff Entry
type DiffEntry struct {
	Sha string `json:"sha"`
	Filename string `json:"filename"`
	Status string `json:"status"`
	Additions int32 `json:"additions"`
	Deletions int32 `json:"deletions"`
	Changes int32 `json:"changes"`
	BlobUrl string `json:"blob_url"`
	RawUrl string `json:"raw_url"`
	ContentsUrl string `json:"contents_url"`
	Patch *string `json:"patch,omitempty"`
	PreviousFilename *string `json:"previous_filename,omitempty"`
}

// NewDiffEntry instantiates a new DiffEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiffEntry(sha string, filename string, status string, additions int32, deletions int32, changes int32, blobUrl string, rawUrl string, contentsUrl string) *DiffEntry {
	this := DiffEntry{}
	this.Sha = sha
	this.Filename = filename
	this.Status = status
	this.Additions = additions
	this.Deletions = deletions
	this.Changes = changes
	this.BlobUrl = blobUrl
	this.RawUrl = rawUrl
	this.ContentsUrl = contentsUrl
	return &this
}

// NewDiffEntryWithDefaults instantiates a new DiffEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiffEntryWithDefaults() *DiffEntry {
	this := DiffEntry{}
	return &this
}

// GetSha returns the Sha field value
func (o *DiffEntry) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *DiffEntry) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *DiffEntry) SetSha(v string) {
	o.Sha = v
}

// GetFilename returns the Filename field value
func (o *DiffEntry) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *DiffEntry) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *DiffEntry) SetFilename(v string) {
	o.Filename = v
}

// GetStatus returns the Status field value
func (o *DiffEntry) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DiffEntry) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DiffEntry) SetStatus(v string) {
	o.Status = v
}

// GetAdditions returns the Additions field value
func (o *DiffEntry) GetAdditions() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Additions
}

// GetAdditionsOk returns a tuple with the Additions field value
// and a boolean to check if the value has been set.
func (o *DiffEntry) GetAdditionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Additions, true
}

// SetAdditions sets field value
func (o *DiffEntry) SetAdditions(v int32) {
	o.Additions = v
}

// GetDeletions returns the Deletions field value
func (o *DiffEntry) GetDeletions() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value
// and a boolean to check if the value has been set.
func (o *DiffEntry) GetDeletionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deletions, true
}

// SetDeletions sets field value
func (o *DiffEntry) SetDeletions(v int32) {
	o.Deletions = v
}

// GetChanges returns the Changes field value
func (o *DiffEntry) GetChanges() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Changes
}

// GetChangesOk returns a tuple with the Changes field value
// and a boolean to check if the value has been set.
func (o *DiffEntry) GetChangesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Changes, true
}

// SetChanges sets field value
func (o *DiffEntry) SetChanges(v int32) {
	o.Changes = v
}

// GetBlobUrl returns the BlobUrl field value
func (o *DiffEntry) GetBlobUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BlobUrl
}

// GetBlobUrlOk returns a tuple with the BlobUrl field value
// and a boolean to check if the value has been set.
func (o *DiffEntry) GetBlobUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlobUrl, true
}

// SetBlobUrl sets field value
func (o *DiffEntry) SetBlobUrl(v string) {
	o.BlobUrl = v
}

// GetRawUrl returns the RawUrl field value
func (o *DiffEntry) GetRawUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawUrl
}

// GetRawUrlOk returns a tuple with the RawUrl field value
// and a boolean to check if the value has been set.
func (o *DiffEntry) GetRawUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawUrl, true
}

// SetRawUrl sets field value
func (o *DiffEntry) SetRawUrl(v string) {
	o.RawUrl = v
}

// GetContentsUrl returns the ContentsUrl field value
func (o *DiffEntry) GetContentsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentsUrl
}

// GetContentsUrlOk returns a tuple with the ContentsUrl field value
// and a boolean to check if the value has been set.
func (o *DiffEntry) GetContentsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentsUrl, true
}

// SetContentsUrl sets field value
func (o *DiffEntry) SetContentsUrl(v string) {
	o.ContentsUrl = v
}

// GetPatch returns the Patch field value if set, zero value otherwise.
func (o *DiffEntry) GetPatch() string {
	if o == nil || o.Patch == nil {
		var ret string
		return ret
	}
	return *o.Patch
}

// GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffEntry) GetPatchOk() (*string, bool) {
	if o == nil || o.Patch == nil {
		return nil, false
	}
	return o.Patch, true
}

// HasPatch returns a boolean if a field has been set.
func (o *DiffEntry) HasPatch() bool {
	if o != nil && o.Patch != nil {
		return true
	}

	return false
}

// SetPatch gets a reference to the given string and assigns it to the Patch field.
func (o *DiffEntry) SetPatch(v string) {
	o.Patch = &v
}

// GetPreviousFilename returns the PreviousFilename field value if set, zero value otherwise.
func (o *DiffEntry) GetPreviousFilename() string {
	if o == nil || o.PreviousFilename == nil {
		var ret string
		return ret
	}
	return *o.PreviousFilename
}

// GetPreviousFilenameOk returns a tuple with the PreviousFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffEntry) GetPreviousFilenameOk() (*string, bool) {
	if o == nil || o.PreviousFilename == nil {
		return nil, false
	}
	return o.PreviousFilename, true
}

// HasPreviousFilename returns a boolean if a field has been set.
func (o *DiffEntry) HasPreviousFilename() bool {
	if o != nil && o.PreviousFilename != nil {
		return true
	}

	return false
}

// SetPreviousFilename gets a reference to the given string and assigns it to the PreviousFilename field.
func (o *DiffEntry) SetPreviousFilename(v string) {
	o.PreviousFilename = &v
}

func (o DiffEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sha"] = o.Sha
	}
	if true {
		toSerialize["filename"] = o.Filename
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["additions"] = o.Additions
	}
	if true {
		toSerialize["deletions"] = o.Deletions
	}
	if true {
		toSerialize["changes"] = o.Changes
	}
	if true {
		toSerialize["blob_url"] = o.BlobUrl
	}
	if true {
		toSerialize["raw_url"] = o.RawUrl
	}
	if true {
		toSerialize["contents_url"] = o.ContentsUrl
	}
	if o.Patch != nil {
		toSerialize["patch"] = o.Patch
	}
	if o.PreviousFilename != nil {
		toSerialize["previous_filename"] = o.PreviousFilename
	}
	return json.Marshal(toSerialize)
}

type NullableDiffEntry struct {
	value *DiffEntry
	isSet bool
}

func (v NullableDiffEntry) Get() *DiffEntry {
	return v.value
}

func (v *NullableDiffEntry) Set(val *DiffEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableDiffEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableDiffEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiffEntry(val *DiffEntry) *NullableDiffEntry {
	return &NullableDiffEntry{value: val, isSet: true}
}

func (v NullableDiffEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiffEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


