/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// GistsCreateRequestPublic - struct for GistsCreateRequestPublic
type GistsCreateRequestPublic struct {
	GistsCreateRequestPublicOneOf *GistsCreateRequestPublicOneOf
	Bool *bool
}

// GistsCreateRequestPublicOneOfAsGistsCreateRequestPublic is a convenience function that returns GistsCreateRequestPublicOneOf wrapped in GistsCreateRequestPublic
func GistsCreateRequestPublicOneOfAsGistsCreateRequestPublic(v *GistsCreateRequestPublicOneOf) GistsCreateRequestPublic {
	return GistsCreateRequestPublic{
		GistsCreateRequestPublicOneOf: v,
	}
}

// boolAsGistsCreateRequestPublic is a convenience function that returns bool wrapped in GistsCreateRequestPublic
func BoolAsGistsCreateRequestPublic(v *bool) GistsCreateRequestPublic {
	return GistsCreateRequestPublic{
		Bool: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GistsCreateRequestPublic) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GistsCreateRequestPublicOneOf
	err = newStrictDecoder(data).Decode(&dst.GistsCreateRequestPublicOneOf)
	if err == nil {
		jsonGistsCreateRequestPublicOneOf, _ := json.Marshal(dst.GistsCreateRequestPublicOneOf)
		if string(jsonGistsCreateRequestPublicOneOf) == "{}" { // empty struct
			dst.GistsCreateRequestPublicOneOf = nil
		} else {
			match++
		}
	} else {
		dst.GistsCreateRequestPublicOneOf = nil
	}

	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			match++
		}
	} else {
		dst.Bool = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GistsCreateRequestPublicOneOf = nil
		dst.Bool = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GistsCreateRequestPublic)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GistsCreateRequestPublic)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GistsCreateRequestPublic) MarshalJSON() ([]byte, error) {
	if src.GistsCreateRequestPublicOneOf != nil {
		return json.Marshal(&src.GistsCreateRequestPublicOneOf)
	}

	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GistsCreateRequestPublic) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GistsCreateRequestPublicOneOf != nil {
		return obj.GistsCreateRequestPublicOneOf
	}

	if obj.Bool != nil {
		return obj.Bool
	}

	// all schemas are nil
	return nil
}

type NullableGistsCreateRequestPublic struct {
	value *GistsCreateRequestPublic
	isSet bool
}

func (v NullableGistsCreateRequestPublic) Get() *GistsCreateRequestPublic {
	return v.value
}

func (v *NullableGistsCreateRequestPublic) Set(val *GistsCreateRequestPublic) {
	v.value = val
	v.isSet = true
}

func (v NullableGistsCreateRequestPublic) IsSet() bool {
	return v.isSet
}

func (v *NullableGistsCreateRequestPublic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGistsCreateRequestPublic(val *GistsCreateRequestPublic) *NullableGistsCreateRequestPublic {
	return &NullableGistsCreateRequestPublic{value: val, isSet: true}
}

func (v NullableGistsCreateRequestPublic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGistsCreateRequestPublic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


