/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// PorterLargeFile Porter Large File
type PorterLargeFile struct {
	RefName string `json:"ref_name"`
	Path string `json:"path"`
	Oid string `json:"oid"`
	Size int32 `json:"size"`
}

// NewPorterLargeFile instantiates a new PorterLargeFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPorterLargeFile(refName string, path string, oid string, size int32) *PorterLargeFile {
	this := PorterLargeFile{}
	this.RefName = refName
	this.Path = path
	this.Oid = oid
	this.Size = size
	return &this
}

// NewPorterLargeFileWithDefaults instantiates a new PorterLargeFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPorterLargeFileWithDefaults() *PorterLargeFile {
	this := PorterLargeFile{}
	return &this
}

// GetRefName returns the RefName field value
func (o *PorterLargeFile) GetRefName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RefName
}

// GetRefNameOk returns a tuple with the RefName field value
// and a boolean to check if the value has been set.
func (o *PorterLargeFile) GetRefNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RefName, true
}

// SetRefName sets field value
func (o *PorterLargeFile) SetRefName(v string) {
	o.RefName = v
}

// GetPath returns the Path field value
func (o *PorterLargeFile) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *PorterLargeFile) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *PorterLargeFile) SetPath(v string) {
	o.Path = v
}

// GetOid returns the Oid field value
func (o *PorterLargeFile) GetOid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Oid
}

// GetOidOk returns a tuple with the Oid field value
// and a boolean to check if the value has been set.
func (o *PorterLargeFile) GetOidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Oid, true
}

// SetOid sets field value
func (o *PorterLargeFile) SetOid(v string) {
	o.Oid = v
}

// GetSize returns the Size field value
func (o *PorterLargeFile) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *PorterLargeFile) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *PorterLargeFile) SetSize(v int32) {
	o.Size = v
}

func (o PorterLargeFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ref_name"] = o.RefName
	}
	if true {
		toSerialize["path"] = o.Path
	}
	if true {
		toSerialize["oid"] = o.Oid
	}
	if true {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullablePorterLargeFile struct {
	value *PorterLargeFile
	isSet bool
}

func (v NullablePorterLargeFile) Get() *PorterLargeFile {
	return v.value
}

func (v *NullablePorterLargeFile) Set(val *PorterLargeFile) {
	v.value = val
	v.isSet = true
}

func (v NullablePorterLargeFile) IsSet() bool {
	return v.isSet
}

func (v *NullablePorterLargeFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePorterLargeFile(val *PorterLargeFile) *NullablePorterLargeFile {
	return &NullablePorterLargeFile{value: val, isSet: true}
}

func (v NullablePorterLargeFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePorterLargeFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


