/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// InstallationToken Authentication token for a GitHub App installed on a user or org.
type InstallationToken struct {
	Token string `json:"token"`
	ExpiresAt string `json:"expires_at"`
	Permissions *AppPermissions `json:"permissions,omitempty"`
	RepositorySelection *string `json:"repository_selection,omitempty"`
	Repositories []Repository `json:"repositories,omitempty"`
	SingleFile *string `json:"single_file,omitempty"`
	HasMultipleSingleFiles *bool `json:"has_multiple_single_files,omitempty"`
	SingleFilePaths []string `json:"single_file_paths,omitempty"`
}

// NewInstallationToken instantiates a new InstallationToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallationToken(token string, expiresAt string) *InstallationToken {
	this := InstallationToken{}
	this.Token = token
	this.ExpiresAt = expiresAt
	return &this
}

// NewInstallationTokenWithDefaults instantiates a new InstallationToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallationTokenWithDefaults() *InstallationToken {
	this := InstallationToken{}
	return &this
}

// GetToken returns the Token field value
func (o *InstallationToken) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *InstallationToken) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *InstallationToken) SetToken(v string) {
	o.Token = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *InstallationToken) GetExpiresAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *InstallationToken) GetExpiresAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *InstallationToken) SetExpiresAt(v string) {
	o.ExpiresAt = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *InstallationToken) GetPermissions() AppPermissions {
	if o == nil || o.Permissions == nil {
		var ret AppPermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationToken) GetPermissionsOk() (*AppPermissions, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *InstallationToken) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given AppPermissions and assigns it to the Permissions field.
func (o *InstallationToken) SetPermissions(v AppPermissions) {
	o.Permissions = &v
}

// GetRepositorySelection returns the RepositorySelection field value if set, zero value otherwise.
func (o *InstallationToken) GetRepositorySelection() string {
	if o == nil || o.RepositorySelection == nil {
		var ret string
		return ret
	}
	return *o.RepositorySelection
}

// GetRepositorySelectionOk returns a tuple with the RepositorySelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationToken) GetRepositorySelectionOk() (*string, bool) {
	if o == nil || o.RepositorySelection == nil {
		return nil, false
	}
	return o.RepositorySelection, true
}

// HasRepositorySelection returns a boolean if a field has been set.
func (o *InstallationToken) HasRepositorySelection() bool {
	if o != nil && o.RepositorySelection != nil {
		return true
	}

	return false
}

// SetRepositorySelection gets a reference to the given string and assigns it to the RepositorySelection field.
func (o *InstallationToken) SetRepositorySelection(v string) {
	o.RepositorySelection = &v
}

// GetRepositories returns the Repositories field value if set, zero value otherwise.
func (o *InstallationToken) GetRepositories() []Repository {
	if o == nil || o.Repositories == nil {
		var ret []Repository
		return ret
	}
	return o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationToken) GetRepositoriesOk() ([]Repository, bool) {
	if o == nil || o.Repositories == nil {
		return nil, false
	}
	return o.Repositories, true
}

// HasRepositories returns a boolean if a field has been set.
func (o *InstallationToken) HasRepositories() bool {
	if o != nil && o.Repositories != nil {
		return true
	}

	return false
}

// SetRepositories gets a reference to the given []Repository and assigns it to the Repositories field.
func (o *InstallationToken) SetRepositories(v []Repository) {
	o.Repositories = v
}

// GetSingleFile returns the SingleFile field value if set, zero value otherwise.
func (o *InstallationToken) GetSingleFile() string {
	if o == nil || o.SingleFile == nil {
		var ret string
		return ret
	}
	return *o.SingleFile
}

// GetSingleFileOk returns a tuple with the SingleFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationToken) GetSingleFileOk() (*string, bool) {
	if o == nil || o.SingleFile == nil {
		return nil, false
	}
	return o.SingleFile, true
}

// HasSingleFile returns a boolean if a field has been set.
func (o *InstallationToken) HasSingleFile() bool {
	if o != nil && o.SingleFile != nil {
		return true
	}

	return false
}

// SetSingleFile gets a reference to the given string and assigns it to the SingleFile field.
func (o *InstallationToken) SetSingleFile(v string) {
	o.SingleFile = &v
}

// GetHasMultipleSingleFiles returns the HasMultipleSingleFiles field value if set, zero value otherwise.
func (o *InstallationToken) GetHasMultipleSingleFiles() bool {
	if o == nil || o.HasMultipleSingleFiles == nil {
		var ret bool
		return ret
	}
	return *o.HasMultipleSingleFiles
}

// GetHasMultipleSingleFilesOk returns a tuple with the HasMultipleSingleFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationToken) GetHasMultipleSingleFilesOk() (*bool, bool) {
	if o == nil || o.HasMultipleSingleFiles == nil {
		return nil, false
	}
	return o.HasMultipleSingleFiles, true
}

// HasHasMultipleSingleFiles returns a boolean if a field has been set.
func (o *InstallationToken) HasHasMultipleSingleFiles() bool {
	if o != nil && o.HasMultipleSingleFiles != nil {
		return true
	}

	return false
}

// SetHasMultipleSingleFiles gets a reference to the given bool and assigns it to the HasMultipleSingleFiles field.
func (o *InstallationToken) SetHasMultipleSingleFiles(v bool) {
	o.HasMultipleSingleFiles = &v
}

// GetSingleFilePaths returns the SingleFilePaths field value if set, zero value otherwise.
func (o *InstallationToken) GetSingleFilePaths() []string {
	if o == nil || o.SingleFilePaths == nil {
		var ret []string
		return ret
	}
	return o.SingleFilePaths
}

// GetSingleFilePathsOk returns a tuple with the SingleFilePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallationToken) GetSingleFilePathsOk() ([]string, bool) {
	if o == nil || o.SingleFilePaths == nil {
		return nil, false
	}
	return o.SingleFilePaths, true
}

// HasSingleFilePaths returns a boolean if a field has been set.
func (o *InstallationToken) HasSingleFilePaths() bool {
	if o != nil && o.SingleFilePaths != nil {
		return true
	}

	return false
}

// SetSingleFilePaths gets a reference to the given []string and assigns it to the SingleFilePaths field.
func (o *InstallationToken) SetSingleFilePaths(v []string) {
	o.SingleFilePaths = v
}

func (o InstallationToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["token"] = o.Token
	}
	if true {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	if o.RepositorySelection != nil {
		toSerialize["repository_selection"] = o.RepositorySelection
	}
	if o.Repositories != nil {
		toSerialize["repositories"] = o.Repositories
	}
	if o.SingleFile != nil {
		toSerialize["single_file"] = o.SingleFile
	}
	if o.HasMultipleSingleFiles != nil {
		toSerialize["has_multiple_single_files"] = o.HasMultipleSingleFiles
	}
	if o.SingleFilePaths != nil {
		toSerialize["single_file_paths"] = o.SingleFilePaths
	}
	return json.Marshal(toSerialize)
}

type NullableInstallationToken struct {
	value *InstallationToken
	isSet bool
}

func (v NullableInstallationToken) Get() *InstallationToken {
	return v.value
}

func (v *NullableInstallationToken) Set(val *InstallationToken) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallationToken) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallationToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallationToken(val *InstallationToken) *NullableInstallationToken {
	return &NullableInstallationToken{value: val, isSet: true}
}

func (v NullableInstallationToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallationToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


