/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// PackageVersionMetadata struct for PackageVersionMetadata
type PackageVersionMetadata struct {
	PackageType string `json:"package_type"`
	Container *ContainerMetadata `json:"container,omitempty"`
	Docker *DockerMetadata `json:"docker,omitempty"`
}

// NewPackageVersionMetadata instantiates a new PackageVersionMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageVersionMetadata(packageType string) *PackageVersionMetadata {
	this := PackageVersionMetadata{}
	this.PackageType = packageType
	return &this
}

// NewPackageVersionMetadataWithDefaults instantiates a new PackageVersionMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageVersionMetadataWithDefaults() *PackageVersionMetadata {
	this := PackageVersionMetadata{}
	return &this
}

// GetPackageType returns the PackageType field value
func (o *PackageVersionMetadata) GetPackageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value
// and a boolean to check if the value has been set.
func (o *PackageVersionMetadata) GetPackageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageType, true
}

// SetPackageType sets field value
func (o *PackageVersionMetadata) SetPackageType(v string) {
	o.PackageType = v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *PackageVersionMetadata) GetContainer() ContainerMetadata {
	if o == nil || o.Container == nil {
		var ret ContainerMetadata
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageVersionMetadata) GetContainerOk() (*ContainerMetadata, bool) {
	if o == nil || o.Container == nil {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *PackageVersionMetadata) HasContainer() bool {
	if o != nil && o.Container != nil {
		return true
	}

	return false
}

// SetContainer gets a reference to the given ContainerMetadata and assigns it to the Container field.
func (o *PackageVersionMetadata) SetContainer(v ContainerMetadata) {
	o.Container = &v
}

// GetDocker returns the Docker field value if set, zero value otherwise.
func (o *PackageVersionMetadata) GetDocker() DockerMetadata {
	if o == nil || o.Docker == nil {
		var ret DockerMetadata
		return ret
	}
	return *o.Docker
}

// GetDockerOk returns a tuple with the Docker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageVersionMetadata) GetDockerOk() (*DockerMetadata, bool) {
	if o == nil || o.Docker == nil {
		return nil, false
	}
	return o.Docker, true
}

// HasDocker returns a boolean if a field has been set.
func (o *PackageVersionMetadata) HasDocker() bool {
	if o != nil && o.Docker != nil {
		return true
	}

	return false
}

// SetDocker gets a reference to the given DockerMetadata and assigns it to the Docker field.
func (o *PackageVersionMetadata) SetDocker(v DockerMetadata) {
	o.Docker = &v
}

func (o PackageVersionMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["package_type"] = o.PackageType
	}
	if o.Container != nil {
		toSerialize["container"] = o.Container
	}
	if o.Docker != nil {
		toSerialize["docker"] = o.Docker
	}
	return json.Marshal(toSerialize)
}

type NullablePackageVersionMetadata struct {
	value *PackageVersionMetadata
	isSet bool
}

func (v NullablePackageVersionMetadata) Get() *PackageVersionMetadata {
	return v.value
}

func (v *NullablePackageVersionMetadata) Set(val *PackageVersionMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageVersionMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageVersionMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageVersionMetadata(val *PackageVersionMetadata) *NullablePackageVersionMetadata {
	return &NullablePackageVersionMetadata{value: val, isSet: true}
}

func (v NullablePackageVersionMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageVersionMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


