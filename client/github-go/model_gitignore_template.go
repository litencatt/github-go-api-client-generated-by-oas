/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// GitignoreTemplate Gitignore Template
type GitignoreTemplate struct {
	Name string `json:"name"`
	Source string `json:"source"`
}

// NewGitignoreTemplate instantiates a new GitignoreTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitignoreTemplate(name string, source string) *GitignoreTemplate {
	this := GitignoreTemplate{}
	this.Name = name
	this.Source = source
	return &this
}

// NewGitignoreTemplateWithDefaults instantiates a new GitignoreTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitignoreTemplateWithDefaults() *GitignoreTemplate {
	this := GitignoreTemplate{}
	return &this
}

// GetName returns the Name field value
func (o *GitignoreTemplate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GitignoreTemplate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GitignoreTemplate) SetName(v string) {
	o.Name = v
}

// GetSource returns the Source field value
func (o *GitignoreTemplate) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *GitignoreTemplate) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *GitignoreTemplate) SetSource(v string) {
	o.Source = v
}

func (o GitignoreTemplate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["source"] = o.Source
	}
	return json.Marshal(toSerialize)
}

type NullableGitignoreTemplate struct {
	value *GitignoreTemplate
	isSet bool
}

func (v NullableGitignoreTemplate) Get() *GitignoreTemplate {
	return v.value
}

func (v *NullableGitignoreTemplate) Set(val *GitignoreTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableGitignoreTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableGitignoreTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitignoreTemplate(val *GitignoreTemplate) *NullableGitignoreTemplate {
	return &NullableGitignoreTemplate{value: val, isSet: true}
}

func (v NullableGitignoreTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitignoreTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


