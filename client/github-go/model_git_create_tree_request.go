/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// GitCreateTreeRequest struct for GitCreateTreeRequest
type GitCreateTreeRequest struct {
	// Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
	Tree []GitCreateTreeRequestTreeInner `json:"tree"`
	// The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on. If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit. 
	BaseTree *string `json:"base_tree,omitempty"`
}

// NewGitCreateTreeRequest instantiates a new GitCreateTreeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitCreateTreeRequest(tree []GitCreateTreeRequestTreeInner) *GitCreateTreeRequest {
	this := GitCreateTreeRequest{}
	this.Tree = tree
	return &this
}

// NewGitCreateTreeRequestWithDefaults instantiates a new GitCreateTreeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitCreateTreeRequestWithDefaults() *GitCreateTreeRequest {
	this := GitCreateTreeRequest{}
	return &this
}

// GetTree returns the Tree field value
func (o *GitCreateTreeRequest) GetTree() []GitCreateTreeRequestTreeInner {
	if o == nil {
		var ret []GitCreateTreeRequestTreeInner
		return ret
	}

	return o.Tree
}

// GetTreeOk returns a tuple with the Tree field value
// and a boolean to check if the value has been set.
func (o *GitCreateTreeRequest) GetTreeOk() ([]GitCreateTreeRequestTreeInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tree, true
}

// SetTree sets field value
func (o *GitCreateTreeRequest) SetTree(v []GitCreateTreeRequestTreeInner) {
	o.Tree = v
}

// GetBaseTree returns the BaseTree field value if set, zero value otherwise.
func (o *GitCreateTreeRequest) GetBaseTree() string {
	if o == nil || o.BaseTree == nil {
		var ret string
		return ret
	}
	return *o.BaseTree
}

// GetBaseTreeOk returns a tuple with the BaseTree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateTreeRequest) GetBaseTreeOk() (*string, bool) {
	if o == nil || o.BaseTree == nil {
		return nil, false
	}
	return o.BaseTree, true
}

// HasBaseTree returns a boolean if a field has been set.
func (o *GitCreateTreeRequest) HasBaseTree() bool {
	if o != nil && o.BaseTree != nil {
		return true
	}

	return false
}

// SetBaseTree gets a reference to the given string and assigns it to the BaseTree field.
func (o *GitCreateTreeRequest) SetBaseTree(v string) {
	o.BaseTree = &v
}

func (o GitCreateTreeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tree"] = o.Tree
	}
	if o.BaseTree != nil {
		toSerialize["base_tree"] = o.BaseTree
	}
	return json.Marshal(toSerialize)
}

type NullableGitCreateTreeRequest struct {
	value *GitCreateTreeRequest
	isSet bool
}

func (v NullableGitCreateTreeRequest) Get() *GitCreateTreeRequest {
	return v.value
}

func (v *NullableGitCreateTreeRequest) Set(val *GitCreateTreeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGitCreateTreeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGitCreateTreeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitCreateTreeRequest(val *GitCreateTreeRequest) *NullableGitCreateTreeRequest {
	return &NullableGitCreateTreeRequest{value: val, isSet: true}
}

func (v NullableGitCreateTreeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitCreateTreeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


