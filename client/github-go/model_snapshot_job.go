/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// SnapshotJob struct for SnapshotJob
type SnapshotJob struct {
	// The external ID of the job.
	Id string `json:"id"`
	// Correlator provides a key that is used to group snapshots submitted over time. Only the \"latest\" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given \"wave\" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
	Correlator string `json:"correlator"`
	// The url for the job.
	HtmlUrl *string `json:"html_url,omitempty"`
}

// NewSnapshotJob instantiates a new SnapshotJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotJob(id string, correlator string) *SnapshotJob {
	this := SnapshotJob{}
	this.Id = id
	this.Correlator = correlator
	return &this
}

// NewSnapshotJobWithDefaults instantiates a new SnapshotJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotJobWithDefaults() *SnapshotJob {
	this := SnapshotJob{}
	return &this
}

// GetId returns the Id field value
func (o *SnapshotJob) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SnapshotJob) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SnapshotJob) SetId(v string) {
	o.Id = v
}

// GetCorrelator returns the Correlator field value
func (o *SnapshotJob) GetCorrelator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Correlator
}

// GetCorrelatorOk returns a tuple with the Correlator field value
// and a boolean to check if the value has been set.
func (o *SnapshotJob) GetCorrelatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Correlator, true
}

// SetCorrelator sets field value
func (o *SnapshotJob) SetCorrelator(v string) {
	o.Correlator = v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *SnapshotJob) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotJob) GetHtmlUrlOk() (*string, bool) {
	if o == nil || o.HtmlUrl == nil {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *SnapshotJob) HasHtmlUrl() bool {
	if o != nil && o.HtmlUrl != nil {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *SnapshotJob) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

func (o SnapshotJob) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["correlator"] = o.Correlator
	}
	if o.HtmlUrl != nil {
		toSerialize["html_url"] = o.HtmlUrl
	}
	return json.Marshal(toSerialize)
}

type NullableSnapshotJob struct {
	value *SnapshotJob
	isSet bool
}

func (v NullableSnapshotJob) Get() *SnapshotJob {
	return v.value
}

func (v *NullableSnapshotJob) Set(val *SnapshotJob) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotJob) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotJob(val *SnapshotJob) *NullableSnapshotJob {
	return &NullableSnapshotJob{value: val, isSet: true}
}

func (v NullableSnapshotJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


