/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// ReposUpdateInformationAboutPagesSiteRequestSource struct for ReposUpdateInformationAboutPagesSiteRequestSource
type ReposUpdateInformationAboutPagesSiteRequestSource struct {
	ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf *ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf
	ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf1 *ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ReposUpdateInformationAboutPagesSiteRequestSource) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf
	err = json.Unmarshal(data, &dst.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf);
	if err == nil {
		jsonReposUpdateInformationAboutPagesSiteRequestSourceAnyOf, _ := json.Marshal(dst.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf)
		if string(jsonReposUpdateInformationAboutPagesSiteRequestSourceAnyOf) == "{}" { // empty struct
			dst.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf = nil
		} else {
			return nil // data stored in dst.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf, return on the first match
		}
	} else {
		dst.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf = nil
	}

	// try to unmarshal JSON data into ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf1
	err = json.Unmarshal(data, &dst.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf1);
	if err == nil {
		jsonReposUpdateInformationAboutPagesSiteRequestSourceAnyOf1, _ := json.Marshal(dst.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf1)
		if string(jsonReposUpdateInformationAboutPagesSiteRequestSourceAnyOf1) == "{}" { // empty struct
			dst.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf1 = nil
		} else {
			return nil // data stored in dst.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf1, return on the first match
		}
	} else {
		dst.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf1 = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(ReposUpdateInformationAboutPagesSiteRequestSource)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ReposUpdateInformationAboutPagesSiteRequestSource) MarshalJSON() ([]byte, error) {
	if src.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf != nil {
		return json.Marshal(&src.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf)
	}

	if src.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf1 != nil {
		return json.Marshal(&src.ReposUpdateInformationAboutPagesSiteRequestSourceAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableReposUpdateInformationAboutPagesSiteRequestSource struct {
	value *ReposUpdateInformationAboutPagesSiteRequestSource
	isSet bool
}

func (v NullableReposUpdateInformationAboutPagesSiteRequestSource) Get() *ReposUpdateInformationAboutPagesSiteRequestSource {
	return v.value
}

func (v *NullableReposUpdateInformationAboutPagesSiteRequestSource) Set(val *ReposUpdateInformationAboutPagesSiteRequestSource) {
	v.value = val
	v.isSet = true
}

func (v NullableReposUpdateInformationAboutPagesSiteRequestSource) IsSet() bool {
	return v.isSet
}

func (v *NullableReposUpdateInformationAboutPagesSiteRequestSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposUpdateInformationAboutPagesSiteRequestSource(val *ReposUpdateInformationAboutPagesSiteRequestSource) *NullableReposUpdateInformationAboutPagesSiteRequestSource {
	return &NullableReposUpdateInformationAboutPagesSiteRequestSource{value: val, isSet: true}
}

func (v NullableReposUpdateInformationAboutPagesSiteRequestSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposUpdateInformationAboutPagesSiteRequestSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


