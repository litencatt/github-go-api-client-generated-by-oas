/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// GitCreateCommitRequest struct for GitCreateCommitRequest
type GitCreateCommitRequest struct {
	// The commit message
	Message string `json:"message"`
	// The SHA of the tree object this commit points to
	Tree string `json:"tree"`
	// The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
	Parents []string `json:"parents,omitempty"`
	Author *GitCreateCommitRequestAuthor `json:"author,omitempty"`
	Committer *GitCreateCommitRequestCommitter `json:"committer,omitempty"`
	// The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
	Signature *string `json:"signature,omitempty"`
}

// NewGitCreateCommitRequest instantiates a new GitCreateCommitRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitCreateCommitRequest(message string, tree string) *GitCreateCommitRequest {
	this := GitCreateCommitRequest{}
	this.Message = message
	this.Tree = tree
	return &this
}

// NewGitCreateCommitRequestWithDefaults instantiates a new GitCreateCommitRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitCreateCommitRequestWithDefaults() *GitCreateCommitRequest {
	this := GitCreateCommitRequest{}
	return &this
}

// GetMessage returns the Message field value
func (o *GitCreateCommitRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *GitCreateCommitRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *GitCreateCommitRequest) SetMessage(v string) {
	o.Message = v
}

// GetTree returns the Tree field value
func (o *GitCreateCommitRequest) GetTree() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tree
}

// GetTreeOk returns a tuple with the Tree field value
// and a boolean to check if the value has been set.
func (o *GitCreateCommitRequest) GetTreeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tree, true
}

// SetTree sets field value
func (o *GitCreateCommitRequest) SetTree(v string) {
	o.Tree = v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *GitCreateCommitRequest) GetParents() []string {
	if o == nil || o.Parents == nil {
		var ret []string
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateCommitRequest) GetParentsOk() ([]string, bool) {
	if o == nil || o.Parents == nil {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *GitCreateCommitRequest) HasParents() bool {
	if o != nil && o.Parents != nil {
		return true
	}

	return false
}

// SetParents gets a reference to the given []string and assigns it to the Parents field.
func (o *GitCreateCommitRequest) SetParents(v []string) {
	o.Parents = v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *GitCreateCommitRequest) GetAuthor() GitCreateCommitRequestAuthor {
	if o == nil || o.Author == nil {
		var ret GitCreateCommitRequestAuthor
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateCommitRequest) GetAuthorOk() (*GitCreateCommitRequestAuthor, bool) {
	if o == nil || o.Author == nil {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *GitCreateCommitRequest) HasAuthor() bool {
	if o != nil && o.Author != nil {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given GitCreateCommitRequestAuthor and assigns it to the Author field.
func (o *GitCreateCommitRequest) SetAuthor(v GitCreateCommitRequestAuthor) {
	o.Author = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *GitCreateCommitRequest) GetCommitter() GitCreateCommitRequestCommitter {
	if o == nil || o.Committer == nil {
		var ret GitCreateCommitRequestCommitter
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateCommitRequest) GetCommitterOk() (*GitCreateCommitRequestCommitter, bool) {
	if o == nil || o.Committer == nil {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *GitCreateCommitRequest) HasCommitter() bool {
	if o != nil && o.Committer != nil {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given GitCreateCommitRequestCommitter and assigns it to the Committer field.
func (o *GitCreateCommitRequest) SetCommitter(v GitCreateCommitRequestCommitter) {
	o.Committer = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *GitCreateCommitRequest) GetSignature() string {
	if o == nil || o.Signature == nil {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateCommitRequest) GetSignatureOk() (*string, bool) {
	if o == nil || o.Signature == nil {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *GitCreateCommitRequest) HasSignature() bool {
	if o != nil && o.Signature != nil {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *GitCreateCommitRequest) SetSignature(v string) {
	o.Signature = &v
}

func (o GitCreateCommitRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["tree"] = o.Tree
	}
	if o.Parents != nil {
		toSerialize["parents"] = o.Parents
	}
	if o.Author != nil {
		toSerialize["author"] = o.Author
	}
	if o.Committer != nil {
		toSerialize["committer"] = o.Committer
	}
	if o.Signature != nil {
		toSerialize["signature"] = o.Signature
	}
	return json.Marshal(toSerialize)
}

type NullableGitCreateCommitRequest struct {
	value *GitCreateCommitRequest
	isSet bool
}

func (v NullableGitCreateCommitRequest) Get() *GitCreateCommitRequest {
	return v.value
}

func (v *NullableGitCreateCommitRequest) Set(val *GitCreateCommitRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGitCreateCommitRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGitCreateCommitRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitCreateCommitRequest(val *GitCreateCommitRequest) *NullableGitCreateCommitRequest {
	return &NullableGitCreateCommitRequest{value: val, isSet: true}
}

func (v NullableGitCreateCommitRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitCreateCommitRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


