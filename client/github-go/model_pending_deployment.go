/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// PendingDeployment Details of a deployment that is waiting for protection rules to pass
type PendingDeployment struct {
	Environment PendingDeploymentEnvironment `json:"environment"`
	// The set duration of the wait timer
	WaitTimer int32 `json:"wait_timer"`
	// The time that the wait timer began.
	WaitTimerStartedAt NullableTime `json:"wait_timer_started_at"`
	// Whether the currently authenticated user can approve the deployment
	CurrentUserCanApprove bool `json:"current_user_can_approve"`
	// The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
	Reviewers []PendingDeploymentReviewersInner `json:"reviewers"`
}

// NewPendingDeployment instantiates a new PendingDeployment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPendingDeployment(environment PendingDeploymentEnvironment, waitTimer int32, waitTimerStartedAt NullableTime, currentUserCanApprove bool, reviewers []PendingDeploymentReviewersInner) *PendingDeployment {
	this := PendingDeployment{}
	this.Environment = environment
	this.WaitTimer = waitTimer
	this.WaitTimerStartedAt = waitTimerStartedAt
	this.CurrentUserCanApprove = currentUserCanApprove
	this.Reviewers = reviewers
	return &this
}

// NewPendingDeploymentWithDefaults instantiates a new PendingDeployment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPendingDeploymentWithDefaults() *PendingDeployment {
	this := PendingDeployment{}
	return &this
}

// GetEnvironment returns the Environment field value
func (o *PendingDeployment) GetEnvironment() PendingDeploymentEnvironment {
	if o == nil {
		var ret PendingDeploymentEnvironment
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *PendingDeployment) GetEnvironmentOk() (*PendingDeploymentEnvironment, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *PendingDeployment) SetEnvironment(v PendingDeploymentEnvironment) {
	o.Environment = v
}

// GetWaitTimer returns the WaitTimer field value
func (o *PendingDeployment) GetWaitTimer() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WaitTimer
}

// GetWaitTimerOk returns a tuple with the WaitTimer field value
// and a boolean to check if the value has been set.
func (o *PendingDeployment) GetWaitTimerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WaitTimer, true
}

// SetWaitTimer sets field value
func (o *PendingDeployment) SetWaitTimer(v int32) {
	o.WaitTimer = v
}

// GetWaitTimerStartedAt returns the WaitTimerStartedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *PendingDeployment) GetWaitTimerStartedAt() time.Time {
	if o == nil || o.WaitTimerStartedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.WaitTimerStartedAt.Get()
}

// GetWaitTimerStartedAtOk returns a tuple with the WaitTimerStartedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PendingDeployment) GetWaitTimerStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.WaitTimerStartedAt.Get(), o.WaitTimerStartedAt.IsSet()
}

// SetWaitTimerStartedAt sets field value
func (o *PendingDeployment) SetWaitTimerStartedAt(v time.Time) {
	o.WaitTimerStartedAt.Set(&v)
}

// GetCurrentUserCanApprove returns the CurrentUserCanApprove field value
func (o *PendingDeployment) GetCurrentUserCanApprove() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CurrentUserCanApprove
}

// GetCurrentUserCanApproveOk returns a tuple with the CurrentUserCanApprove field value
// and a boolean to check if the value has been set.
func (o *PendingDeployment) GetCurrentUserCanApproveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentUserCanApprove, true
}

// SetCurrentUserCanApprove sets field value
func (o *PendingDeployment) SetCurrentUserCanApprove(v bool) {
	o.CurrentUserCanApprove = v
}

// GetReviewers returns the Reviewers field value
func (o *PendingDeployment) GetReviewers() []PendingDeploymentReviewersInner {
	if o == nil {
		var ret []PendingDeploymentReviewersInner
		return ret
	}

	return o.Reviewers
}

// GetReviewersOk returns a tuple with the Reviewers field value
// and a boolean to check if the value has been set.
func (o *PendingDeployment) GetReviewersOk() ([]PendingDeploymentReviewersInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reviewers, true
}

// SetReviewers sets field value
func (o *PendingDeployment) SetReviewers(v []PendingDeploymentReviewersInner) {
	o.Reviewers = v
}

func (o PendingDeployment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["environment"] = o.Environment
	}
	if true {
		toSerialize["wait_timer"] = o.WaitTimer
	}
	if true {
		toSerialize["wait_timer_started_at"] = o.WaitTimerStartedAt.Get()
	}
	if true {
		toSerialize["current_user_can_approve"] = o.CurrentUserCanApprove
	}
	if true {
		toSerialize["reviewers"] = o.Reviewers
	}
	return json.Marshal(toSerialize)
}

type NullablePendingDeployment struct {
	value *PendingDeployment
	isSet bool
}

func (v NullablePendingDeployment) Get() *PendingDeployment {
	return v.value
}

func (v *NullablePendingDeployment) Set(val *PendingDeployment) {
	v.value = val
	v.isSet = true
}

func (v NullablePendingDeployment) IsSet() bool {
	return v.isSet
}

func (v *NullablePendingDeployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePendingDeployment(val *PendingDeployment) *NullablePendingDeployment {
	return &NullablePendingDeployment{value: val, isSet: true}
}

func (v NullablePendingDeployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePendingDeployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


