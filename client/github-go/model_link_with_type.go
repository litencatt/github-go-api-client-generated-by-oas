/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// LinkWithType Hypermedia Link with Type
type LinkWithType struct {
	Href string `json:"href"`
	Type string `json:"type"`
}

// NewLinkWithType instantiates a new LinkWithType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkWithType(href string, type_ string) *LinkWithType {
	this := LinkWithType{}
	this.Href = href
	this.Type = type_
	return &this
}

// NewLinkWithTypeWithDefaults instantiates a new LinkWithType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkWithTypeWithDefaults() *LinkWithType {
	this := LinkWithType{}
	return &this
}

// GetHref returns the Href field value
func (o *LinkWithType) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *LinkWithType) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *LinkWithType) SetHref(v string) {
	o.Href = v
}

// GetType returns the Type field value
func (o *LinkWithType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LinkWithType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LinkWithType) SetType(v string) {
	o.Type = v
}

func (o LinkWithType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["href"] = o.Href
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableLinkWithType struct {
	value *LinkWithType
	isSet bool
}

func (v NullableLinkWithType) Get() *LinkWithType {
	return v.value
}

func (v *NullableLinkWithType) Set(val *LinkWithType) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkWithType) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkWithType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkWithType(val *LinkWithType) *NullableLinkWithType {
	return &NullableLinkWithType{value: val, isSet: true}
}

func (v NullableLinkWithType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkWithType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


