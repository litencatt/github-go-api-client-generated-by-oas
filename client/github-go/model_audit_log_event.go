/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// AuditLogEvent struct for AuditLogEvent
type AuditLogEvent struct {
	// The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
	Timestamp *int32 `json:"@timestamp,omitempty"`
	// The name of the action that was performed, for example `user.login` or `repo.create`.
	Action *string `json:"action,omitempty"`
	Active *bool `json:"active,omitempty"`
	ActiveWas *bool `json:"active_was,omitempty"`
	// The actor who performed the action.
	Actor *string `json:"actor,omitempty"`
	// The id of the actor who performed the action.
	ActorId *int32 `json:"actor_id,omitempty"`
	ActorLocation *AuditLogEventActorLocation `json:"actor_location,omitempty"`
	Data map[string]interface{} `json:"data,omitempty"`
	OrgId *int32 `json:"org_id,omitempty"`
	// The username of the account being blocked.
	BlockedUser *string `json:"blocked_user,omitempty"`
	Business *string `json:"business,omitempty"`
	Config []map[string]interface{} `json:"config,omitempty"`
	ConfigWas []map[string]interface{} `json:"config_was,omitempty"`
	ContentType *string `json:"content_type,omitempty"`
	// The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
	CreatedAt *int32 `json:"created_at,omitempty"`
	DeployKeyFingerprint *string `json:"deploy_key_fingerprint,omitempty"`
	// A unique identifier for an audit event.
	DocumentId *string `json:"_document_id,omitempty"`
	Emoji *string `json:"emoji,omitempty"`
	Events []map[string]interface{} `json:"events,omitempty"`
	EventsWere []map[string]interface{} `json:"events_were,omitempty"`
	Explanation *string `json:"explanation,omitempty"`
	Fingerprint *string `json:"fingerprint,omitempty"`
	HookId *int32 `json:"hook_id,omitempty"`
	LimitedAvailability *bool `json:"limited_availability,omitempty"`
	Message *string `json:"message,omitempty"`
	Name *string `json:"name,omitempty"`
	OldUser *string `json:"old_user,omitempty"`
	OpensshPublicKey *string `json:"openssh_public_key,omitempty"`
	Org *string `json:"org,omitempty"`
	PreviousVisibility *string `json:"previous_visibility,omitempty"`
	ReadOnly *bool `json:"read_only,omitempty"`
	// The name of the repository.
	Repo *string `json:"repo,omitempty"`
	// The name of the repository.
	Repository *string `json:"repository,omitempty"`
	RepositoryPublic *bool `json:"repository_public,omitempty"`
	TargetLogin *string `json:"target_login,omitempty"`
	Team *string `json:"team,omitempty"`
	// The type of protocol (for example, HTTP or SSH) used to transfer Git data.
	TransportProtocol *int32 `json:"transport_protocol,omitempty"`
	// A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
	TransportProtocolName *string `json:"transport_protocol_name,omitempty"`
	// The user that was affected by the action performed (if available).
	User *string `json:"user,omitempty"`
	// The repository visibility, for example `public` or `private`.
	Visibility *string `json:"visibility,omitempty"`
}

// NewAuditLogEvent instantiates a new AuditLogEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogEvent() *AuditLogEvent {
	this := AuditLogEvent{}
	return &this
}

// NewAuditLogEventWithDefaults instantiates a new AuditLogEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogEventWithDefaults() *AuditLogEvent {
	this := AuditLogEvent{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *AuditLogEvent) GetTimestamp() int32 {
	if o == nil || o.Timestamp == nil {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetTimestampOk() (*int32, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *AuditLogEvent) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *AuditLogEvent) SetTimestamp(v int32) {
	o.Timestamp = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *AuditLogEvent) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *AuditLogEvent) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *AuditLogEvent) SetAction(v string) {
	o.Action = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *AuditLogEvent) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *AuditLogEvent) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *AuditLogEvent) SetActive(v bool) {
	o.Active = &v
}

// GetActiveWas returns the ActiveWas field value if set, zero value otherwise.
func (o *AuditLogEvent) GetActiveWas() bool {
	if o == nil || o.ActiveWas == nil {
		var ret bool
		return ret
	}
	return *o.ActiveWas
}

// GetActiveWasOk returns a tuple with the ActiveWas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetActiveWasOk() (*bool, bool) {
	if o == nil || o.ActiveWas == nil {
		return nil, false
	}
	return o.ActiveWas, true
}

// HasActiveWas returns a boolean if a field has been set.
func (o *AuditLogEvent) HasActiveWas() bool {
	if o != nil && o.ActiveWas != nil {
		return true
	}

	return false
}

// SetActiveWas gets a reference to the given bool and assigns it to the ActiveWas field.
func (o *AuditLogEvent) SetActiveWas(v bool) {
	o.ActiveWas = &v
}

// GetActor returns the Actor field value if set, zero value otherwise.
func (o *AuditLogEvent) GetActor() string {
	if o == nil || o.Actor == nil {
		var ret string
		return ret
	}
	return *o.Actor
}

// GetActorOk returns a tuple with the Actor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetActorOk() (*string, bool) {
	if o == nil || o.Actor == nil {
		return nil, false
	}
	return o.Actor, true
}

// HasActor returns a boolean if a field has been set.
func (o *AuditLogEvent) HasActor() bool {
	if o != nil && o.Actor != nil {
		return true
	}

	return false
}

// SetActor gets a reference to the given string and assigns it to the Actor field.
func (o *AuditLogEvent) SetActor(v string) {
	o.Actor = &v
}

// GetActorId returns the ActorId field value if set, zero value otherwise.
func (o *AuditLogEvent) GetActorId() int32 {
	if o == nil || o.ActorId == nil {
		var ret int32
		return ret
	}
	return *o.ActorId
}

// GetActorIdOk returns a tuple with the ActorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetActorIdOk() (*int32, bool) {
	if o == nil || o.ActorId == nil {
		return nil, false
	}
	return o.ActorId, true
}

// HasActorId returns a boolean if a field has been set.
func (o *AuditLogEvent) HasActorId() bool {
	if o != nil && o.ActorId != nil {
		return true
	}

	return false
}

// SetActorId gets a reference to the given int32 and assigns it to the ActorId field.
func (o *AuditLogEvent) SetActorId(v int32) {
	o.ActorId = &v
}

// GetActorLocation returns the ActorLocation field value if set, zero value otherwise.
func (o *AuditLogEvent) GetActorLocation() AuditLogEventActorLocation {
	if o == nil || o.ActorLocation == nil {
		var ret AuditLogEventActorLocation
		return ret
	}
	return *o.ActorLocation
}

// GetActorLocationOk returns a tuple with the ActorLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetActorLocationOk() (*AuditLogEventActorLocation, bool) {
	if o == nil || o.ActorLocation == nil {
		return nil, false
	}
	return o.ActorLocation, true
}

// HasActorLocation returns a boolean if a field has been set.
func (o *AuditLogEvent) HasActorLocation() bool {
	if o != nil && o.ActorLocation != nil {
		return true
	}

	return false
}

// SetActorLocation gets a reference to the given AuditLogEventActorLocation and assigns it to the ActorLocation field.
func (o *AuditLogEvent) SetActorLocation(v AuditLogEventActorLocation) {
	o.ActorLocation = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *AuditLogEvent) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *AuditLogEvent) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *AuditLogEvent) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *AuditLogEvent) GetOrgId() int32 {
	if o == nil || o.OrgId == nil {
		var ret int32
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetOrgIdOk() (*int32, bool) {
	if o == nil || o.OrgId == nil {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *AuditLogEvent) HasOrgId() bool {
	if o != nil && o.OrgId != nil {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given int32 and assigns it to the OrgId field.
func (o *AuditLogEvent) SetOrgId(v int32) {
	o.OrgId = &v
}

// GetBlockedUser returns the BlockedUser field value if set, zero value otherwise.
func (o *AuditLogEvent) GetBlockedUser() string {
	if o == nil || o.BlockedUser == nil {
		var ret string
		return ret
	}
	return *o.BlockedUser
}

// GetBlockedUserOk returns a tuple with the BlockedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetBlockedUserOk() (*string, bool) {
	if o == nil || o.BlockedUser == nil {
		return nil, false
	}
	return o.BlockedUser, true
}

// HasBlockedUser returns a boolean if a field has been set.
func (o *AuditLogEvent) HasBlockedUser() bool {
	if o != nil && o.BlockedUser != nil {
		return true
	}

	return false
}

// SetBlockedUser gets a reference to the given string and assigns it to the BlockedUser field.
func (o *AuditLogEvent) SetBlockedUser(v string) {
	o.BlockedUser = &v
}

// GetBusiness returns the Business field value if set, zero value otherwise.
func (o *AuditLogEvent) GetBusiness() string {
	if o == nil || o.Business == nil {
		var ret string
		return ret
	}
	return *o.Business
}

// GetBusinessOk returns a tuple with the Business field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetBusinessOk() (*string, bool) {
	if o == nil || o.Business == nil {
		return nil, false
	}
	return o.Business, true
}

// HasBusiness returns a boolean if a field has been set.
func (o *AuditLogEvent) HasBusiness() bool {
	if o != nil && o.Business != nil {
		return true
	}

	return false
}

// SetBusiness gets a reference to the given string and assigns it to the Business field.
func (o *AuditLogEvent) SetBusiness(v string) {
	o.Business = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *AuditLogEvent) GetConfig() []map[string]interface{} {
	if o == nil || o.Config == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetConfigOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *AuditLogEvent) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given []map[string]interface{} and assigns it to the Config field.
func (o *AuditLogEvent) SetConfig(v []map[string]interface{}) {
	o.Config = v
}

// GetConfigWas returns the ConfigWas field value if set, zero value otherwise.
func (o *AuditLogEvent) GetConfigWas() []map[string]interface{} {
	if o == nil || o.ConfigWas == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.ConfigWas
}

// GetConfigWasOk returns a tuple with the ConfigWas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetConfigWasOk() ([]map[string]interface{}, bool) {
	if o == nil || o.ConfigWas == nil {
		return nil, false
	}
	return o.ConfigWas, true
}

// HasConfigWas returns a boolean if a field has been set.
func (o *AuditLogEvent) HasConfigWas() bool {
	if o != nil && o.ConfigWas != nil {
		return true
	}

	return false
}

// SetConfigWas gets a reference to the given []map[string]interface{} and assigns it to the ConfigWas field.
func (o *AuditLogEvent) SetConfigWas(v []map[string]interface{}) {
	o.ConfigWas = v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *AuditLogEvent) GetContentType() string {
	if o == nil || o.ContentType == nil {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetContentTypeOk() (*string, bool) {
	if o == nil || o.ContentType == nil {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *AuditLogEvent) HasContentType() bool {
	if o != nil && o.ContentType != nil {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *AuditLogEvent) SetContentType(v string) {
	o.ContentType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AuditLogEvent) GetCreatedAt() int32 {
	if o == nil || o.CreatedAt == nil {
		var ret int32
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetCreatedAtOk() (*int32, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AuditLogEvent) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int32 and assigns it to the CreatedAt field.
func (o *AuditLogEvent) SetCreatedAt(v int32) {
	o.CreatedAt = &v
}

// GetDeployKeyFingerprint returns the DeployKeyFingerprint field value if set, zero value otherwise.
func (o *AuditLogEvent) GetDeployKeyFingerprint() string {
	if o == nil || o.DeployKeyFingerprint == nil {
		var ret string
		return ret
	}
	return *o.DeployKeyFingerprint
}

// GetDeployKeyFingerprintOk returns a tuple with the DeployKeyFingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetDeployKeyFingerprintOk() (*string, bool) {
	if o == nil || o.DeployKeyFingerprint == nil {
		return nil, false
	}
	return o.DeployKeyFingerprint, true
}

// HasDeployKeyFingerprint returns a boolean if a field has been set.
func (o *AuditLogEvent) HasDeployKeyFingerprint() bool {
	if o != nil && o.DeployKeyFingerprint != nil {
		return true
	}

	return false
}

// SetDeployKeyFingerprint gets a reference to the given string and assigns it to the DeployKeyFingerprint field.
func (o *AuditLogEvent) SetDeployKeyFingerprint(v string) {
	o.DeployKeyFingerprint = &v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *AuditLogEvent) GetDocumentId() string {
	if o == nil || o.DocumentId == nil {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetDocumentIdOk() (*string, bool) {
	if o == nil || o.DocumentId == nil {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *AuditLogEvent) HasDocumentId() bool {
	if o != nil && o.DocumentId != nil {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *AuditLogEvent) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetEmoji returns the Emoji field value if set, zero value otherwise.
func (o *AuditLogEvent) GetEmoji() string {
	if o == nil || o.Emoji == nil {
		var ret string
		return ret
	}
	return *o.Emoji
}

// GetEmojiOk returns a tuple with the Emoji field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetEmojiOk() (*string, bool) {
	if o == nil || o.Emoji == nil {
		return nil, false
	}
	return o.Emoji, true
}

// HasEmoji returns a boolean if a field has been set.
func (o *AuditLogEvent) HasEmoji() bool {
	if o != nil && o.Emoji != nil {
		return true
	}

	return false
}

// SetEmoji gets a reference to the given string and assigns it to the Emoji field.
func (o *AuditLogEvent) SetEmoji(v string) {
	o.Emoji = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *AuditLogEvent) GetEvents() []map[string]interface{} {
	if o == nil || o.Events == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetEventsOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *AuditLogEvent) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []map[string]interface{} and assigns it to the Events field.
func (o *AuditLogEvent) SetEvents(v []map[string]interface{}) {
	o.Events = v
}

// GetEventsWere returns the EventsWere field value if set, zero value otherwise.
func (o *AuditLogEvent) GetEventsWere() []map[string]interface{} {
	if o == nil || o.EventsWere == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.EventsWere
}

// GetEventsWereOk returns a tuple with the EventsWere field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetEventsWereOk() ([]map[string]interface{}, bool) {
	if o == nil || o.EventsWere == nil {
		return nil, false
	}
	return o.EventsWere, true
}

// HasEventsWere returns a boolean if a field has been set.
func (o *AuditLogEvent) HasEventsWere() bool {
	if o != nil && o.EventsWere != nil {
		return true
	}

	return false
}

// SetEventsWere gets a reference to the given []map[string]interface{} and assigns it to the EventsWere field.
func (o *AuditLogEvent) SetEventsWere(v []map[string]interface{}) {
	o.EventsWere = v
}

// GetExplanation returns the Explanation field value if set, zero value otherwise.
func (o *AuditLogEvent) GetExplanation() string {
	if o == nil || o.Explanation == nil {
		var ret string
		return ret
	}
	return *o.Explanation
}

// GetExplanationOk returns a tuple with the Explanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetExplanationOk() (*string, bool) {
	if o == nil || o.Explanation == nil {
		return nil, false
	}
	return o.Explanation, true
}

// HasExplanation returns a boolean if a field has been set.
func (o *AuditLogEvent) HasExplanation() bool {
	if o != nil && o.Explanation != nil {
		return true
	}

	return false
}

// SetExplanation gets a reference to the given string and assigns it to the Explanation field.
func (o *AuditLogEvent) SetExplanation(v string) {
	o.Explanation = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *AuditLogEvent) GetFingerprint() string {
	if o == nil || o.Fingerprint == nil {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetFingerprintOk() (*string, bool) {
	if o == nil || o.Fingerprint == nil {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *AuditLogEvent) HasFingerprint() bool {
	if o != nil && o.Fingerprint != nil {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *AuditLogEvent) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetHookId returns the HookId field value if set, zero value otherwise.
func (o *AuditLogEvent) GetHookId() int32 {
	if o == nil || o.HookId == nil {
		var ret int32
		return ret
	}
	return *o.HookId
}

// GetHookIdOk returns a tuple with the HookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetHookIdOk() (*int32, bool) {
	if o == nil || o.HookId == nil {
		return nil, false
	}
	return o.HookId, true
}

// HasHookId returns a boolean if a field has been set.
func (o *AuditLogEvent) HasHookId() bool {
	if o != nil && o.HookId != nil {
		return true
	}

	return false
}

// SetHookId gets a reference to the given int32 and assigns it to the HookId field.
func (o *AuditLogEvent) SetHookId(v int32) {
	o.HookId = &v
}

// GetLimitedAvailability returns the LimitedAvailability field value if set, zero value otherwise.
func (o *AuditLogEvent) GetLimitedAvailability() bool {
	if o == nil || o.LimitedAvailability == nil {
		var ret bool
		return ret
	}
	return *o.LimitedAvailability
}

// GetLimitedAvailabilityOk returns a tuple with the LimitedAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetLimitedAvailabilityOk() (*bool, bool) {
	if o == nil || o.LimitedAvailability == nil {
		return nil, false
	}
	return o.LimitedAvailability, true
}

// HasLimitedAvailability returns a boolean if a field has been set.
func (o *AuditLogEvent) HasLimitedAvailability() bool {
	if o != nil && o.LimitedAvailability != nil {
		return true
	}

	return false
}

// SetLimitedAvailability gets a reference to the given bool and assigns it to the LimitedAvailability field.
func (o *AuditLogEvent) SetLimitedAvailability(v bool) {
	o.LimitedAvailability = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *AuditLogEvent) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *AuditLogEvent) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *AuditLogEvent) SetMessage(v string) {
	o.Message = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuditLogEvent) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuditLogEvent) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuditLogEvent) SetName(v string) {
	o.Name = &v
}

// GetOldUser returns the OldUser field value if set, zero value otherwise.
func (o *AuditLogEvent) GetOldUser() string {
	if o == nil || o.OldUser == nil {
		var ret string
		return ret
	}
	return *o.OldUser
}

// GetOldUserOk returns a tuple with the OldUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetOldUserOk() (*string, bool) {
	if o == nil || o.OldUser == nil {
		return nil, false
	}
	return o.OldUser, true
}

// HasOldUser returns a boolean if a field has been set.
func (o *AuditLogEvent) HasOldUser() bool {
	if o != nil && o.OldUser != nil {
		return true
	}

	return false
}

// SetOldUser gets a reference to the given string and assigns it to the OldUser field.
func (o *AuditLogEvent) SetOldUser(v string) {
	o.OldUser = &v
}

// GetOpensshPublicKey returns the OpensshPublicKey field value if set, zero value otherwise.
func (o *AuditLogEvent) GetOpensshPublicKey() string {
	if o == nil || o.OpensshPublicKey == nil {
		var ret string
		return ret
	}
	return *o.OpensshPublicKey
}

// GetOpensshPublicKeyOk returns a tuple with the OpensshPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetOpensshPublicKeyOk() (*string, bool) {
	if o == nil || o.OpensshPublicKey == nil {
		return nil, false
	}
	return o.OpensshPublicKey, true
}

// HasOpensshPublicKey returns a boolean if a field has been set.
func (o *AuditLogEvent) HasOpensshPublicKey() bool {
	if o != nil && o.OpensshPublicKey != nil {
		return true
	}

	return false
}

// SetOpensshPublicKey gets a reference to the given string and assigns it to the OpensshPublicKey field.
func (o *AuditLogEvent) SetOpensshPublicKey(v string) {
	o.OpensshPublicKey = &v
}

// GetOrg returns the Org field value if set, zero value otherwise.
func (o *AuditLogEvent) GetOrg() string {
	if o == nil || o.Org == nil {
		var ret string
		return ret
	}
	return *o.Org
}

// GetOrgOk returns a tuple with the Org field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetOrgOk() (*string, bool) {
	if o == nil || o.Org == nil {
		return nil, false
	}
	return o.Org, true
}

// HasOrg returns a boolean if a field has been set.
func (o *AuditLogEvent) HasOrg() bool {
	if o != nil && o.Org != nil {
		return true
	}

	return false
}

// SetOrg gets a reference to the given string and assigns it to the Org field.
func (o *AuditLogEvent) SetOrg(v string) {
	o.Org = &v
}

// GetPreviousVisibility returns the PreviousVisibility field value if set, zero value otherwise.
func (o *AuditLogEvent) GetPreviousVisibility() string {
	if o == nil || o.PreviousVisibility == nil {
		var ret string
		return ret
	}
	return *o.PreviousVisibility
}

// GetPreviousVisibilityOk returns a tuple with the PreviousVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetPreviousVisibilityOk() (*string, bool) {
	if o == nil || o.PreviousVisibility == nil {
		return nil, false
	}
	return o.PreviousVisibility, true
}

// HasPreviousVisibility returns a boolean if a field has been set.
func (o *AuditLogEvent) HasPreviousVisibility() bool {
	if o != nil && o.PreviousVisibility != nil {
		return true
	}

	return false
}

// SetPreviousVisibility gets a reference to the given string and assigns it to the PreviousVisibility field.
func (o *AuditLogEvent) SetPreviousVisibility(v string) {
	o.PreviousVisibility = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *AuditLogEvent) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *AuditLogEvent) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *AuditLogEvent) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetRepo returns the Repo field value if set, zero value otherwise.
func (o *AuditLogEvent) GetRepo() string {
	if o == nil || o.Repo == nil {
		var ret string
		return ret
	}
	return *o.Repo
}

// GetRepoOk returns a tuple with the Repo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetRepoOk() (*string, bool) {
	if o == nil || o.Repo == nil {
		return nil, false
	}
	return o.Repo, true
}

// HasRepo returns a boolean if a field has been set.
func (o *AuditLogEvent) HasRepo() bool {
	if o != nil && o.Repo != nil {
		return true
	}

	return false
}

// SetRepo gets a reference to the given string and assigns it to the Repo field.
func (o *AuditLogEvent) SetRepo(v string) {
	o.Repo = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *AuditLogEvent) GetRepository() string {
	if o == nil || o.Repository == nil {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetRepositoryOk() (*string, bool) {
	if o == nil || o.Repository == nil {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *AuditLogEvent) HasRepository() bool {
	if o != nil && o.Repository != nil {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *AuditLogEvent) SetRepository(v string) {
	o.Repository = &v
}

// GetRepositoryPublic returns the RepositoryPublic field value if set, zero value otherwise.
func (o *AuditLogEvent) GetRepositoryPublic() bool {
	if o == nil || o.RepositoryPublic == nil {
		var ret bool
		return ret
	}
	return *o.RepositoryPublic
}

// GetRepositoryPublicOk returns a tuple with the RepositoryPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetRepositoryPublicOk() (*bool, bool) {
	if o == nil || o.RepositoryPublic == nil {
		return nil, false
	}
	return o.RepositoryPublic, true
}

// HasRepositoryPublic returns a boolean if a field has been set.
func (o *AuditLogEvent) HasRepositoryPublic() bool {
	if o != nil && o.RepositoryPublic != nil {
		return true
	}

	return false
}

// SetRepositoryPublic gets a reference to the given bool and assigns it to the RepositoryPublic field.
func (o *AuditLogEvent) SetRepositoryPublic(v bool) {
	o.RepositoryPublic = &v
}

// GetTargetLogin returns the TargetLogin field value if set, zero value otherwise.
func (o *AuditLogEvent) GetTargetLogin() string {
	if o == nil || o.TargetLogin == nil {
		var ret string
		return ret
	}
	return *o.TargetLogin
}

// GetTargetLoginOk returns a tuple with the TargetLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetTargetLoginOk() (*string, bool) {
	if o == nil || o.TargetLogin == nil {
		return nil, false
	}
	return o.TargetLogin, true
}

// HasTargetLogin returns a boolean if a field has been set.
func (o *AuditLogEvent) HasTargetLogin() bool {
	if o != nil && o.TargetLogin != nil {
		return true
	}

	return false
}

// SetTargetLogin gets a reference to the given string and assigns it to the TargetLogin field.
func (o *AuditLogEvent) SetTargetLogin(v string) {
	o.TargetLogin = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *AuditLogEvent) GetTeam() string {
	if o == nil || o.Team == nil {
		var ret string
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetTeamOk() (*string, bool) {
	if o == nil || o.Team == nil {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *AuditLogEvent) HasTeam() bool {
	if o != nil && o.Team != nil {
		return true
	}

	return false
}

// SetTeam gets a reference to the given string and assigns it to the Team field.
func (o *AuditLogEvent) SetTeam(v string) {
	o.Team = &v
}

// GetTransportProtocol returns the TransportProtocol field value if set, zero value otherwise.
func (o *AuditLogEvent) GetTransportProtocol() int32 {
	if o == nil || o.TransportProtocol == nil {
		var ret int32
		return ret
	}
	return *o.TransportProtocol
}

// GetTransportProtocolOk returns a tuple with the TransportProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetTransportProtocolOk() (*int32, bool) {
	if o == nil || o.TransportProtocol == nil {
		return nil, false
	}
	return o.TransportProtocol, true
}

// HasTransportProtocol returns a boolean if a field has been set.
func (o *AuditLogEvent) HasTransportProtocol() bool {
	if o != nil && o.TransportProtocol != nil {
		return true
	}

	return false
}

// SetTransportProtocol gets a reference to the given int32 and assigns it to the TransportProtocol field.
func (o *AuditLogEvent) SetTransportProtocol(v int32) {
	o.TransportProtocol = &v
}

// GetTransportProtocolName returns the TransportProtocolName field value if set, zero value otherwise.
func (o *AuditLogEvent) GetTransportProtocolName() string {
	if o == nil || o.TransportProtocolName == nil {
		var ret string
		return ret
	}
	return *o.TransportProtocolName
}

// GetTransportProtocolNameOk returns a tuple with the TransportProtocolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetTransportProtocolNameOk() (*string, bool) {
	if o == nil || o.TransportProtocolName == nil {
		return nil, false
	}
	return o.TransportProtocolName, true
}

// HasTransportProtocolName returns a boolean if a field has been set.
func (o *AuditLogEvent) HasTransportProtocolName() bool {
	if o != nil && o.TransportProtocolName != nil {
		return true
	}

	return false
}

// SetTransportProtocolName gets a reference to the given string and assigns it to the TransportProtocolName field.
func (o *AuditLogEvent) SetTransportProtocolName(v string) {
	o.TransportProtocolName = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AuditLogEvent) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AuditLogEvent) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *AuditLogEvent) SetUser(v string) {
	o.User = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *AuditLogEvent) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogEvent) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *AuditLogEvent) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *AuditLogEvent) SetVisibility(v string) {
	o.Visibility = &v
}

func (o AuditLogEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timestamp != nil {
		toSerialize["@timestamp"] = o.Timestamp
	}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.ActiveWas != nil {
		toSerialize["active_was"] = o.ActiveWas
	}
	if o.Actor != nil {
		toSerialize["actor"] = o.Actor
	}
	if o.ActorId != nil {
		toSerialize["actor_id"] = o.ActorId
	}
	if o.ActorLocation != nil {
		toSerialize["actor_location"] = o.ActorLocation
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.OrgId != nil {
		toSerialize["org_id"] = o.OrgId
	}
	if o.BlockedUser != nil {
		toSerialize["blocked_user"] = o.BlockedUser
	}
	if o.Business != nil {
		toSerialize["business"] = o.Business
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.ConfigWas != nil {
		toSerialize["config_was"] = o.ConfigWas
	}
	if o.ContentType != nil {
		toSerialize["content_type"] = o.ContentType
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.DeployKeyFingerprint != nil {
		toSerialize["deploy_key_fingerprint"] = o.DeployKeyFingerprint
	}
	if o.DocumentId != nil {
		toSerialize["_document_id"] = o.DocumentId
	}
	if o.Emoji != nil {
		toSerialize["emoji"] = o.Emoji
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.EventsWere != nil {
		toSerialize["events_were"] = o.EventsWere
	}
	if o.Explanation != nil {
		toSerialize["explanation"] = o.Explanation
	}
	if o.Fingerprint != nil {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if o.HookId != nil {
		toSerialize["hook_id"] = o.HookId
	}
	if o.LimitedAvailability != nil {
		toSerialize["limited_availability"] = o.LimitedAvailability
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.OldUser != nil {
		toSerialize["old_user"] = o.OldUser
	}
	if o.OpensshPublicKey != nil {
		toSerialize["openssh_public_key"] = o.OpensshPublicKey
	}
	if o.Org != nil {
		toSerialize["org"] = o.Org
	}
	if o.PreviousVisibility != nil {
		toSerialize["previous_visibility"] = o.PreviousVisibility
	}
	if o.ReadOnly != nil {
		toSerialize["read_only"] = o.ReadOnly
	}
	if o.Repo != nil {
		toSerialize["repo"] = o.Repo
	}
	if o.Repository != nil {
		toSerialize["repository"] = o.Repository
	}
	if o.RepositoryPublic != nil {
		toSerialize["repository_public"] = o.RepositoryPublic
	}
	if o.TargetLogin != nil {
		toSerialize["target_login"] = o.TargetLogin
	}
	if o.Team != nil {
		toSerialize["team"] = o.Team
	}
	if o.TransportProtocol != nil {
		toSerialize["transport_protocol"] = o.TransportProtocol
	}
	if o.TransportProtocolName != nil {
		toSerialize["transport_protocol_name"] = o.TransportProtocolName
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	return json.Marshal(toSerialize)
}

type NullableAuditLogEvent struct {
	value *AuditLogEvent
	isSet bool
}

func (v NullableAuditLogEvent) Get() *AuditLogEvent {
	return v.value
}

func (v *NullableAuditLogEvent) Set(val *AuditLogEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogEvent(val *AuditLogEvent) *NullableAuditLogEvent {
	return &NullableAuditLogEvent{value: val, isSet: true}
}

func (v NullableAuditLogEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


