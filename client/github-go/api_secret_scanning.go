/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SecretScanningApiService SecretScanningApi service
type SecretScanningApiService service

type ApiSecretScanningGetAlertRequest struct {
	ctx context.Context
	ApiService *SecretScanningApiService
	owner string
	repo string
	alertNumber int32
}

func (r ApiSecretScanningGetAlertRequest) Execute() (*SecretScanningAlert, *http.Response, error) {
	return r.ApiService.SecretScanningGetAlertExecute(r)
}

/*
SecretScanningGetAlert Get a secret scanning alert

Gets a single secret scanning alert detected in an eligible repository.
To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
For public repositories, you may instead use the `public_repo` scope.

GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param owner The account owner of the repository. The name is not case sensitive.
 @param repo The name of the repository. The name is not case sensitive.
 @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
 @return ApiSecretScanningGetAlertRequest
*/
func (a *SecretScanningApiService) SecretScanningGetAlert(ctx context.Context, owner string, repo string, alertNumber int32) ApiSecretScanningGetAlertRequest {
	return ApiSecretScanningGetAlertRequest{
		ApiService: a,
		ctx: ctx,
		owner: owner,
		repo: repo,
		alertNumber: alertNumber,
	}
}

// Execute executes the request
//  @return SecretScanningAlert
func (a *SecretScanningApiService) SecretScanningGetAlertExecute(r ApiSecretScanningGetAlertRequest) (*SecretScanningAlert, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretScanningAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecretScanningApiService.SecretScanningGetAlert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
	localVarPath = strings.Replace(localVarPath, "{"+"owner"+"}", url.PathEscape(parameterToString(r.owner, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", url.PathEscape(parameterToString(r.repo, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alert_number"+"}", url.PathEscape(parameterToString(r.alertNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v CodeScanningListAlertsForEnterprise503Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecretScanningListAlertsForEnterpriseRequest struct {
	ctx context.Context
	ApiService *SecretScanningApiService
	enterprise string
	state *string
	secretType *string
	resolution *string
	sort *string
	direction *string
	perPage *int32
	before *string
	after *string
}

// Set to &#x60;open&#x60; or &#x60;resolved&#x60; to only list secret scanning alerts in a specific state.
func (r ApiSecretScanningListAlertsForEnterpriseRequest) State(state string) ApiSecretScanningListAlertsForEnterpriseRequest {
	r.state = &state
	return r
}

// A comma-separated list of secret types to return. By default all secret types are returned. See \&quot;[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\&quot; for a complete list of secret types.
func (r ApiSecretScanningListAlertsForEnterpriseRequest) SecretType(secretType string) ApiSecretScanningListAlertsForEnterpriseRequest {
	r.secretType = &secretType
	return r
}

// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are &#x60;false_positive&#x60;, &#x60;wont_fix&#x60;, &#x60;revoked&#x60;, &#x60;pattern_edited&#x60;, &#x60;pattern_deleted&#x60; or &#x60;used_in_tests&#x60;.
func (r ApiSecretScanningListAlertsForEnterpriseRequest) Resolution(resolution string) ApiSecretScanningListAlertsForEnterpriseRequest {
	r.resolution = &resolution
	return r
}

// The property to sort the results by. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert was updated or resolved.
func (r ApiSecretScanningListAlertsForEnterpriseRequest) Sort(sort string) ApiSecretScanningListAlertsForEnterpriseRequest {
	r.sort = &sort
	return r
}

// The direction to sort the results by.
func (r ApiSecretScanningListAlertsForEnterpriseRequest) Direction(direction string) ApiSecretScanningListAlertsForEnterpriseRequest {
	r.direction = &direction
	return r
}

// The number of results per page (max 100).
func (r ApiSecretScanningListAlertsForEnterpriseRequest) PerPage(perPage int32) ApiSecretScanningListAlertsForEnterpriseRequest {
	r.perPage = &perPage
	return r
}

// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor.
func (r ApiSecretScanningListAlertsForEnterpriseRequest) Before(before string) ApiSecretScanningListAlertsForEnterpriseRequest {
	r.before = &before
	return r
}

// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.
func (r ApiSecretScanningListAlertsForEnterpriseRequest) After(after string) ApiSecretScanningListAlertsForEnterpriseRequest {
	r.after = &after
	return r
}

func (r ApiSecretScanningListAlertsForEnterpriseRequest) Execute() ([]OrganizationSecretScanningAlert, *http.Response, error) {
	return r.ApiService.SecretScanningListAlertsForEnterpriseExecute(r)
}

/*
SecretScanningListAlertsForEnterprise List secret scanning alerts for an enterprise

Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
To use this endpoint, you must be a member of the enterprise, and you must use an access token with the `repo` scope or `security_events` scope. Alerts are only returned for organizations in the enterprise for which you are an organization owner or a [security manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param enterprise The slug version of the enterprise name. You can also substitute this value with the enterprise id.
 @return ApiSecretScanningListAlertsForEnterpriseRequest
*/
func (a *SecretScanningApiService) SecretScanningListAlertsForEnterprise(ctx context.Context, enterprise string) ApiSecretScanningListAlertsForEnterpriseRequest {
	return ApiSecretScanningListAlertsForEnterpriseRequest{
		ApiService: a,
		ctx: ctx,
		enterprise: enterprise,
	}
}

// Execute executes the request
//  @return []OrganizationSecretScanningAlert
func (a *SecretScanningApiService) SecretScanningListAlertsForEnterpriseExecute(r ApiSecretScanningListAlertsForEnterpriseRequest) ([]OrganizationSecretScanningAlert, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OrganizationSecretScanningAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecretScanningApiService.SecretScanningListAlertsForEnterprise")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enterprises/{enterprise}/secret-scanning/alerts"
	localVarPath = strings.Replace(localVarPath, "{"+"enterprise"+"}", url.PathEscape(parameterToString(r.enterprise, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.state != nil {
		localVarQueryParams.Add("state", parameterToString(*r.state, ""))
	}
	if r.secretType != nil {
		localVarQueryParams.Add("secret_type", parameterToString(*r.secretType, ""))
	}
	if r.resolution != nil {
		localVarQueryParams.Add("resolution", parameterToString(*r.resolution, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.direction != nil {
		localVarQueryParams.Add("direction", parameterToString(*r.direction, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.before != nil {
		localVarQueryParams.Add("before", parameterToString(*r.before, ""))
	}
	if r.after != nil {
		localVarQueryParams.Add("after", parameterToString(*r.after, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v CodeScanningListAlertsForEnterprise503Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecretScanningListAlertsForOrgRequest struct {
	ctx context.Context
	ApiService *SecretScanningApiService
	org string
	state *string
	secretType *string
	resolution *string
	sort *string
	direction *string
	page *int32
	perPage *int32
	before *string
	after *string
}

// Set to &#x60;open&#x60; or &#x60;resolved&#x60; to only list secret scanning alerts in a specific state.
func (r ApiSecretScanningListAlertsForOrgRequest) State(state string) ApiSecretScanningListAlertsForOrgRequest {
	r.state = &state
	return r
}

// A comma-separated list of secret types to return. By default all secret types are returned. See \&quot;[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\&quot; for a complete list of secret types.
func (r ApiSecretScanningListAlertsForOrgRequest) SecretType(secretType string) ApiSecretScanningListAlertsForOrgRequest {
	r.secretType = &secretType
	return r
}

// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are &#x60;false_positive&#x60;, &#x60;wont_fix&#x60;, &#x60;revoked&#x60;, &#x60;pattern_edited&#x60;, &#x60;pattern_deleted&#x60; or &#x60;used_in_tests&#x60;.
func (r ApiSecretScanningListAlertsForOrgRequest) Resolution(resolution string) ApiSecretScanningListAlertsForOrgRequest {
	r.resolution = &resolution
	return r
}

// The property to sort the results by. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert was updated or resolved.
func (r ApiSecretScanningListAlertsForOrgRequest) Sort(sort string) ApiSecretScanningListAlertsForOrgRequest {
	r.sort = &sort
	return r
}

// The direction to sort the results by.
func (r ApiSecretScanningListAlertsForOrgRequest) Direction(direction string) ApiSecretScanningListAlertsForOrgRequest {
	r.direction = &direction
	return r
}

// Page number of the results to fetch.
func (r ApiSecretScanningListAlertsForOrgRequest) Page(page int32) ApiSecretScanningListAlertsForOrgRequest {
	r.page = &page
	return r
}

// The number of results per page (max 100).
func (r ApiSecretScanningListAlertsForOrgRequest) PerPage(perPage int32) ApiSecretScanningListAlertsForOrgRequest {
	r.perPage = &perPage
	return r
}

// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \&quot;before\&quot; query string.
func (r ApiSecretScanningListAlertsForOrgRequest) Before(before string) ApiSecretScanningListAlertsForOrgRequest {
	r.before = &before
	return r
}

// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \&quot;after\&quot; query string.
func (r ApiSecretScanningListAlertsForOrgRequest) After(after string) ApiSecretScanningListAlertsForOrgRequest {
	r.after = &after
	return r
}

func (r ApiSecretScanningListAlertsForOrgRequest) Execute() ([]OrganizationSecretScanningAlert, *http.Response, error) {
	return r.ApiService.SecretScanningListAlertsForOrgExecute(r)
}

/*
SecretScanningListAlertsForOrg List secret scanning alerts for an organization

Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
To use this endpoint, you must be an administrator or security manager for the organization, and you must use an access token with the `repo` scope or `security_events` scope.
For public repositories, you may instead use the `public_repo` scope.

GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param org The organization name. The name is not case sensitive.
 @return ApiSecretScanningListAlertsForOrgRequest
*/
func (a *SecretScanningApiService) SecretScanningListAlertsForOrg(ctx context.Context, org string) ApiSecretScanningListAlertsForOrgRequest {
	return ApiSecretScanningListAlertsForOrgRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
	}
}

// Execute executes the request
//  @return []OrganizationSecretScanningAlert
func (a *SecretScanningApiService) SecretScanningListAlertsForOrgExecute(r ApiSecretScanningListAlertsForOrgRequest) ([]OrganizationSecretScanningAlert, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OrganizationSecretScanningAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecretScanningApiService.SecretScanningListAlertsForOrg")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/orgs/{org}/secret-scanning/alerts"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", url.PathEscape(parameterToString(r.org, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.state != nil {
		localVarQueryParams.Add("state", parameterToString(*r.state, ""))
	}
	if r.secretType != nil {
		localVarQueryParams.Add("secret_type", parameterToString(*r.secretType, ""))
	}
	if r.resolution != nil {
		localVarQueryParams.Add("resolution", parameterToString(*r.resolution, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.direction != nil {
		localVarQueryParams.Add("direction", parameterToString(*r.direction, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.before != nil {
		localVarQueryParams.Add("before", parameterToString(*r.before, ""))
	}
	if r.after != nil {
		localVarQueryParams.Add("after", parameterToString(*r.after, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v BasicError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v CodeScanningListAlertsForEnterprise503Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecretScanningListAlertsForRepoRequest struct {
	ctx context.Context
	ApiService *SecretScanningApiService
	owner string
	repo string
	state *string
	secretType *string
	resolution *string
	sort *string
	direction *string
	page *int32
	perPage *int32
	before *string
	after *string
}

// Set to &#x60;open&#x60; or &#x60;resolved&#x60; to only list secret scanning alerts in a specific state.
func (r ApiSecretScanningListAlertsForRepoRequest) State(state string) ApiSecretScanningListAlertsForRepoRequest {
	r.state = &state
	return r
}

// A comma-separated list of secret types to return. By default all secret types are returned. See \&quot;[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\&quot; for a complete list of secret types.
func (r ApiSecretScanningListAlertsForRepoRequest) SecretType(secretType string) ApiSecretScanningListAlertsForRepoRequest {
	r.secretType = &secretType
	return r
}

// A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are &#x60;false_positive&#x60;, &#x60;wont_fix&#x60;, &#x60;revoked&#x60;, &#x60;pattern_edited&#x60;, &#x60;pattern_deleted&#x60; or &#x60;used_in_tests&#x60;.
func (r ApiSecretScanningListAlertsForRepoRequest) Resolution(resolution string) ApiSecretScanningListAlertsForRepoRequest {
	r.resolution = &resolution
	return r
}

// The property to sort the results by. &#x60;created&#x60; means when the alert was created. &#x60;updated&#x60; means when the alert was updated or resolved.
func (r ApiSecretScanningListAlertsForRepoRequest) Sort(sort string) ApiSecretScanningListAlertsForRepoRequest {
	r.sort = &sort
	return r
}

// The direction to sort the results by.
func (r ApiSecretScanningListAlertsForRepoRequest) Direction(direction string) ApiSecretScanningListAlertsForRepoRequest {
	r.direction = &direction
	return r
}

// Page number of the results to fetch.
func (r ApiSecretScanningListAlertsForRepoRequest) Page(page int32) ApiSecretScanningListAlertsForRepoRequest {
	r.page = &page
	return r
}

// The number of results per page (max 100).
func (r ApiSecretScanningListAlertsForRepoRequest) PerPage(perPage int32) ApiSecretScanningListAlertsForRepoRequest {
	r.perPage = &perPage
	return r
}

// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \&quot;before\&quot; query string.
func (r ApiSecretScanningListAlertsForRepoRequest) Before(before string) ApiSecretScanningListAlertsForRepoRequest {
	r.before = &before
	return r
}

// A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \&quot;after\&quot; query string.
func (r ApiSecretScanningListAlertsForRepoRequest) After(after string) ApiSecretScanningListAlertsForRepoRequest {
	r.after = &after
	return r
}

func (r ApiSecretScanningListAlertsForRepoRequest) Execute() ([]SecretScanningAlert, *http.Response, error) {
	return r.ApiService.SecretScanningListAlertsForRepoExecute(r)
}

/*
SecretScanningListAlertsForRepo List secret scanning alerts for a repository

Lists secret scanning alerts for an eligible repository, from newest to oldest.
To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
For public repositories, you may instead use the `public_repo` scope.

GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param owner The account owner of the repository. The name is not case sensitive.
 @param repo The name of the repository. The name is not case sensitive.
 @return ApiSecretScanningListAlertsForRepoRequest
*/
func (a *SecretScanningApiService) SecretScanningListAlertsForRepo(ctx context.Context, owner string, repo string) ApiSecretScanningListAlertsForRepoRequest {
	return ApiSecretScanningListAlertsForRepoRequest{
		ApiService: a,
		ctx: ctx,
		owner: owner,
		repo: repo,
	}
}

// Execute executes the request
//  @return []SecretScanningAlert
func (a *SecretScanningApiService) SecretScanningListAlertsForRepoExecute(r ApiSecretScanningListAlertsForRepoRequest) ([]SecretScanningAlert, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SecretScanningAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecretScanningApiService.SecretScanningListAlertsForRepo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repos/{owner}/{repo}/secret-scanning/alerts"
	localVarPath = strings.Replace(localVarPath, "{"+"owner"+"}", url.PathEscape(parameterToString(r.owner, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", url.PathEscape(parameterToString(r.repo, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.state != nil {
		localVarQueryParams.Add("state", parameterToString(*r.state, ""))
	}
	if r.secretType != nil {
		localVarQueryParams.Add("secret_type", parameterToString(*r.secretType, ""))
	}
	if r.resolution != nil {
		localVarQueryParams.Add("resolution", parameterToString(*r.resolution, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.direction != nil {
		localVarQueryParams.Add("direction", parameterToString(*r.direction, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	if r.before != nil {
		localVarQueryParams.Add("before", parameterToString(*r.before, ""))
	}
	if r.after != nil {
		localVarQueryParams.Add("after", parameterToString(*r.after, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v CodeScanningListAlertsForEnterprise503Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecretScanningListLocationsForAlertRequest struct {
	ctx context.Context
	ApiService *SecretScanningApiService
	owner string
	repo string
	alertNumber int32
	page *int32
	perPage *int32
}

// Page number of the results to fetch.
func (r ApiSecretScanningListLocationsForAlertRequest) Page(page int32) ApiSecretScanningListLocationsForAlertRequest {
	r.page = &page
	return r
}

// The number of results per page (max 100).
func (r ApiSecretScanningListLocationsForAlertRequest) PerPage(perPage int32) ApiSecretScanningListLocationsForAlertRequest {
	r.perPage = &perPage
	return r
}

func (r ApiSecretScanningListLocationsForAlertRequest) Execute() ([]SecretScanningLocation, *http.Response, error) {
	return r.ApiService.SecretScanningListLocationsForAlertExecute(r)
}

/*
SecretScanningListLocationsForAlert List locations for a secret scanning alert

Lists all locations for a given secret scanning alert for an eligible repository.
To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
For public repositories, you may instead use the `public_repo` scope.

GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param owner The account owner of the repository. The name is not case sensitive.
 @param repo The name of the repository. The name is not case sensitive.
 @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
 @return ApiSecretScanningListLocationsForAlertRequest
*/
func (a *SecretScanningApiService) SecretScanningListLocationsForAlert(ctx context.Context, owner string, repo string, alertNumber int32) ApiSecretScanningListLocationsForAlertRequest {
	return ApiSecretScanningListLocationsForAlertRequest{
		ApiService: a,
		ctx: ctx,
		owner: owner,
		repo: repo,
		alertNumber: alertNumber,
	}
}

// Execute executes the request
//  @return []SecretScanningLocation
func (a *SecretScanningApiService) SecretScanningListLocationsForAlertExecute(r ApiSecretScanningListLocationsForAlertRequest) ([]SecretScanningLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SecretScanningLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecretScanningApiService.SecretScanningListLocationsForAlert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"
	localVarPath = strings.Replace(localVarPath, "{"+"owner"+"}", url.PathEscape(parameterToString(r.owner, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", url.PathEscape(parameterToString(r.repo, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alert_number"+"}", url.PathEscape(parameterToString(r.alertNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.perPage != nil {
		localVarQueryParams.Add("per_page", parameterToString(*r.perPage, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v CodeScanningListAlertsForEnterprise503Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecretScanningUpdateAlertRequest struct {
	ctx context.Context
	ApiService *SecretScanningApiService
	owner string
	repo string
	alertNumber int32
	secretScanningUpdateAlertRequest *SecretScanningUpdateAlertRequest
}

func (r ApiSecretScanningUpdateAlertRequest) SecretScanningUpdateAlertRequest(secretScanningUpdateAlertRequest SecretScanningUpdateAlertRequest) ApiSecretScanningUpdateAlertRequest {
	r.secretScanningUpdateAlertRequest = &secretScanningUpdateAlertRequest
	return r
}

func (r ApiSecretScanningUpdateAlertRequest) Execute() (*SecretScanningAlert, *http.Response, error) {
	return r.ApiService.SecretScanningUpdateAlertExecute(r)
}

/*
SecretScanningUpdateAlert Update a secret scanning alert

Updates the status of a secret scanning alert in an eligible repository.
To use this endpoint, you must be an administrator for the repository or for the organization that owns the repository, and you must use a personal access token with the `repo` scope or `security_events` scope.
For public repositories, you may instead use the `public_repo` scope.

GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param owner The account owner of the repository. The name is not case sensitive.
 @param repo The name of the repository. The name is not case sensitive.
 @param alertNumber The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.
 @return ApiSecretScanningUpdateAlertRequest
*/
func (a *SecretScanningApiService) SecretScanningUpdateAlert(ctx context.Context, owner string, repo string, alertNumber int32) ApiSecretScanningUpdateAlertRequest {
	return ApiSecretScanningUpdateAlertRequest{
		ApiService: a,
		ctx: ctx,
		owner: owner,
		repo: repo,
		alertNumber: alertNumber,
	}
}

// Execute executes the request
//  @return SecretScanningAlert
func (a *SecretScanningApiService) SecretScanningUpdateAlertExecute(r ApiSecretScanningUpdateAlertRequest) (*SecretScanningAlert, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretScanningAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecretScanningApiService.SecretScanningUpdateAlert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"
	localVarPath = strings.Replace(localVarPath, "{"+"owner"+"}", url.PathEscape(parameterToString(r.owner, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", url.PathEscape(parameterToString(r.repo, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"alert_number"+"}", url.PathEscape(parameterToString(r.alertNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretScanningUpdateAlertRequest == nil {
		return localVarReturnValue, nil, reportError("secretScanningUpdateAlertRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretScanningUpdateAlertRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v CodeScanningListAlertsForEnterprise503Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
