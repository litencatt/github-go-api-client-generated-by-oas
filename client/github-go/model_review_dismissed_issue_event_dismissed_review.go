/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReviewDismissedIssueEventDismissedReview struct for ReviewDismissedIssueEventDismissedReview
type ReviewDismissedIssueEventDismissedReview struct {
	State string `json:"state"`
	ReviewId int32 `json:"review_id"`
	DismissalMessage NullableString `json:"dismissal_message"`
	DismissalCommitId *string `json:"dismissal_commit_id,omitempty"`
}

// NewReviewDismissedIssueEventDismissedReview instantiates a new ReviewDismissedIssueEventDismissedReview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewDismissedIssueEventDismissedReview(state string, reviewId int32, dismissalMessage NullableString) *ReviewDismissedIssueEventDismissedReview {
	this := ReviewDismissedIssueEventDismissedReview{}
	this.State = state
	this.ReviewId = reviewId
	this.DismissalMessage = dismissalMessage
	return &this
}

// NewReviewDismissedIssueEventDismissedReviewWithDefaults instantiates a new ReviewDismissedIssueEventDismissedReview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewDismissedIssueEventDismissedReviewWithDefaults() *ReviewDismissedIssueEventDismissedReview {
	this := ReviewDismissedIssueEventDismissedReview{}
	return &this
}

// GetState returns the State field value
func (o *ReviewDismissedIssueEventDismissedReview) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ReviewDismissedIssueEventDismissedReview) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ReviewDismissedIssueEventDismissedReview) SetState(v string) {
	o.State = v
}

// GetReviewId returns the ReviewId field value
func (o *ReviewDismissedIssueEventDismissedReview) GetReviewId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReviewId
}

// GetReviewIdOk returns a tuple with the ReviewId field value
// and a boolean to check if the value has been set.
func (o *ReviewDismissedIssueEventDismissedReview) GetReviewIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReviewId, true
}

// SetReviewId sets field value
func (o *ReviewDismissedIssueEventDismissedReview) SetReviewId(v int32) {
	o.ReviewId = v
}

// GetDismissalMessage returns the DismissalMessage field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ReviewDismissedIssueEventDismissedReview) GetDismissalMessage() string {
	if o == nil || o.DismissalMessage.Get() == nil {
		var ret string
		return ret
	}

	return *o.DismissalMessage.Get()
}

// GetDismissalMessageOk returns a tuple with the DismissalMessage field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReviewDismissedIssueEventDismissedReview) GetDismissalMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DismissalMessage.Get(), o.DismissalMessage.IsSet()
}

// SetDismissalMessage sets field value
func (o *ReviewDismissedIssueEventDismissedReview) SetDismissalMessage(v string) {
	o.DismissalMessage.Set(&v)
}

// GetDismissalCommitId returns the DismissalCommitId field value if set, zero value otherwise.
func (o *ReviewDismissedIssueEventDismissedReview) GetDismissalCommitId() string {
	if o == nil || o.DismissalCommitId == nil {
		var ret string
		return ret
	}
	return *o.DismissalCommitId
}

// GetDismissalCommitIdOk returns a tuple with the DismissalCommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewDismissedIssueEventDismissedReview) GetDismissalCommitIdOk() (*string, bool) {
	if o == nil || o.DismissalCommitId == nil {
		return nil, false
	}
	return o.DismissalCommitId, true
}

// HasDismissalCommitId returns a boolean if a field has been set.
func (o *ReviewDismissedIssueEventDismissedReview) HasDismissalCommitId() bool {
	if o != nil && o.DismissalCommitId != nil {
		return true
	}

	return false
}

// SetDismissalCommitId gets a reference to the given string and assigns it to the DismissalCommitId field.
func (o *ReviewDismissedIssueEventDismissedReview) SetDismissalCommitId(v string) {
	o.DismissalCommitId = &v
}

func (o ReviewDismissedIssueEventDismissedReview) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["review_id"] = o.ReviewId
	}
	if true {
		toSerialize["dismissal_message"] = o.DismissalMessage.Get()
	}
	if o.DismissalCommitId != nil {
		toSerialize["dismissal_commit_id"] = o.DismissalCommitId
	}
	return json.Marshal(toSerialize)
}

type NullableReviewDismissedIssueEventDismissedReview struct {
	value *ReviewDismissedIssueEventDismissedReview
	isSet bool
}

func (v NullableReviewDismissedIssueEventDismissedReview) Get() *ReviewDismissedIssueEventDismissedReview {
	return v.value
}

func (v *NullableReviewDismissedIssueEventDismissedReview) Set(val *ReviewDismissedIssueEventDismissedReview) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewDismissedIssueEventDismissedReview) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewDismissedIssueEventDismissedReview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewDismissedIssueEventDismissedReview(val *ReviewDismissedIssueEventDismissedReview) *NullableReviewDismissedIssueEventDismissedReview {
	return &NullableReviewDismissedIssueEventDismissedReview{value: val, isSet: true}
}

func (v NullableReviewDismissedIssueEventDismissedReview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewDismissedIssueEventDismissedReview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


