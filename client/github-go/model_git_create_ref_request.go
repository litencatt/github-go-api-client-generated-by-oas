/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// GitCreateRefRequest struct for GitCreateRefRequest
type GitCreateRefRequest struct {
	// The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
	Ref string `json:"ref"`
	// The SHA1 value for this reference.
	Sha string `json:"sha"`
	Key *string `json:"key,omitempty"`
}

// NewGitCreateRefRequest instantiates a new GitCreateRefRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitCreateRefRequest(ref string, sha string) *GitCreateRefRequest {
	this := GitCreateRefRequest{}
	this.Ref = ref
	this.Sha = sha
	return &this
}

// NewGitCreateRefRequestWithDefaults instantiates a new GitCreateRefRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitCreateRefRequestWithDefaults() *GitCreateRefRequest {
	this := GitCreateRefRequest{}
	return &this
}

// GetRef returns the Ref field value
func (o *GitCreateRefRequest) GetRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ref
}

// GetRefOk returns a tuple with the Ref field value
// and a boolean to check if the value has been set.
func (o *GitCreateRefRequest) GetRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ref, true
}

// SetRef sets field value
func (o *GitCreateRefRequest) SetRef(v string) {
	o.Ref = v
}

// GetSha returns the Sha field value
func (o *GitCreateRefRequest) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *GitCreateRefRequest) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *GitCreateRefRequest) SetSha(v string) {
	o.Sha = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *GitCreateRefRequest) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateRefRequest) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *GitCreateRefRequest) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *GitCreateRefRequest) SetKey(v string) {
	o.Key = &v
}

func (o GitCreateRefRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ref"] = o.Ref
	}
	if true {
		toSerialize["sha"] = o.Sha
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableGitCreateRefRequest struct {
	value *GitCreateRefRequest
	isSet bool
}

func (v NullableGitCreateRefRequest) Get() *GitCreateRefRequest {
	return v.value
}

func (v *NullableGitCreateRefRequest) Set(val *GitCreateRefRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGitCreateRefRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGitCreateRefRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitCreateRefRequest(val *GitCreateRefRequest) *NullableGitCreateRefRequest {
	return &NullableGitCreateRefRequest{value: val, isSet: true}
}

func (v NullableGitCreateRefRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitCreateRefRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


