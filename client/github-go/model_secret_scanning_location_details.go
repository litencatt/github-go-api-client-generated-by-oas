/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// SecretScanningLocationDetails - struct for SecretScanningLocationDetails
type SecretScanningLocationDetails struct {
	SecretScanningLocationCommit *SecretScanningLocationCommit
}

// SecretScanningLocationCommitAsSecretScanningLocationDetails is a convenience function that returns SecretScanningLocationCommit wrapped in SecretScanningLocationDetails
func SecretScanningLocationCommitAsSecretScanningLocationDetails(v *SecretScanningLocationCommit) SecretScanningLocationDetails {
	return SecretScanningLocationDetails{
		SecretScanningLocationCommit: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SecretScanningLocationDetails) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SecretScanningLocationCommit
	err = newStrictDecoder(data).Decode(&dst.SecretScanningLocationCommit)
	if err == nil {
		jsonSecretScanningLocationCommit, _ := json.Marshal(dst.SecretScanningLocationCommit)
		if string(jsonSecretScanningLocationCommit) == "{}" { // empty struct
			dst.SecretScanningLocationCommit = nil
		} else {
			match++
		}
	} else {
		dst.SecretScanningLocationCommit = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SecretScanningLocationCommit = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SecretScanningLocationDetails)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SecretScanningLocationDetails)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SecretScanningLocationDetails) MarshalJSON() ([]byte, error) {
	if src.SecretScanningLocationCommit != nil {
		return json.Marshal(&src.SecretScanningLocationCommit)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SecretScanningLocationDetails) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SecretScanningLocationCommit != nil {
		return obj.SecretScanningLocationCommit
	}

	// all schemas are nil
	return nil
}

type NullableSecretScanningLocationDetails struct {
	value *SecretScanningLocationDetails
	isSet bool
}

func (v NullableSecretScanningLocationDetails) Get() *SecretScanningLocationDetails {
	return v.value
}

func (v *NullableSecretScanningLocationDetails) Set(val *SecretScanningLocationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretScanningLocationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretScanningLocationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretScanningLocationDetails(val *SecretScanningLocationDetails) *NullableSecretScanningLocationDetails {
	return &NullableSecretScanningLocationDetails{value: val, isSet: true}
}

func (v NullableSecretScanningLocationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretScanningLocationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


