/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// BaseGistFilesValue struct for BaseGistFilesValue
type BaseGistFilesValue struct {
	Filename *string `json:"filename,omitempty"`
	Type *string `json:"type,omitempty"`
	Language *string `json:"language,omitempty"`
	RawUrl *string `json:"raw_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
}

// NewBaseGistFilesValue instantiates a new BaseGistFilesValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseGistFilesValue() *BaseGistFilesValue {
	this := BaseGistFilesValue{}
	return &this
}

// NewBaseGistFilesValueWithDefaults instantiates a new BaseGistFilesValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseGistFilesValueWithDefaults() *BaseGistFilesValue {
	this := BaseGistFilesValue{}
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *BaseGistFilesValue) GetFilename() string {
	if o == nil || o.Filename == nil {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseGistFilesValue) GetFilenameOk() (*string, bool) {
	if o == nil || o.Filename == nil {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *BaseGistFilesValue) HasFilename() bool {
	if o != nil && o.Filename != nil {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *BaseGistFilesValue) SetFilename(v string) {
	o.Filename = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BaseGistFilesValue) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseGistFilesValue) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BaseGistFilesValue) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BaseGistFilesValue) SetType(v string) {
	o.Type = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *BaseGistFilesValue) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseGistFilesValue) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *BaseGistFilesValue) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *BaseGistFilesValue) SetLanguage(v string) {
	o.Language = &v
}

// GetRawUrl returns the RawUrl field value if set, zero value otherwise.
func (o *BaseGistFilesValue) GetRawUrl() string {
	if o == nil || o.RawUrl == nil {
		var ret string
		return ret
	}
	return *o.RawUrl
}

// GetRawUrlOk returns a tuple with the RawUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseGistFilesValue) GetRawUrlOk() (*string, bool) {
	if o == nil || o.RawUrl == nil {
		return nil, false
	}
	return o.RawUrl, true
}

// HasRawUrl returns a boolean if a field has been set.
func (o *BaseGistFilesValue) HasRawUrl() bool {
	if o != nil && o.RawUrl != nil {
		return true
	}

	return false
}

// SetRawUrl gets a reference to the given string and assigns it to the RawUrl field.
func (o *BaseGistFilesValue) SetRawUrl(v string) {
	o.RawUrl = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *BaseGistFilesValue) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseGistFilesValue) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *BaseGistFilesValue) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *BaseGistFilesValue) SetSize(v int32) {
	o.Size = &v
}

func (o BaseGistFilesValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filename != nil {
		toSerialize["filename"] = o.Filename
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.RawUrl != nil {
		toSerialize["raw_url"] = o.RawUrl
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableBaseGistFilesValue struct {
	value *BaseGistFilesValue
	isSet bool
}

func (v NullableBaseGistFilesValue) Get() *BaseGistFilesValue {
	return v.value
}

func (v *NullableBaseGistFilesValue) Set(val *BaseGistFilesValue) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseGistFilesValue) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseGistFilesValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseGistFilesValue(val *BaseGistFilesValue) *NullableBaseGistFilesValue {
	return &NullableBaseGistFilesValue{value: val, isSet: true}
}

func (v NullableBaseGistFilesValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseGistFilesValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


