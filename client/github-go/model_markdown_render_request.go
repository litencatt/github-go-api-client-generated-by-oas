/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// MarkdownRenderRequest struct for MarkdownRenderRequest
type MarkdownRenderRequest struct {
	// The Markdown text to render in HTML.
	Text string `json:"text"`
	// The rendering mode. Can be either `markdown` or `gfm`.
	Mode *string `json:"mode,omitempty"`
	// The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.
	Context *string `json:"context,omitempty"`
}

// NewMarkdownRenderRequest instantiates a new MarkdownRenderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarkdownRenderRequest(text string) *MarkdownRenderRequest {
	this := MarkdownRenderRequest{}
	this.Text = text
	var mode string = "markdown"
	this.Mode = &mode
	return &this
}

// NewMarkdownRenderRequestWithDefaults instantiates a new MarkdownRenderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarkdownRenderRequestWithDefaults() *MarkdownRenderRequest {
	this := MarkdownRenderRequest{}
	var mode string = "markdown"
	this.Mode = &mode
	return &this
}

// GetText returns the Text field value
func (o *MarkdownRenderRequest) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *MarkdownRenderRequest) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *MarkdownRenderRequest) SetText(v string) {
	o.Text = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *MarkdownRenderRequest) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarkdownRenderRequest) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *MarkdownRenderRequest) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *MarkdownRenderRequest) SetMode(v string) {
	o.Mode = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *MarkdownRenderRequest) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarkdownRenderRequest) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *MarkdownRenderRequest) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *MarkdownRenderRequest) SetContext(v string) {
	o.Context = &v
}

func (o MarkdownRenderRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["text"] = o.Text
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	return json.Marshal(toSerialize)
}

type NullableMarkdownRenderRequest struct {
	value *MarkdownRenderRequest
	isSet bool
}

func (v NullableMarkdownRenderRequest) Get() *MarkdownRenderRequest {
	return v.value
}

func (v *NullableMarkdownRenderRequest) Set(val *MarkdownRenderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMarkdownRenderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMarkdownRenderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarkdownRenderRequest(val *MarkdownRenderRequest) *NullableMarkdownRenderRequest {
	return &NullableMarkdownRenderRequest{value: val, isSet: true}
}

func (v NullableMarkdownRenderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarkdownRenderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


