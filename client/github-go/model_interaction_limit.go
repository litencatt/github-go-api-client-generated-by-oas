/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// InteractionLimit Limit interactions to a specific type of user for a specified duration
type InteractionLimit struct {
	Limit InteractionGroup `json:"limit"`
	Expiry *InteractionExpiry `json:"expiry,omitempty"`
}

// NewInteractionLimit instantiates a new InteractionLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInteractionLimit(limit InteractionGroup) *InteractionLimit {
	this := InteractionLimit{}
	this.Limit = limit
	return &this
}

// NewInteractionLimitWithDefaults instantiates a new InteractionLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInteractionLimitWithDefaults() *InteractionLimit {
	this := InteractionLimit{}
	return &this
}

// GetLimit returns the Limit field value
func (o *InteractionLimit) GetLimit() InteractionGroup {
	if o == nil {
		var ret InteractionGroup
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *InteractionLimit) GetLimitOk() (*InteractionGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *InteractionLimit) SetLimit(v InteractionGroup) {
	o.Limit = v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *InteractionLimit) GetExpiry() InteractionExpiry {
	if o == nil || o.Expiry == nil {
		var ret InteractionExpiry
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InteractionLimit) GetExpiryOk() (*InteractionExpiry, bool) {
	if o == nil || o.Expiry == nil {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *InteractionLimit) HasExpiry() bool {
	if o != nil && o.Expiry != nil {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given InteractionExpiry and assigns it to the Expiry field.
func (o *InteractionLimit) SetExpiry(v InteractionExpiry) {
	o.Expiry = &v
}

func (o InteractionLimit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["limit"] = o.Limit
	}
	if o.Expiry != nil {
		toSerialize["expiry"] = o.Expiry
	}
	return json.Marshal(toSerialize)
}

type NullableInteractionLimit struct {
	value *InteractionLimit
	isSet bool
}

func (v NullableInteractionLimit) Get() *InteractionLimit {
	return v.value
}

func (v *NullableInteractionLimit) Set(val *InteractionLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableInteractionLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableInteractionLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInteractionLimit(val *InteractionLimit) *NullableInteractionLimit {
	return &NullableInteractionLimit{value: val, isSet: true}
}

func (v NullableInteractionLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInteractionLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


