/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// Hook Webhooks for repositories.
type Hook struct {
	Type string `json:"type"`
	// Unique identifier of the webhook.
	Id int32 `json:"id"`
	// The name of a valid service, use 'web' for a webhook.
	Name string `json:"name"`
	// Determines whether the hook is actually triggered on pushes.
	Active bool `json:"active"`
	// Determines what events the hook is triggered for. Default: ['push'].
	Events []string `json:"events"`
	Config HookConfig `json:"config"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
	Url string `json:"url"`
	TestUrl string `json:"test_url"`
	PingUrl string `json:"ping_url"`
	DeliveriesUrl *string `json:"deliveries_url,omitempty"`
	LastResponse HookResponse `json:"last_response"`
}

// NewHook instantiates a new Hook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHook(type_ string, id int32, name string, active bool, events []string, config HookConfig, updatedAt time.Time, createdAt time.Time, url string, testUrl string, pingUrl string, lastResponse HookResponse) *Hook {
	this := Hook{}
	this.Type = type_
	this.Id = id
	this.Name = name
	this.Active = active
	this.Events = events
	this.Config = config
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	this.Url = url
	this.TestUrl = testUrl
	this.PingUrl = pingUrl
	this.LastResponse = lastResponse
	return &this
}

// NewHookWithDefaults instantiates a new Hook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHookWithDefaults() *Hook {
	this := Hook{}
	return &this
}

// GetType returns the Type field value
func (o *Hook) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Hook) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Hook) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *Hook) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Hook) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Hook) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Hook) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Hook) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Hook) SetName(v string) {
	o.Name = v
}

// GetActive returns the Active field value
func (o *Hook) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Hook) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Hook) SetActive(v bool) {
	o.Active = v
}

// GetEvents returns the Events field value
func (o *Hook) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *Hook) GetEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *Hook) SetEvents(v []string) {
	o.Events = v
}

// GetConfig returns the Config field value
func (o *Hook) GetConfig() HookConfig {
	if o == nil {
		var ret HookConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *Hook) GetConfigOk() (*HookConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *Hook) SetConfig(v HookConfig) {
	o.Config = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Hook) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Hook) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Hook) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Hook) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Hook) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Hook) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUrl returns the Url field value
func (o *Hook) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Hook) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Hook) SetUrl(v string) {
	o.Url = v
}

// GetTestUrl returns the TestUrl field value
func (o *Hook) GetTestUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestUrl
}

// GetTestUrlOk returns a tuple with the TestUrl field value
// and a boolean to check if the value has been set.
func (o *Hook) GetTestUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestUrl, true
}

// SetTestUrl sets field value
func (o *Hook) SetTestUrl(v string) {
	o.TestUrl = v
}

// GetPingUrl returns the PingUrl field value
func (o *Hook) GetPingUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PingUrl
}

// GetPingUrlOk returns a tuple with the PingUrl field value
// and a boolean to check if the value has been set.
func (o *Hook) GetPingUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PingUrl, true
}

// SetPingUrl sets field value
func (o *Hook) SetPingUrl(v string) {
	o.PingUrl = v
}

// GetDeliveriesUrl returns the DeliveriesUrl field value if set, zero value otherwise.
func (o *Hook) GetDeliveriesUrl() string {
	if o == nil || o.DeliveriesUrl == nil {
		var ret string
		return ret
	}
	return *o.DeliveriesUrl
}

// GetDeliveriesUrlOk returns a tuple with the DeliveriesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetDeliveriesUrlOk() (*string, bool) {
	if o == nil || o.DeliveriesUrl == nil {
		return nil, false
	}
	return o.DeliveriesUrl, true
}

// HasDeliveriesUrl returns a boolean if a field has been set.
func (o *Hook) HasDeliveriesUrl() bool {
	if o != nil && o.DeliveriesUrl != nil {
		return true
	}

	return false
}

// SetDeliveriesUrl gets a reference to the given string and assigns it to the DeliveriesUrl field.
func (o *Hook) SetDeliveriesUrl(v string) {
	o.DeliveriesUrl = &v
}

// GetLastResponse returns the LastResponse field value
func (o *Hook) GetLastResponse() HookResponse {
	if o == nil {
		var ret HookResponse
		return ret
	}

	return o.LastResponse
}

// GetLastResponseOk returns a tuple with the LastResponse field value
// and a boolean to check if the value has been set.
func (o *Hook) GetLastResponseOk() (*HookResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastResponse, true
}

// SetLastResponse sets field value
func (o *Hook) SetLastResponse(v HookResponse) {
	o.LastResponse = v
}

func (o Hook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["active"] = o.Active
	}
	if true {
		toSerialize["events"] = o.Events
	}
	if true {
		toSerialize["config"] = o.Config
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["test_url"] = o.TestUrl
	}
	if true {
		toSerialize["ping_url"] = o.PingUrl
	}
	if o.DeliveriesUrl != nil {
		toSerialize["deliveries_url"] = o.DeliveriesUrl
	}
	if true {
		toSerialize["last_response"] = o.LastResponse
	}
	return json.Marshal(toSerialize)
}

type NullableHook struct {
	value *Hook
	isSet bool
}

func (v NullableHook) Get() *Hook {
	return v.value
}

func (v *NullableHook) Set(val *Hook) {
	v.value = val
	v.isSet = true
}

func (v NullableHook) IsSet() bool {
	return v.isSet
}

func (v *NullableHook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHook(val *Hook) *NullableHook {
	return &NullableHook{value: val, isSet: true}
}

func (v NullableHook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


