/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"fmt"
)

// CodeScanningAlertState State of a code scanning alert.
type CodeScanningAlertState string

// List of code-scanning-alert-state
const (
	OPEN CodeScanningAlertState = "open"
	CLOSED CodeScanningAlertState = "closed"
	DISMISSED CodeScanningAlertState = "dismissed"
	FIXED CodeScanningAlertState = "fixed"
)

// All allowed values of CodeScanningAlertState enum
var AllowedCodeScanningAlertStateEnumValues = []CodeScanningAlertState{
	"open",
	"closed",
	"dismissed",
	"fixed",
}

func (v *CodeScanningAlertState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CodeScanningAlertState(value)
	for _, existing := range AllowedCodeScanningAlertStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CodeScanningAlertState", value)
}

// NewCodeScanningAlertStateFromValue returns a pointer to a valid CodeScanningAlertState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCodeScanningAlertStateFromValue(v string) (*CodeScanningAlertState, error) {
	ev := CodeScanningAlertState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CodeScanningAlertState: valid values are %v", v, AllowedCodeScanningAlertStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CodeScanningAlertState) IsValid() bool {
	for _, existing := range AllowedCodeScanningAlertStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to code-scanning-alert-state value
func (v CodeScanningAlertState) Ptr() *CodeScanningAlertState {
	return &v
}

type NullableCodeScanningAlertState struct {
	value *CodeScanningAlertState
	isSet bool
}

func (v NullableCodeScanningAlertState) Get() *CodeScanningAlertState {
	return v.value
}

func (v *NullableCodeScanningAlertState) Set(val *CodeScanningAlertState) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeScanningAlertState) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeScanningAlertState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeScanningAlertState(val *CodeScanningAlertState) *NullableCodeScanningAlertState {
	return &NullableCodeScanningAlertState{value: val, isSet: true}
}

func (v NullableCodeScanningAlertState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeScanningAlertState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

