/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ReposReplaceAllTopicsRequest struct for ReposReplaceAllTopicsRequest
type ReposReplaceAllTopicsRequest struct {
	// An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
	Names []string `json:"names"`
}

// NewReposReplaceAllTopicsRequest instantiates a new ReposReplaceAllTopicsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReposReplaceAllTopicsRequest(names []string) *ReposReplaceAllTopicsRequest {
	this := ReposReplaceAllTopicsRequest{}
	this.Names = names
	return &this
}

// NewReposReplaceAllTopicsRequestWithDefaults instantiates a new ReposReplaceAllTopicsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReposReplaceAllTopicsRequestWithDefaults() *ReposReplaceAllTopicsRequest {
	this := ReposReplaceAllTopicsRequest{}
	return &this
}

// GetNames returns the Names field value
func (o *ReposReplaceAllTopicsRequest) GetNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Names
}

// GetNamesOk returns a tuple with the Names field value
// and a boolean to check if the value has been set.
func (o *ReposReplaceAllTopicsRequest) GetNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Names, true
}

// SetNames sets field value
func (o *ReposReplaceAllTopicsRequest) SetNames(v []string) {
	o.Names = v
}

func (o ReposReplaceAllTopicsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["names"] = o.Names
	}
	return json.Marshal(toSerialize)
}

type NullableReposReplaceAllTopicsRequest struct {
	value *ReposReplaceAllTopicsRequest
	isSet bool
}

func (v NullableReposReplaceAllTopicsRequest) Get() *ReposReplaceAllTopicsRequest {
	return v.value
}

func (v *NullableReposReplaceAllTopicsRequest) Set(val *ReposReplaceAllTopicsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReposReplaceAllTopicsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReposReplaceAllTopicsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposReplaceAllTopicsRequest(val *ReposReplaceAllTopicsRequest) *NullableReposReplaceAllTopicsRequest {
	return &NullableReposReplaceAllTopicsRequest{value: val, isSet: true}
}

func (v NullableReposReplaceAllTopicsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposReplaceAllTopicsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


