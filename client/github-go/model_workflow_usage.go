/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// WorkflowUsage Workflow Usage
type WorkflowUsage struct {
	Billable WorkflowUsageBillable `json:"billable"`
}

// NewWorkflowUsage instantiates a new WorkflowUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowUsage(billable WorkflowUsageBillable) *WorkflowUsage {
	this := WorkflowUsage{}
	this.Billable = billable
	return &this
}

// NewWorkflowUsageWithDefaults instantiates a new WorkflowUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowUsageWithDefaults() *WorkflowUsage {
	this := WorkflowUsage{}
	return &this
}

// GetBillable returns the Billable field value
func (o *WorkflowUsage) GetBillable() WorkflowUsageBillable {
	if o == nil {
		var ret WorkflowUsageBillable
		return ret
	}

	return o.Billable
}

// GetBillableOk returns a tuple with the Billable field value
// and a boolean to check if the value has been set.
func (o *WorkflowUsage) GetBillableOk() (*WorkflowUsageBillable, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Billable, true
}

// SetBillable sets field value
func (o *WorkflowUsage) SetBillable(v WorkflowUsageBillable) {
	o.Billable = v
}

func (o WorkflowUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["billable"] = o.Billable
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowUsage struct {
	value *WorkflowUsage
	isSet bool
}

func (v NullableWorkflowUsage) Get() *WorkflowUsage {
	return v.value
}

func (v *NullableWorkflowUsage) Set(val *WorkflowUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowUsage(val *WorkflowUsage) *NullableWorkflowUsage {
	return &NullableWorkflowUsage{value: val, isSet: true}
}

func (v NullableWorkflowUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


