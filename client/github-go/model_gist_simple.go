/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// GistSimple Gist Simple
type GistSimple struct {
	// Deprecated
	Forks []GistSimpleForksInner `json:"forks,omitempty"`
	// Deprecated
	History []GistHistory `json:"history,omitempty"`
	ForkOf NullableGist `json:"fork_of,omitempty"`
	Url *string `json:"url,omitempty"`
	ForksUrl *string `json:"forks_url,omitempty"`
	CommitsUrl *string `json:"commits_url,omitempty"`
	Id *string `json:"id,omitempty"`
	NodeId *string `json:"node_id,omitempty"`
	GitPullUrl *string `json:"git_pull_url,omitempty"`
	GitPushUrl *string `json:"git_push_url,omitempty"`
	HtmlUrl *string `json:"html_url,omitempty"`
	Files *map[string]GistSimpleFilesValue `json:"files,omitempty"`
	Public *bool `json:"public,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	User NullableString `json:"user,omitempty"`
	CommentsUrl *string `json:"comments_url,omitempty"`
	Owner *SimpleUser `json:"owner,omitempty"`
	Truncated *bool `json:"truncated,omitempty"`
}

// NewGistSimple instantiates a new GistSimple object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGistSimple() *GistSimple {
	this := GistSimple{}
	return &this
}

// NewGistSimpleWithDefaults instantiates a new GistSimple object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGistSimpleWithDefaults() *GistSimple {
	this := GistSimple{}
	return &this
}

// GetForks returns the Forks field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *GistSimple) GetForks() []GistSimpleForksInner {
	if o == nil {
		var ret []GistSimpleForksInner
		return ret
	}
	return o.Forks
}

// GetForksOk returns a tuple with the Forks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *GistSimple) GetForksOk() ([]GistSimpleForksInner, bool) {
	if o == nil || o.Forks == nil {
		return nil, false
	}
	return o.Forks, true
}

// HasForks returns a boolean if a field has been set.
func (o *GistSimple) HasForks() bool {
	if o != nil && o.Forks != nil {
		return true
	}

	return false
}

// SetForks gets a reference to the given []GistSimpleForksInner and assigns it to the Forks field.
// Deprecated
func (o *GistSimple) SetForks(v []GistSimpleForksInner) {
	o.Forks = v
}

// GetHistory returns the History field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *GistSimple) GetHistory() []GistHistory {
	if o == nil {
		var ret []GistHistory
		return ret
	}
	return o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *GistSimple) GetHistoryOk() ([]GistHistory, bool) {
	if o == nil || o.History == nil {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *GistSimple) HasHistory() bool {
	if o != nil && o.History != nil {
		return true
	}

	return false
}

// SetHistory gets a reference to the given []GistHistory and assigns it to the History field.
// Deprecated
func (o *GistSimple) SetHistory(v []GistHistory) {
	o.History = v
}

// GetForkOf returns the ForkOf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GistSimple) GetForkOf() Gist {
	if o == nil || o.ForkOf.Get() == nil {
		var ret Gist
		return ret
	}
	return *o.ForkOf.Get()
}

// GetForkOfOk returns a tuple with the ForkOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GistSimple) GetForkOfOk() (*Gist, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForkOf.Get(), o.ForkOf.IsSet()
}

// HasForkOf returns a boolean if a field has been set.
func (o *GistSimple) HasForkOf() bool {
	if o != nil && o.ForkOf.IsSet() {
		return true
	}

	return false
}

// SetForkOf gets a reference to the given NullableGist and assigns it to the ForkOf field.
func (o *GistSimple) SetForkOf(v Gist) {
	o.ForkOf.Set(&v)
}
// SetForkOfNil sets the value for ForkOf to be an explicit nil
func (o *GistSimple) SetForkOfNil() {
	o.ForkOf.Set(nil)
}

// UnsetForkOf ensures that no value is present for ForkOf, not even an explicit nil
func (o *GistSimple) UnsetForkOf() {
	o.ForkOf.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GistSimple) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GistSimple) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GistSimple) SetUrl(v string) {
	o.Url = &v
}

// GetForksUrl returns the ForksUrl field value if set, zero value otherwise.
func (o *GistSimple) GetForksUrl() string {
	if o == nil || o.ForksUrl == nil {
		var ret string
		return ret
	}
	return *o.ForksUrl
}

// GetForksUrlOk returns a tuple with the ForksUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetForksUrlOk() (*string, bool) {
	if o == nil || o.ForksUrl == nil {
		return nil, false
	}
	return o.ForksUrl, true
}

// HasForksUrl returns a boolean if a field has been set.
func (o *GistSimple) HasForksUrl() bool {
	if o != nil && o.ForksUrl != nil {
		return true
	}

	return false
}

// SetForksUrl gets a reference to the given string and assigns it to the ForksUrl field.
func (o *GistSimple) SetForksUrl(v string) {
	o.ForksUrl = &v
}

// GetCommitsUrl returns the CommitsUrl field value if set, zero value otherwise.
func (o *GistSimple) GetCommitsUrl() string {
	if o == nil || o.CommitsUrl == nil {
		var ret string
		return ret
	}
	return *o.CommitsUrl
}

// GetCommitsUrlOk returns a tuple with the CommitsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetCommitsUrlOk() (*string, bool) {
	if o == nil || o.CommitsUrl == nil {
		return nil, false
	}
	return o.CommitsUrl, true
}

// HasCommitsUrl returns a boolean if a field has been set.
func (o *GistSimple) HasCommitsUrl() bool {
	if o != nil && o.CommitsUrl != nil {
		return true
	}

	return false
}

// SetCommitsUrl gets a reference to the given string and assigns it to the CommitsUrl field.
func (o *GistSimple) SetCommitsUrl(v string) {
	o.CommitsUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GistSimple) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GistSimple) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GistSimple) SetId(v string) {
	o.Id = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *GistSimple) GetNodeId() string {
	if o == nil || o.NodeId == nil {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetNodeIdOk() (*string, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *GistSimple) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *GistSimple) SetNodeId(v string) {
	o.NodeId = &v
}

// GetGitPullUrl returns the GitPullUrl field value if set, zero value otherwise.
func (o *GistSimple) GetGitPullUrl() string {
	if o == nil || o.GitPullUrl == nil {
		var ret string
		return ret
	}
	return *o.GitPullUrl
}

// GetGitPullUrlOk returns a tuple with the GitPullUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetGitPullUrlOk() (*string, bool) {
	if o == nil || o.GitPullUrl == nil {
		return nil, false
	}
	return o.GitPullUrl, true
}

// HasGitPullUrl returns a boolean if a field has been set.
func (o *GistSimple) HasGitPullUrl() bool {
	if o != nil && o.GitPullUrl != nil {
		return true
	}

	return false
}

// SetGitPullUrl gets a reference to the given string and assigns it to the GitPullUrl field.
func (o *GistSimple) SetGitPullUrl(v string) {
	o.GitPullUrl = &v
}

// GetGitPushUrl returns the GitPushUrl field value if set, zero value otherwise.
func (o *GistSimple) GetGitPushUrl() string {
	if o == nil || o.GitPushUrl == nil {
		var ret string
		return ret
	}
	return *o.GitPushUrl
}

// GetGitPushUrlOk returns a tuple with the GitPushUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetGitPushUrlOk() (*string, bool) {
	if o == nil || o.GitPushUrl == nil {
		return nil, false
	}
	return o.GitPushUrl, true
}

// HasGitPushUrl returns a boolean if a field has been set.
func (o *GistSimple) HasGitPushUrl() bool {
	if o != nil && o.GitPushUrl != nil {
		return true
	}

	return false
}

// SetGitPushUrl gets a reference to the given string and assigns it to the GitPushUrl field.
func (o *GistSimple) SetGitPushUrl(v string) {
	o.GitPushUrl = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *GistSimple) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetHtmlUrlOk() (*string, bool) {
	if o == nil || o.HtmlUrl == nil {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *GistSimple) HasHtmlUrl() bool {
	if o != nil && o.HtmlUrl != nil {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *GistSimple) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *GistSimple) GetFiles() map[string]GistSimpleFilesValue {
	if o == nil || o.Files == nil {
		var ret map[string]GistSimpleFilesValue
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetFilesOk() (*map[string]GistSimpleFilesValue, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *GistSimple) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given map[string]GistSimpleFilesValue and assigns it to the Files field.
func (o *GistSimple) SetFiles(v map[string]GistSimpleFilesValue) {
	o.Files = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *GistSimple) GetPublic() bool {
	if o == nil || o.Public == nil {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetPublicOk() (*bool, bool) {
	if o == nil || o.Public == nil {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *GistSimple) HasPublic() bool {
	if o != nil && o.Public != nil {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *GistSimple) SetPublic(v bool) {
	o.Public = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GistSimple) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GistSimple) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *GistSimple) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *GistSimple) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *GistSimple) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *GistSimple) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GistSimple) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GistSimple) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *GistSimple) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *GistSimple) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *GistSimple) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *GistSimple) UnsetDescription() {
	o.Description.Unset()
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *GistSimple) GetComments() int32 {
	if o == nil || o.Comments == nil {
		var ret int32
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetCommentsOk() (*int32, bool) {
	if o == nil || o.Comments == nil {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *GistSimple) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given int32 and assigns it to the Comments field.
func (o *GistSimple) SetComments(v int32) {
	o.Comments = &v
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GistSimple) GetUser() string {
	if o == nil || o.User.Get() == nil {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GistSimple) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *GistSimple) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *GistSimple) SetUser(v string) {
	o.User.Set(&v)
}
// SetUserNil sets the value for User to be an explicit nil
func (o *GistSimple) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *GistSimple) UnsetUser() {
	o.User.Unset()
}

// GetCommentsUrl returns the CommentsUrl field value if set, zero value otherwise.
func (o *GistSimple) GetCommentsUrl() string {
	if o == nil || o.CommentsUrl == nil {
		var ret string
		return ret
	}
	return *o.CommentsUrl
}

// GetCommentsUrlOk returns a tuple with the CommentsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetCommentsUrlOk() (*string, bool) {
	if o == nil || o.CommentsUrl == nil {
		return nil, false
	}
	return o.CommentsUrl, true
}

// HasCommentsUrl returns a boolean if a field has been set.
func (o *GistSimple) HasCommentsUrl() bool {
	if o != nil && o.CommentsUrl != nil {
		return true
	}

	return false
}

// SetCommentsUrl gets a reference to the given string and assigns it to the CommentsUrl field.
func (o *GistSimple) SetCommentsUrl(v string) {
	o.CommentsUrl = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *GistSimple) GetOwner() SimpleUser {
	if o == nil || o.Owner == nil {
		var ret SimpleUser
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetOwnerOk() (*SimpleUser, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *GistSimple) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given SimpleUser and assigns it to the Owner field.
func (o *GistSimple) SetOwner(v SimpleUser) {
	o.Owner = &v
}

// GetTruncated returns the Truncated field value if set, zero value otherwise.
func (o *GistSimple) GetTruncated() bool {
	if o == nil || o.Truncated == nil {
		var ret bool
		return ret
	}
	return *o.Truncated
}

// GetTruncatedOk returns a tuple with the Truncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GistSimple) GetTruncatedOk() (*bool, bool) {
	if o == nil || o.Truncated == nil {
		return nil, false
	}
	return o.Truncated, true
}

// HasTruncated returns a boolean if a field has been set.
func (o *GistSimple) HasTruncated() bool {
	if o != nil && o.Truncated != nil {
		return true
	}

	return false
}

// SetTruncated gets a reference to the given bool and assigns it to the Truncated field.
func (o *GistSimple) SetTruncated(v bool) {
	o.Truncated = &v
}

func (o GistSimple) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Forks != nil {
		toSerialize["forks"] = o.Forks
	}
	if o.History != nil {
		toSerialize["history"] = o.History
	}
	if o.ForkOf.IsSet() {
		toSerialize["fork_of"] = o.ForkOf.Get()
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.ForksUrl != nil {
		toSerialize["forks_url"] = o.ForksUrl
	}
	if o.CommitsUrl != nil {
		toSerialize["commits_url"] = o.CommitsUrl
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.NodeId != nil {
		toSerialize["node_id"] = o.NodeId
	}
	if o.GitPullUrl != nil {
		toSerialize["git_pull_url"] = o.GitPullUrl
	}
	if o.GitPushUrl != nil {
		toSerialize["git_push_url"] = o.GitPushUrl
	}
	if o.HtmlUrl != nil {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.Public != nil {
		toSerialize["public"] = o.Public
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	if o.CommentsUrl != nil {
		toSerialize["comments_url"] = o.CommentsUrl
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Truncated != nil {
		toSerialize["truncated"] = o.Truncated
	}
	return json.Marshal(toSerialize)
}

type NullableGistSimple struct {
	value *GistSimple
	isSet bool
}

func (v NullableGistSimple) Get() *GistSimple {
	return v.value
}

func (v *NullableGistSimple) Set(val *GistSimple) {
	v.value = val
	v.isSet = true
}

func (v NullableGistSimple) IsSet() bool {
	return v.isSet
}

func (v *NullableGistSimple) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGistSimple(val *GistSimple) *NullableGistSimple {
	return &NullableGistSimple{value: val, isSet: true}
}

func (v NullableGistSimple) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGistSimple) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


