/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// PullsCreateReviewCommentRequest struct for PullsCreateReviewCommentRequest
type PullsCreateReviewCommentRequest struct {
	// The text of the review comment.
	Body string `json:"body"`
	// The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
	CommitId *string `json:"commit_id,omitempty"`
	// The relative path to the file that necessitates a comment.
	Path *string `json:"path,omitempty"`
	// **This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
	// Deprecated
	Position *int32 `json:"position,omitempty"`
	// In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation.
	Side *string `json:"side,omitempty"`
	// The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
	Line *int32 `json:"line,omitempty"`
	// **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation.
	StartLine *int32 `json:"start_line,omitempty"`
	// **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context.
	StartSide *string `json:"start_side,omitempty"`
	// The ID of the review comment to reply to. To find the ID of a review comment with [\"List review comments on a pull request\"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
	InReplyTo *int32 `json:"in_reply_to,omitempty"`
}

// NewPullsCreateReviewCommentRequest instantiates a new PullsCreateReviewCommentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPullsCreateReviewCommentRequest(body string) *PullsCreateReviewCommentRequest {
	this := PullsCreateReviewCommentRequest{}
	this.Body = body
	return &this
}

// NewPullsCreateReviewCommentRequestWithDefaults instantiates a new PullsCreateReviewCommentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPullsCreateReviewCommentRequestWithDefaults() *PullsCreateReviewCommentRequest {
	this := PullsCreateReviewCommentRequest{}
	return &this
}

// GetBody returns the Body field value
func (o *PullsCreateReviewCommentRequest) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *PullsCreateReviewCommentRequest) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *PullsCreateReviewCommentRequest) SetBody(v string) {
	o.Body = v
}

// GetCommitId returns the CommitId field value if set, zero value otherwise.
func (o *PullsCreateReviewCommentRequest) GetCommitId() string {
	if o == nil || o.CommitId == nil {
		var ret string
		return ret
	}
	return *o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsCreateReviewCommentRequest) GetCommitIdOk() (*string, bool) {
	if o == nil || o.CommitId == nil {
		return nil, false
	}
	return o.CommitId, true
}

// HasCommitId returns a boolean if a field has been set.
func (o *PullsCreateReviewCommentRequest) HasCommitId() bool {
	if o != nil && o.CommitId != nil {
		return true
	}

	return false
}

// SetCommitId gets a reference to the given string and assigns it to the CommitId field.
func (o *PullsCreateReviewCommentRequest) SetCommitId(v string) {
	o.CommitId = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PullsCreateReviewCommentRequest) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsCreateReviewCommentRequest) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PullsCreateReviewCommentRequest) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PullsCreateReviewCommentRequest) SetPath(v string) {
	o.Path = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
// Deprecated
func (o *PullsCreateReviewCommentRequest) GetPosition() int32 {
	if o == nil || o.Position == nil {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PullsCreateReviewCommentRequest) GetPositionOk() (*int32, bool) {
	if o == nil || o.Position == nil {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *PullsCreateReviewCommentRequest) HasPosition() bool {
	if o != nil && o.Position != nil {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
// Deprecated
func (o *PullsCreateReviewCommentRequest) SetPosition(v int32) {
	o.Position = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *PullsCreateReviewCommentRequest) GetSide() string {
	if o == nil || o.Side == nil {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsCreateReviewCommentRequest) GetSideOk() (*string, bool) {
	if o == nil || o.Side == nil {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *PullsCreateReviewCommentRequest) HasSide() bool {
	if o != nil && o.Side != nil {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *PullsCreateReviewCommentRequest) SetSide(v string) {
	o.Side = &v
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *PullsCreateReviewCommentRequest) GetLine() int32 {
	if o == nil || o.Line == nil {
		var ret int32
		return ret
	}
	return *o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsCreateReviewCommentRequest) GetLineOk() (*int32, bool) {
	if o == nil || o.Line == nil {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *PullsCreateReviewCommentRequest) HasLine() bool {
	if o != nil && o.Line != nil {
		return true
	}

	return false
}

// SetLine gets a reference to the given int32 and assigns it to the Line field.
func (o *PullsCreateReviewCommentRequest) SetLine(v int32) {
	o.Line = &v
}

// GetStartLine returns the StartLine field value if set, zero value otherwise.
func (o *PullsCreateReviewCommentRequest) GetStartLine() int32 {
	if o == nil || o.StartLine == nil {
		var ret int32
		return ret
	}
	return *o.StartLine
}

// GetStartLineOk returns a tuple with the StartLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsCreateReviewCommentRequest) GetStartLineOk() (*int32, bool) {
	if o == nil || o.StartLine == nil {
		return nil, false
	}
	return o.StartLine, true
}

// HasStartLine returns a boolean if a field has been set.
func (o *PullsCreateReviewCommentRequest) HasStartLine() bool {
	if o != nil && o.StartLine != nil {
		return true
	}

	return false
}

// SetStartLine gets a reference to the given int32 and assigns it to the StartLine field.
func (o *PullsCreateReviewCommentRequest) SetStartLine(v int32) {
	o.StartLine = &v
}

// GetStartSide returns the StartSide field value if set, zero value otherwise.
func (o *PullsCreateReviewCommentRequest) GetStartSide() string {
	if o == nil || o.StartSide == nil {
		var ret string
		return ret
	}
	return *o.StartSide
}

// GetStartSideOk returns a tuple with the StartSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsCreateReviewCommentRequest) GetStartSideOk() (*string, bool) {
	if o == nil || o.StartSide == nil {
		return nil, false
	}
	return o.StartSide, true
}

// HasStartSide returns a boolean if a field has been set.
func (o *PullsCreateReviewCommentRequest) HasStartSide() bool {
	if o != nil && o.StartSide != nil {
		return true
	}

	return false
}

// SetStartSide gets a reference to the given string and assigns it to the StartSide field.
func (o *PullsCreateReviewCommentRequest) SetStartSide(v string) {
	o.StartSide = &v
}

// GetInReplyTo returns the InReplyTo field value if set, zero value otherwise.
func (o *PullsCreateReviewCommentRequest) GetInReplyTo() int32 {
	if o == nil || o.InReplyTo == nil {
		var ret int32
		return ret
	}
	return *o.InReplyTo
}

// GetInReplyToOk returns a tuple with the InReplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullsCreateReviewCommentRequest) GetInReplyToOk() (*int32, bool) {
	if o == nil || o.InReplyTo == nil {
		return nil, false
	}
	return o.InReplyTo, true
}

// HasInReplyTo returns a boolean if a field has been set.
func (o *PullsCreateReviewCommentRequest) HasInReplyTo() bool {
	if o != nil && o.InReplyTo != nil {
		return true
	}

	return false
}

// SetInReplyTo gets a reference to the given int32 and assigns it to the InReplyTo field.
func (o *PullsCreateReviewCommentRequest) SetInReplyTo(v int32) {
	o.InReplyTo = &v
}

func (o PullsCreateReviewCommentRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["body"] = o.Body
	}
	if o.CommitId != nil {
		toSerialize["commit_id"] = o.CommitId
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Position != nil {
		toSerialize["position"] = o.Position
	}
	if o.Side != nil {
		toSerialize["side"] = o.Side
	}
	if o.Line != nil {
		toSerialize["line"] = o.Line
	}
	if o.StartLine != nil {
		toSerialize["start_line"] = o.StartLine
	}
	if o.StartSide != nil {
		toSerialize["start_side"] = o.StartSide
	}
	if o.InReplyTo != nil {
		toSerialize["in_reply_to"] = o.InReplyTo
	}
	return json.Marshal(toSerialize)
}

type NullablePullsCreateReviewCommentRequest struct {
	value *PullsCreateReviewCommentRequest
	isSet bool
}

func (v NullablePullsCreateReviewCommentRequest) Get() *PullsCreateReviewCommentRequest {
	return v.value
}

func (v *NullablePullsCreateReviewCommentRequest) Set(val *PullsCreateReviewCommentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePullsCreateReviewCommentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePullsCreateReviewCommentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePullsCreateReviewCommentRequest(val *PullsCreateReviewCommentRequest) *NullablePullsCreateReviewCommentRequest {
	return &NullablePullsCreateReviewCommentRequest{value: val, isSet: true}
}

func (v NullablePullsCreateReviewCommentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePullsCreateReviewCommentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


