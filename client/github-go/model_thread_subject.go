/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ThreadSubject struct for ThreadSubject
type ThreadSubject struct {
	Title string `json:"title"`
	Url string `json:"url"`
	LatestCommentUrl string `json:"latest_comment_url"`
	Type string `json:"type"`
}

// NewThreadSubject instantiates a new ThreadSubject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadSubject(title string, url string, latestCommentUrl string, type_ string) *ThreadSubject {
	this := ThreadSubject{}
	this.Title = title
	this.Url = url
	this.LatestCommentUrl = latestCommentUrl
	this.Type = type_
	return &this
}

// NewThreadSubjectWithDefaults instantiates a new ThreadSubject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadSubjectWithDefaults() *ThreadSubject {
	this := ThreadSubject{}
	return &this
}

// GetTitle returns the Title field value
func (o *ThreadSubject) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ThreadSubject) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ThreadSubject) SetTitle(v string) {
	o.Title = v
}

// GetUrl returns the Url field value
func (o *ThreadSubject) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ThreadSubject) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ThreadSubject) SetUrl(v string) {
	o.Url = v
}

// GetLatestCommentUrl returns the LatestCommentUrl field value
func (o *ThreadSubject) GetLatestCommentUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LatestCommentUrl
}

// GetLatestCommentUrlOk returns a tuple with the LatestCommentUrl field value
// and a boolean to check if the value has been set.
func (o *ThreadSubject) GetLatestCommentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LatestCommentUrl, true
}

// SetLatestCommentUrl sets field value
func (o *ThreadSubject) SetLatestCommentUrl(v string) {
	o.LatestCommentUrl = v
}

// GetType returns the Type field value
func (o *ThreadSubject) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ThreadSubject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ThreadSubject) SetType(v string) {
	o.Type = v
}

func (o ThreadSubject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["latest_comment_url"] = o.LatestCommentUrl
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableThreadSubject struct {
	value *ThreadSubject
	isSet bool
}

func (v NullableThreadSubject) Get() *ThreadSubject {
	return v.value
}

func (v *NullableThreadSubject) Set(val *ThreadSubject) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadSubject) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadSubject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadSubject(val *ThreadSubject) *NullableThreadSubject {
	return &NullableThreadSubject{value: val, isSet: true}
}

func (v NullableThreadSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadSubject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


