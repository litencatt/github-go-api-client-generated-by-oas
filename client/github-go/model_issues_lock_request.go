/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// IssuesLockRequest struct for IssuesLockRequest
type IssuesLockRequest struct {
	// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:   \\* `off-topic`   \\* `too heated`   \\* `resolved`   \\* `spam`
	LockReason *string `json:"lock_reason,omitempty"`
}

// NewIssuesLockRequest instantiates a new IssuesLockRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesLockRequest() *IssuesLockRequest {
	this := IssuesLockRequest{}
	return &this
}

// NewIssuesLockRequestWithDefaults instantiates a new IssuesLockRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesLockRequestWithDefaults() *IssuesLockRequest {
	this := IssuesLockRequest{}
	return &this
}

// GetLockReason returns the LockReason field value if set, zero value otherwise.
func (o *IssuesLockRequest) GetLockReason() string {
	if o == nil || o.LockReason == nil {
		var ret string
		return ret
	}
	return *o.LockReason
}

// GetLockReasonOk returns a tuple with the LockReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesLockRequest) GetLockReasonOk() (*string, bool) {
	if o == nil || o.LockReason == nil {
		return nil, false
	}
	return o.LockReason, true
}

// HasLockReason returns a boolean if a field has been set.
func (o *IssuesLockRequest) HasLockReason() bool {
	if o != nil && o.LockReason != nil {
		return true
	}

	return false
}

// SetLockReason gets a reference to the given string and assigns it to the LockReason field.
func (o *IssuesLockRequest) SetLockReason(v string) {
	o.LockReason = &v
}

func (o IssuesLockRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LockReason != nil {
		toSerialize["lock_reason"] = o.LockReason
	}
	return json.Marshal(toSerialize)
}

type NullableIssuesLockRequest struct {
	value *IssuesLockRequest
	isSet bool
}

func (v NullableIssuesLockRequest) Get() *IssuesLockRequest {
	return v.value
}

func (v *NullableIssuesLockRequest) Set(val *IssuesLockRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesLockRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesLockRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesLockRequest(val *IssuesLockRequest) *NullableIssuesLockRequest {
	return &NullableIssuesLockRequest{value: val, isSet: true}
}

func (v NullableIssuesLockRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesLockRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


