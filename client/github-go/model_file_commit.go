/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// FileCommit File Commit
type FileCommit struct {
	Content NullableFileCommitContent `json:"content"`
	Commit FileCommitCommit `json:"commit"`
}

// NewFileCommit instantiates a new FileCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileCommit(content NullableFileCommitContent, commit FileCommitCommit) *FileCommit {
	this := FileCommit{}
	this.Content = content
	this.Commit = commit
	return &this
}

// NewFileCommitWithDefaults instantiates a new FileCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileCommitWithDefaults() *FileCommit {
	this := FileCommit{}
	return &this
}

// GetContent returns the Content field value
// If the value is explicit nil, the zero value for FileCommitContent will be returned
func (o *FileCommit) GetContent() FileCommitContent {
	if o == nil || o.Content.Get() == nil {
		var ret FileCommitContent
		return ret
	}

	return *o.Content.Get()
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileCommit) GetContentOk() (*FileCommitContent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content.Get(), o.Content.IsSet()
}

// SetContent sets field value
func (o *FileCommit) SetContent(v FileCommitContent) {
	o.Content.Set(&v)
}

// GetCommit returns the Commit field value
func (o *FileCommit) GetCommit() FileCommitCommit {
	if o == nil {
		var ret FileCommitCommit
		return ret
	}

	return o.Commit
}

// GetCommitOk returns a tuple with the Commit field value
// and a boolean to check if the value has been set.
func (o *FileCommit) GetCommitOk() (*FileCommitCommit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Commit, true
}

// SetCommit sets field value
func (o *FileCommit) SetCommit(v FileCommitCommit) {
	o.Commit = v
}

func (o FileCommit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["content"] = o.Content.Get()
	}
	if true {
		toSerialize["commit"] = o.Commit
	}
	return json.Marshal(toSerialize)
}

type NullableFileCommit struct {
	value *FileCommit
	isSet bool
}

func (v NullableFileCommit) Get() *FileCommit {
	return v.value
}

func (v *NullableFileCommit) Set(val *FileCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableFileCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableFileCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileCommit(val *FileCommit) *NullableFileCommit {
	return &NullableFileCommit{value: val, isSet: true}
}

func (v NullableFileCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


