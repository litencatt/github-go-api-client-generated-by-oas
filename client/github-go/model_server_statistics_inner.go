/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ServerStatisticsInner struct for ServerStatisticsInner
type ServerStatisticsInner struct {
	ServerId *string `json:"server_id,omitempty"`
	CollectionDate *string `json:"collection_date,omitempty"`
	SchemaVersion *string `json:"schema_version,omitempty"`
	GhesVersion *string `json:"ghes_version,omitempty"`
	HostName *string `json:"host_name,omitempty"`
	GithubConnect *ServerStatisticsInnerGithubConnect `json:"github_connect,omitempty"`
	GheStats *ServerStatisticsInnerGheStats `json:"ghe_stats,omitempty"`
	DormantUsers *ServerStatisticsInnerDormantUsers `json:"dormant_users,omitempty"`
}

// NewServerStatisticsInner instantiates a new ServerStatisticsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerStatisticsInner() *ServerStatisticsInner {
	this := ServerStatisticsInner{}
	return &this
}

// NewServerStatisticsInnerWithDefaults instantiates a new ServerStatisticsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerStatisticsInnerWithDefaults() *ServerStatisticsInner {
	this := ServerStatisticsInner{}
	return &this
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *ServerStatisticsInner) GetServerId() string {
	if o == nil || o.ServerId == nil {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStatisticsInner) GetServerIdOk() (*string, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *ServerStatisticsInner) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *ServerStatisticsInner) SetServerId(v string) {
	o.ServerId = &v
}

// GetCollectionDate returns the CollectionDate field value if set, zero value otherwise.
func (o *ServerStatisticsInner) GetCollectionDate() string {
	if o == nil || o.CollectionDate == nil {
		var ret string
		return ret
	}
	return *o.CollectionDate
}

// GetCollectionDateOk returns a tuple with the CollectionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStatisticsInner) GetCollectionDateOk() (*string, bool) {
	if o == nil || o.CollectionDate == nil {
		return nil, false
	}
	return o.CollectionDate, true
}

// HasCollectionDate returns a boolean if a field has been set.
func (o *ServerStatisticsInner) HasCollectionDate() bool {
	if o != nil && o.CollectionDate != nil {
		return true
	}

	return false
}

// SetCollectionDate gets a reference to the given string and assigns it to the CollectionDate field.
func (o *ServerStatisticsInner) SetCollectionDate(v string) {
	o.CollectionDate = &v
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *ServerStatisticsInner) GetSchemaVersion() string {
	if o == nil || o.SchemaVersion == nil {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStatisticsInner) GetSchemaVersionOk() (*string, bool) {
	if o == nil || o.SchemaVersion == nil {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *ServerStatisticsInner) HasSchemaVersion() bool {
	if o != nil && o.SchemaVersion != nil {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *ServerStatisticsInner) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

// GetGhesVersion returns the GhesVersion field value if set, zero value otherwise.
func (o *ServerStatisticsInner) GetGhesVersion() string {
	if o == nil || o.GhesVersion == nil {
		var ret string
		return ret
	}
	return *o.GhesVersion
}

// GetGhesVersionOk returns a tuple with the GhesVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStatisticsInner) GetGhesVersionOk() (*string, bool) {
	if o == nil || o.GhesVersion == nil {
		return nil, false
	}
	return o.GhesVersion, true
}

// HasGhesVersion returns a boolean if a field has been set.
func (o *ServerStatisticsInner) HasGhesVersion() bool {
	if o != nil && o.GhesVersion != nil {
		return true
	}

	return false
}

// SetGhesVersion gets a reference to the given string and assigns it to the GhesVersion field.
func (o *ServerStatisticsInner) SetGhesVersion(v string) {
	o.GhesVersion = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *ServerStatisticsInner) GetHostName() string {
	if o == nil || o.HostName == nil {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStatisticsInner) GetHostNameOk() (*string, bool) {
	if o == nil || o.HostName == nil {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *ServerStatisticsInner) HasHostName() bool {
	if o != nil && o.HostName != nil {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *ServerStatisticsInner) SetHostName(v string) {
	o.HostName = &v
}

// GetGithubConnect returns the GithubConnect field value if set, zero value otherwise.
func (o *ServerStatisticsInner) GetGithubConnect() ServerStatisticsInnerGithubConnect {
	if o == nil || o.GithubConnect == nil {
		var ret ServerStatisticsInnerGithubConnect
		return ret
	}
	return *o.GithubConnect
}

// GetGithubConnectOk returns a tuple with the GithubConnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStatisticsInner) GetGithubConnectOk() (*ServerStatisticsInnerGithubConnect, bool) {
	if o == nil || o.GithubConnect == nil {
		return nil, false
	}
	return o.GithubConnect, true
}

// HasGithubConnect returns a boolean if a field has been set.
func (o *ServerStatisticsInner) HasGithubConnect() bool {
	if o != nil && o.GithubConnect != nil {
		return true
	}

	return false
}

// SetGithubConnect gets a reference to the given ServerStatisticsInnerGithubConnect and assigns it to the GithubConnect field.
func (o *ServerStatisticsInner) SetGithubConnect(v ServerStatisticsInnerGithubConnect) {
	o.GithubConnect = &v
}

// GetGheStats returns the GheStats field value if set, zero value otherwise.
func (o *ServerStatisticsInner) GetGheStats() ServerStatisticsInnerGheStats {
	if o == nil || o.GheStats == nil {
		var ret ServerStatisticsInnerGheStats
		return ret
	}
	return *o.GheStats
}

// GetGheStatsOk returns a tuple with the GheStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStatisticsInner) GetGheStatsOk() (*ServerStatisticsInnerGheStats, bool) {
	if o == nil || o.GheStats == nil {
		return nil, false
	}
	return o.GheStats, true
}

// HasGheStats returns a boolean if a field has been set.
func (o *ServerStatisticsInner) HasGheStats() bool {
	if o != nil && o.GheStats != nil {
		return true
	}

	return false
}

// SetGheStats gets a reference to the given ServerStatisticsInnerGheStats and assigns it to the GheStats field.
func (o *ServerStatisticsInner) SetGheStats(v ServerStatisticsInnerGheStats) {
	o.GheStats = &v
}

// GetDormantUsers returns the DormantUsers field value if set, zero value otherwise.
func (o *ServerStatisticsInner) GetDormantUsers() ServerStatisticsInnerDormantUsers {
	if o == nil || o.DormantUsers == nil {
		var ret ServerStatisticsInnerDormantUsers
		return ret
	}
	return *o.DormantUsers
}

// GetDormantUsersOk returns a tuple with the DormantUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerStatisticsInner) GetDormantUsersOk() (*ServerStatisticsInnerDormantUsers, bool) {
	if o == nil || o.DormantUsers == nil {
		return nil, false
	}
	return o.DormantUsers, true
}

// HasDormantUsers returns a boolean if a field has been set.
func (o *ServerStatisticsInner) HasDormantUsers() bool {
	if o != nil && o.DormantUsers != nil {
		return true
	}

	return false
}

// SetDormantUsers gets a reference to the given ServerStatisticsInnerDormantUsers and assigns it to the DormantUsers field.
func (o *ServerStatisticsInner) SetDormantUsers(v ServerStatisticsInnerDormantUsers) {
	o.DormantUsers = &v
}

func (o ServerStatisticsInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ServerId != nil {
		toSerialize["server_id"] = o.ServerId
	}
	if o.CollectionDate != nil {
		toSerialize["collection_date"] = o.CollectionDate
	}
	if o.SchemaVersion != nil {
		toSerialize["schema_version"] = o.SchemaVersion
	}
	if o.GhesVersion != nil {
		toSerialize["ghes_version"] = o.GhesVersion
	}
	if o.HostName != nil {
		toSerialize["host_name"] = o.HostName
	}
	if o.GithubConnect != nil {
		toSerialize["github_connect"] = o.GithubConnect
	}
	if o.GheStats != nil {
		toSerialize["ghe_stats"] = o.GheStats
	}
	if o.DormantUsers != nil {
		toSerialize["dormant_users"] = o.DormantUsers
	}
	return json.Marshal(toSerialize)
}

type NullableServerStatisticsInner struct {
	value *ServerStatisticsInner
	isSet bool
}

func (v NullableServerStatisticsInner) Get() *ServerStatisticsInner {
	return v.value
}

func (v *NullableServerStatisticsInner) Set(val *ServerStatisticsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableServerStatisticsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableServerStatisticsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerStatisticsInner(val *ServerStatisticsInner) *NullableServerStatisticsInner {
	return &NullableServerStatisticsInner{value: val, isSet: true}
}

func (v NullableServerStatisticsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerStatisticsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


