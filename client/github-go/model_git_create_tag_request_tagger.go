/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// GitCreateTagRequestTagger An object with information about the individual creating the tag.
type GitCreateTagRequestTagger struct {
	// The name of the author of the tag
	Name string `json:"name"`
	// The email of the author of the tag
	Email string `json:"email"`
	// When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Date *time.Time `json:"date,omitempty"`
}

// NewGitCreateTagRequestTagger instantiates a new GitCreateTagRequestTagger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitCreateTagRequestTagger(name string, email string) *GitCreateTagRequestTagger {
	this := GitCreateTagRequestTagger{}
	this.Name = name
	this.Email = email
	return &this
}

// NewGitCreateTagRequestTaggerWithDefaults instantiates a new GitCreateTagRequestTagger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitCreateTagRequestTaggerWithDefaults() *GitCreateTagRequestTagger {
	this := GitCreateTagRequestTagger{}
	return &this
}

// GetName returns the Name field value
func (o *GitCreateTagRequestTagger) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GitCreateTagRequestTagger) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GitCreateTagRequestTagger) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *GitCreateTagRequestTagger) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *GitCreateTagRequestTagger) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *GitCreateTagRequestTagger) SetEmail(v string) {
	o.Email = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *GitCreateTagRequestTagger) GetDate() time.Time {
	if o == nil || o.Date == nil {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateTagRequestTagger) GetDateOk() (*time.Time, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *GitCreateTagRequestTagger) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *GitCreateTagRequestTagger) SetDate(v time.Time) {
	o.Date = &v
}

func (o GitCreateTagRequestTagger) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

type NullableGitCreateTagRequestTagger struct {
	value *GitCreateTagRequestTagger
	isSet bool
}

func (v NullableGitCreateTagRequestTagger) Get() *GitCreateTagRequestTagger {
	return v.value
}

func (v *NullableGitCreateTagRequestTagger) Set(val *GitCreateTagRequestTagger) {
	v.value = val
	v.isSet = true
}

func (v NullableGitCreateTagRequestTagger) IsSet() bool {
	return v.isSet
}

func (v *NullableGitCreateTagRequestTagger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitCreateTagRequestTagger(val *GitCreateTagRequestTagger) *NullableGitCreateTagRequestTagger {
	return &NullableGitCreateTagRequestTagger{value: val, isSet: true}
}

func (v NullableGitCreateTagRequestTagger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitCreateTagRequestTagger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


