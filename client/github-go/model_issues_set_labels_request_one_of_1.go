/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// IssuesSetLabelsRequestOneOf1 struct for IssuesSetLabelsRequestOneOf1
type IssuesSetLabelsRequestOneOf1 struct {
	Labels []IssuesSetLabelsRequestOneOf1LabelsInner `json:"labels,omitempty"`
}

// NewIssuesSetLabelsRequestOneOf1 instantiates a new IssuesSetLabelsRequestOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesSetLabelsRequestOneOf1() *IssuesSetLabelsRequestOneOf1 {
	this := IssuesSetLabelsRequestOneOf1{}
	return &this
}

// NewIssuesSetLabelsRequestOneOf1WithDefaults instantiates a new IssuesSetLabelsRequestOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesSetLabelsRequestOneOf1WithDefaults() *IssuesSetLabelsRequestOneOf1 {
	this := IssuesSetLabelsRequestOneOf1{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *IssuesSetLabelsRequestOneOf1) GetLabels() []IssuesSetLabelsRequestOneOf1LabelsInner {
	if o == nil || o.Labels == nil {
		var ret []IssuesSetLabelsRequestOneOf1LabelsInner
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSetLabelsRequestOneOf1) GetLabelsOk() ([]IssuesSetLabelsRequestOneOf1LabelsInner, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *IssuesSetLabelsRequestOneOf1) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []IssuesSetLabelsRequestOneOf1LabelsInner and assigns it to the Labels field.
func (o *IssuesSetLabelsRequestOneOf1) SetLabels(v []IssuesSetLabelsRequestOneOf1LabelsInner) {
	o.Labels = v
}

func (o IssuesSetLabelsRequestOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	return json.Marshal(toSerialize)
}

type NullableIssuesSetLabelsRequestOneOf1 struct {
	value *IssuesSetLabelsRequestOneOf1
	isSet bool
}

func (v NullableIssuesSetLabelsRequestOneOf1) Get() *IssuesSetLabelsRequestOneOf1 {
	return v.value
}

func (v *NullableIssuesSetLabelsRequestOneOf1) Set(val *IssuesSetLabelsRequestOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesSetLabelsRequestOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesSetLabelsRequestOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesSetLabelsRequestOneOf1(val *IssuesSetLabelsRequestOneOf1) *NullableIssuesSetLabelsRequestOneOf1 {
	return &NullableIssuesSetLabelsRequestOneOf1{value: val, isSet: true}
}

func (v NullableIssuesSetLabelsRequestOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesSetLabelsRequestOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


