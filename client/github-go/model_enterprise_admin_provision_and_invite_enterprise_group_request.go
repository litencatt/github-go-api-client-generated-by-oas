/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest struct for EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest
type EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest struct {
	// The SCIM schema URIs.
	Schemas []string `json:"schemas"`
	// The name of the SCIM group. This must match the GitHub organization that the group maps to.
	DisplayName string `json:"displayName"`
	Members []EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestMembersInner `json:"members,omitempty"`
}

// NewEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest instantiates a new EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest(schemas []string, displayName string) *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest {
	this := EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest{}
	this.Schemas = schemas
	this.DisplayName = displayName
	return &this
}

// NewEnterpriseAdminProvisionAndInviteEnterpriseGroupRequestWithDefaults instantiates a new EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnterpriseAdminProvisionAndInviteEnterpriseGroupRequestWithDefaults() *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest {
	this := EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest{}
	return &this
}

// GetSchemas returns the Schemas field value
func (o *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) GetSchemas() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value
// and a boolean to check if the value has been set.
func (o *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) GetSchemasOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schemas, true
}

// SetSchemas sets field value
func (o *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) SetSchemas(v []string) {
	o.Schemas = v
}

// GetDisplayName returns the DisplayName field value
func (o *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) GetMembers() []EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestMembersInner {
	if o == nil || o.Members == nil {
		var ret []EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestMembersInner
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) GetMembersOk() ([]EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestMembersInner, bool) {
	if o == nil || o.Members == nil {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) HasMembers() bool {
	if o != nil && o.Members != nil {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestMembersInner and assigns it to the Members field.
func (o *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) SetMembers(v []EnterpriseAdminProvisionAndInviteEnterpriseGroupRequestMembersInner) {
	o.Members = v
}

func (o EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schemas"] = o.Schemas
	}
	if true {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Members != nil {
		toSerialize["members"] = o.Members
	}
	return json.Marshal(toSerialize)
}

type NullableEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest struct {
	value *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest
	isSet bool
}

func (v NullableEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) Get() *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest {
	return v.value
}

func (v *NullableEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) Set(val *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest(val *EnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) *NullableEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest {
	return &NullableEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest{value: val, isSet: true}
}

func (v NullableEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnterpriseAdminProvisionAndInviteEnterpriseGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


