/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// ActionsCacheList Repository actions caches
type ActionsCacheList struct {
	// Total number of caches
	TotalCount int32 `json:"total_count"`
	// Array of caches
	ActionsCaches []ActionsCacheListActionsCachesInner `json:"actions_caches"`
}

// NewActionsCacheList instantiates a new ActionsCacheList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionsCacheList(totalCount int32, actionsCaches []ActionsCacheListActionsCachesInner) *ActionsCacheList {
	this := ActionsCacheList{}
	this.TotalCount = totalCount
	this.ActionsCaches = actionsCaches
	return &this
}

// NewActionsCacheListWithDefaults instantiates a new ActionsCacheList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionsCacheListWithDefaults() *ActionsCacheList {
	this := ActionsCacheList{}
	return &this
}

// GetTotalCount returns the TotalCount field value
func (o *ActionsCacheList) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *ActionsCacheList) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *ActionsCacheList) SetTotalCount(v int32) {
	o.TotalCount = v
}

// GetActionsCaches returns the ActionsCaches field value
func (o *ActionsCacheList) GetActionsCaches() []ActionsCacheListActionsCachesInner {
	if o == nil {
		var ret []ActionsCacheListActionsCachesInner
		return ret
	}

	return o.ActionsCaches
}

// GetActionsCachesOk returns a tuple with the ActionsCaches field value
// and a boolean to check if the value has been set.
func (o *ActionsCacheList) GetActionsCachesOk() ([]ActionsCacheListActionsCachesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionsCaches, true
}

// SetActionsCaches sets field value
func (o *ActionsCacheList) SetActionsCaches(v []ActionsCacheListActionsCachesInner) {
	o.ActionsCaches = v
}

func (o ActionsCacheList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total_count"] = o.TotalCount
	}
	if true {
		toSerialize["actions_caches"] = o.ActionsCaches
	}
	return json.Marshal(toSerialize)
}

type NullableActionsCacheList struct {
	value *ActionsCacheList
	isSet bool
}

func (v NullableActionsCacheList) Get() *ActionsCacheList {
	return v.value
}

func (v *NullableActionsCacheList) Set(val *ActionsCacheList) {
	v.value = val
	v.isSet = true
}

func (v NullableActionsCacheList) IsSet() bool {
	return v.isSet
}

func (v *NullableActionsCacheList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionsCacheList(val *ActionsCacheList) *NullableActionsCacheList {
	return &NullableActionsCacheList{value: val, isSet: true}
}

func (v NullableActionsCacheList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionsCacheList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


