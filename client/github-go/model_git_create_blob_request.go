/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// GitCreateBlobRequest struct for GitCreateBlobRequest
type GitCreateBlobRequest struct {
	// The new blob's content.
	Content string `json:"content"`
	// The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.
	Encoding *string `json:"encoding,omitempty"`
}

// NewGitCreateBlobRequest instantiates a new GitCreateBlobRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitCreateBlobRequest(content string) *GitCreateBlobRequest {
	this := GitCreateBlobRequest{}
	this.Content = content
	var encoding string = "utf-8"
	this.Encoding = &encoding
	return &this
}

// NewGitCreateBlobRequestWithDefaults instantiates a new GitCreateBlobRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitCreateBlobRequestWithDefaults() *GitCreateBlobRequest {
	this := GitCreateBlobRequest{}
	var encoding string = "utf-8"
	this.Encoding = &encoding
	return &this
}

// GetContent returns the Content field value
func (o *GitCreateBlobRequest) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *GitCreateBlobRequest) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *GitCreateBlobRequest) SetContent(v string) {
	o.Content = v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *GitCreateBlobRequest) GetEncoding() string {
	if o == nil || o.Encoding == nil {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitCreateBlobRequest) GetEncodingOk() (*string, bool) {
	if o == nil || o.Encoding == nil {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *GitCreateBlobRequest) HasEncoding() bool {
	if o != nil && o.Encoding != nil {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *GitCreateBlobRequest) SetEncoding(v string) {
	o.Encoding = &v
}

func (o GitCreateBlobRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["content"] = o.Content
	}
	if o.Encoding != nil {
		toSerialize["encoding"] = o.Encoding
	}
	return json.Marshal(toSerialize)
}

type NullableGitCreateBlobRequest struct {
	value *GitCreateBlobRequest
	isSet bool
}

func (v NullableGitCreateBlobRequest) Get() *GitCreateBlobRequest {
	return v.value
}

func (v *NullableGitCreateBlobRequest) Set(val *GitCreateBlobRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGitCreateBlobRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGitCreateBlobRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitCreateBlobRequest(val *GitCreateBlobRequest) *NullableGitCreateBlobRequest {
	return &NullableGitCreateBlobRequest{value: val, isSet: true}
}

func (v NullableGitCreateBlobRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitCreateBlobRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


