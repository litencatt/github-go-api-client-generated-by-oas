/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// InteractionLimitResponse Interaction limit settings.
type InteractionLimitResponse struct {
	Limit InteractionGroup `json:"limit"`
	Origin string `json:"origin"`
	ExpiresAt time.Time `json:"expires_at"`
}

// NewInteractionLimitResponse instantiates a new InteractionLimitResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInteractionLimitResponse(limit InteractionGroup, origin string, expiresAt time.Time) *InteractionLimitResponse {
	this := InteractionLimitResponse{}
	this.Limit = limit
	this.Origin = origin
	this.ExpiresAt = expiresAt
	return &this
}

// NewInteractionLimitResponseWithDefaults instantiates a new InteractionLimitResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInteractionLimitResponseWithDefaults() *InteractionLimitResponse {
	this := InteractionLimitResponse{}
	return &this
}

// GetLimit returns the Limit field value
func (o *InteractionLimitResponse) GetLimit() InteractionGroup {
	if o == nil {
		var ret InteractionGroup
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *InteractionLimitResponse) GetLimitOk() (*InteractionGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *InteractionLimitResponse) SetLimit(v InteractionGroup) {
	o.Limit = v
}

// GetOrigin returns the Origin field value
func (o *InteractionLimitResponse) GetOrigin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value
// and a boolean to check if the value has been set.
func (o *InteractionLimitResponse) GetOriginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Origin, true
}

// SetOrigin sets field value
func (o *InteractionLimitResponse) SetOrigin(v string) {
	o.Origin = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *InteractionLimitResponse) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *InteractionLimitResponse) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *InteractionLimitResponse) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

func (o InteractionLimitResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["limit"] = o.Limit
	}
	if true {
		toSerialize["origin"] = o.Origin
	}
	if true {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	return json.Marshal(toSerialize)
}

type NullableInteractionLimitResponse struct {
	value *InteractionLimitResponse
	isSet bool
}

func (v NullableInteractionLimitResponse) Get() *InteractionLimitResponse {
	return v.value
}

func (v *NullableInteractionLimitResponse) Set(val *InteractionLimitResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInteractionLimitResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInteractionLimitResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInteractionLimitResponse(val *InteractionLimitResponse) *NullableInteractionLimitResponse {
	return &NullableInteractionLimitResponse{value: val, isSet: true}
}

func (v NullableInteractionLimitResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInteractionLimitResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


