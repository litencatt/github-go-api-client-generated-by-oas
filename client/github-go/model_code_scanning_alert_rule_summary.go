/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// CodeScanningAlertRuleSummary struct for CodeScanningAlertRuleSummary
type CodeScanningAlertRuleSummary struct {
	// A unique identifier for the rule used to detect the alert.
	Id NullableString `json:"id,omitempty"`
	// The name of the rule used to detect the alert.
	Name *string `json:"name,omitempty"`
	// A set of tags applicable for the rule.
	Tags []string `json:"tags,omitempty"`
	// The severity of the alert.
	Severity NullableString `json:"severity,omitempty"`
	// A short description of the rule used to detect the alert.
	Description *string `json:"description,omitempty"`
}

// NewCodeScanningAlertRuleSummary instantiates a new CodeScanningAlertRuleSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeScanningAlertRuleSummary() *CodeScanningAlertRuleSummary {
	this := CodeScanningAlertRuleSummary{}
	return &this
}

// NewCodeScanningAlertRuleSummaryWithDefaults instantiates a new CodeScanningAlertRuleSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeScanningAlertRuleSummaryWithDefaults() *CodeScanningAlertRuleSummary {
	this := CodeScanningAlertRuleSummary{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodeScanningAlertRuleSummary) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodeScanningAlertRuleSummary) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CodeScanningAlertRuleSummary) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CodeScanningAlertRuleSummary) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CodeScanningAlertRuleSummary) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CodeScanningAlertRuleSummary) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CodeScanningAlertRuleSummary) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertRuleSummary) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CodeScanningAlertRuleSummary) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CodeScanningAlertRuleSummary) SetName(v string) {
	o.Name = &v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodeScanningAlertRuleSummary) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodeScanningAlertRuleSummary) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *CodeScanningAlertRuleSummary) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *CodeScanningAlertRuleSummary) SetTags(v []string) {
	o.Tags = v
}

// GetSeverity returns the Severity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CodeScanningAlertRuleSummary) GetSeverity() string {
	if o == nil || o.Severity.Get() == nil {
		var ret string
		return ret
	}
	return *o.Severity.Get()
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CodeScanningAlertRuleSummary) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Severity.Get(), o.Severity.IsSet()
}

// HasSeverity returns a boolean if a field has been set.
func (o *CodeScanningAlertRuleSummary) HasSeverity() bool {
	if o != nil && o.Severity.IsSet() {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given NullableString and assigns it to the Severity field.
func (o *CodeScanningAlertRuleSummary) SetSeverity(v string) {
	o.Severity.Set(&v)
}
// SetSeverityNil sets the value for Severity to be an explicit nil
func (o *CodeScanningAlertRuleSummary) SetSeverityNil() {
	o.Severity.Set(nil)
}

// UnsetSeverity ensures that no value is present for Severity, not even an explicit nil
func (o *CodeScanningAlertRuleSummary) UnsetSeverity() {
	o.Severity.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CodeScanningAlertRuleSummary) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningAlertRuleSummary) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CodeScanningAlertRuleSummary) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CodeScanningAlertRuleSummary) SetDescription(v string) {
	o.Description = &v
}

func (o CodeScanningAlertRuleSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Severity.IsSet() {
		toSerialize["severity"] = o.Severity.Get()
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableCodeScanningAlertRuleSummary struct {
	value *CodeScanningAlertRuleSummary
	isSet bool
}

func (v NullableCodeScanningAlertRuleSummary) Get() *CodeScanningAlertRuleSummary {
	return v.value
}

func (v *NullableCodeScanningAlertRuleSummary) Set(val *CodeScanningAlertRuleSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeScanningAlertRuleSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeScanningAlertRuleSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeScanningAlertRuleSummary(val *CodeScanningAlertRuleSummary) *NullableCodeScanningAlertRuleSummary {
	return &NullableCodeScanningAlertRuleSummary{value: val, isSet: true}
}

func (v NullableCodeScanningAlertRuleSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeScanningAlertRuleSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


