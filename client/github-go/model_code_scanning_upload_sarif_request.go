/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// CodeScanningUploadSarifRequest struct for CodeScanningUploadSarifRequest
type CodeScanningUploadSarifRequest struct {
	// The SHA of the commit to which the analysis you are uploading relates.
	CommitSha string `json:"commit_sha"`
	// The full Git reference, formatted as `refs/heads/<branch name>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
	Ref string `json:"ref"`
	// A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \"[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning).\"
	Sarif string `json:"sarif"`
	// The base directory used in the analysis, as it appears in the SARIF file. This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
	CheckoutUri *string `json:"checkout_uri,omitempty"`
	// The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \"API\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
	ToolName *string `json:"tool_name,omitempty"`
}

// NewCodeScanningUploadSarifRequest instantiates a new CodeScanningUploadSarifRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeScanningUploadSarifRequest(commitSha string, ref string, sarif string) *CodeScanningUploadSarifRequest {
	this := CodeScanningUploadSarifRequest{}
	this.CommitSha = commitSha
	this.Ref = ref
	this.Sarif = sarif
	return &this
}

// NewCodeScanningUploadSarifRequestWithDefaults instantiates a new CodeScanningUploadSarifRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeScanningUploadSarifRequestWithDefaults() *CodeScanningUploadSarifRequest {
	this := CodeScanningUploadSarifRequest{}
	return &this
}

// GetCommitSha returns the CommitSha field value
func (o *CodeScanningUploadSarifRequest) GetCommitSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitSha
}

// GetCommitShaOk returns a tuple with the CommitSha field value
// and a boolean to check if the value has been set.
func (o *CodeScanningUploadSarifRequest) GetCommitShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitSha, true
}

// SetCommitSha sets field value
func (o *CodeScanningUploadSarifRequest) SetCommitSha(v string) {
	o.CommitSha = v
}

// GetRef returns the Ref field value
func (o *CodeScanningUploadSarifRequest) GetRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ref
}

// GetRefOk returns a tuple with the Ref field value
// and a boolean to check if the value has been set.
func (o *CodeScanningUploadSarifRequest) GetRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ref, true
}

// SetRef sets field value
func (o *CodeScanningUploadSarifRequest) SetRef(v string) {
	o.Ref = v
}

// GetSarif returns the Sarif field value
func (o *CodeScanningUploadSarifRequest) GetSarif() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sarif
}

// GetSarifOk returns a tuple with the Sarif field value
// and a boolean to check if the value has been set.
func (o *CodeScanningUploadSarifRequest) GetSarifOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sarif, true
}

// SetSarif sets field value
func (o *CodeScanningUploadSarifRequest) SetSarif(v string) {
	o.Sarif = v
}

// GetCheckoutUri returns the CheckoutUri field value if set, zero value otherwise.
func (o *CodeScanningUploadSarifRequest) GetCheckoutUri() string {
	if o == nil || o.CheckoutUri == nil {
		var ret string
		return ret
	}
	return *o.CheckoutUri
}

// GetCheckoutUriOk returns a tuple with the CheckoutUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningUploadSarifRequest) GetCheckoutUriOk() (*string, bool) {
	if o == nil || o.CheckoutUri == nil {
		return nil, false
	}
	return o.CheckoutUri, true
}

// HasCheckoutUri returns a boolean if a field has been set.
func (o *CodeScanningUploadSarifRequest) HasCheckoutUri() bool {
	if o != nil && o.CheckoutUri != nil {
		return true
	}

	return false
}

// SetCheckoutUri gets a reference to the given string and assigns it to the CheckoutUri field.
func (o *CodeScanningUploadSarifRequest) SetCheckoutUri(v string) {
	o.CheckoutUri = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *CodeScanningUploadSarifRequest) GetStartedAt() time.Time {
	if o == nil || o.StartedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningUploadSarifRequest) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || o.StartedAt == nil {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *CodeScanningUploadSarifRequest) HasStartedAt() bool {
	if o != nil && o.StartedAt != nil {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *CodeScanningUploadSarifRequest) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetToolName returns the ToolName field value if set, zero value otherwise.
func (o *CodeScanningUploadSarifRequest) GetToolName() string {
	if o == nil || o.ToolName == nil {
		var ret string
		return ret
	}
	return *o.ToolName
}

// GetToolNameOk returns a tuple with the ToolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeScanningUploadSarifRequest) GetToolNameOk() (*string, bool) {
	if o == nil || o.ToolName == nil {
		return nil, false
	}
	return o.ToolName, true
}

// HasToolName returns a boolean if a field has been set.
func (o *CodeScanningUploadSarifRequest) HasToolName() bool {
	if o != nil && o.ToolName != nil {
		return true
	}

	return false
}

// SetToolName gets a reference to the given string and assigns it to the ToolName field.
func (o *CodeScanningUploadSarifRequest) SetToolName(v string) {
	o.ToolName = &v
}

func (o CodeScanningUploadSarifRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["commit_sha"] = o.CommitSha
	}
	if true {
		toSerialize["ref"] = o.Ref
	}
	if true {
		toSerialize["sarif"] = o.Sarif
	}
	if o.CheckoutUri != nil {
		toSerialize["checkout_uri"] = o.CheckoutUri
	}
	if o.StartedAt != nil {
		toSerialize["started_at"] = o.StartedAt
	}
	if o.ToolName != nil {
		toSerialize["tool_name"] = o.ToolName
	}
	return json.Marshal(toSerialize)
}

type NullableCodeScanningUploadSarifRequest struct {
	value *CodeScanningUploadSarifRequest
	isSet bool
}

func (v NullableCodeScanningUploadSarifRequest) Get() *CodeScanningUploadSarifRequest {
	return v.value
}

func (v *NullableCodeScanningUploadSarifRequest) Set(val *CodeScanningUploadSarifRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeScanningUploadSarifRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeScanningUploadSarifRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeScanningUploadSarifRequest(val *CodeScanningUploadSarifRequest) *NullableCodeScanningUploadSarifRequest {
	return &NullableCodeScanningUploadSarifRequest{value: val, isSet: true}
}

func (v NullableCodeScanningUploadSarifRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeScanningUploadSarifRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


