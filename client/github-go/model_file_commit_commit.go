/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
)

// FileCommitCommit struct for FileCommitCommit
type FileCommitCommit struct {
	Sha *string `json:"sha,omitempty"`
	NodeId *string `json:"node_id,omitempty"`
	Url *string `json:"url,omitempty"`
	HtmlUrl *string `json:"html_url,omitempty"`
	Author *FileCommitCommitAuthor `json:"author,omitempty"`
	Committer *FileCommitCommitAuthor `json:"committer,omitempty"`
	Message *string `json:"message,omitempty"`
	Tree *FileCommitCommitTree `json:"tree,omitempty"`
	Parents []FileCommitCommitParentsInner `json:"parents,omitempty"`
	Verification *FileCommitCommitVerification `json:"verification,omitempty"`
}

// NewFileCommitCommit instantiates a new FileCommitCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileCommitCommit() *FileCommitCommit {
	this := FileCommitCommit{}
	return &this
}

// NewFileCommitCommitWithDefaults instantiates a new FileCommitCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileCommitCommitWithDefaults() *FileCommitCommit {
	this := FileCommitCommit{}
	return &this
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *FileCommitCommit) GetSha() string {
	if o == nil || o.Sha == nil {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileCommitCommit) GetShaOk() (*string, bool) {
	if o == nil || o.Sha == nil {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *FileCommitCommit) HasSha() bool {
	if o != nil && o.Sha != nil {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *FileCommitCommit) SetSha(v string) {
	o.Sha = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *FileCommitCommit) GetNodeId() string {
	if o == nil || o.NodeId == nil {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileCommitCommit) GetNodeIdOk() (*string, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *FileCommitCommit) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *FileCommitCommit) SetNodeId(v string) {
	o.NodeId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *FileCommitCommit) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileCommitCommit) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *FileCommitCommit) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *FileCommitCommit) SetUrl(v string) {
	o.Url = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *FileCommitCommit) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileCommitCommit) GetHtmlUrlOk() (*string, bool) {
	if o == nil || o.HtmlUrl == nil {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *FileCommitCommit) HasHtmlUrl() bool {
	if o != nil && o.HtmlUrl != nil {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *FileCommitCommit) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *FileCommitCommit) GetAuthor() FileCommitCommitAuthor {
	if o == nil || o.Author == nil {
		var ret FileCommitCommitAuthor
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileCommitCommit) GetAuthorOk() (*FileCommitCommitAuthor, bool) {
	if o == nil || o.Author == nil {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *FileCommitCommit) HasAuthor() bool {
	if o != nil && o.Author != nil {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given FileCommitCommitAuthor and assigns it to the Author field.
func (o *FileCommitCommit) SetAuthor(v FileCommitCommitAuthor) {
	o.Author = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *FileCommitCommit) GetCommitter() FileCommitCommitAuthor {
	if o == nil || o.Committer == nil {
		var ret FileCommitCommitAuthor
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileCommitCommit) GetCommitterOk() (*FileCommitCommitAuthor, bool) {
	if o == nil || o.Committer == nil {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *FileCommitCommit) HasCommitter() bool {
	if o != nil && o.Committer != nil {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given FileCommitCommitAuthor and assigns it to the Committer field.
func (o *FileCommitCommit) SetCommitter(v FileCommitCommitAuthor) {
	o.Committer = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *FileCommitCommit) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileCommitCommit) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *FileCommitCommit) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *FileCommitCommit) SetMessage(v string) {
	o.Message = &v
}

// GetTree returns the Tree field value if set, zero value otherwise.
func (o *FileCommitCommit) GetTree() FileCommitCommitTree {
	if o == nil || o.Tree == nil {
		var ret FileCommitCommitTree
		return ret
	}
	return *o.Tree
}

// GetTreeOk returns a tuple with the Tree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileCommitCommit) GetTreeOk() (*FileCommitCommitTree, bool) {
	if o == nil || o.Tree == nil {
		return nil, false
	}
	return o.Tree, true
}

// HasTree returns a boolean if a field has been set.
func (o *FileCommitCommit) HasTree() bool {
	if o != nil && o.Tree != nil {
		return true
	}

	return false
}

// SetTree gets a reference to the given FileCommitCommitTree and assigns it to the Tree field.
func (o *FileCommitCommit) SetTree(v FileCommitCommitTree) {
	o.Tree = &v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *FileCommitCommit) GetParents() []FileCommitCommitParentsInner {
	if o == nil || o.Parents == nil {
		var ret []FileCommitCommitParentsInner
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileCommitCommit) GetParentsOk() ([]FileCommitCommitParentsInner, bool) {
	if o == nil || o.Parents == nil {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *FileCommitCommit) HasParents() bool {
	if o != nil && o.Parents != nil {
		return true
	}

	return false
}

// SetParents gets a reference to the given []FileCommitCommitParentsInner and assigns it to the Parents field.
func (o *FileCommitCommit) SetParents(v []FileCommitCommitParentsInner) {
	o.Parents = v
}

// GetVerification returns the Verification field value if set, zero value otherwise.
func (o *FileCommitCommit) GetVerification() FileCommitCommitVerification {
	if o == nil || o.Verification == nil {
		var ret FileCommitCommitVerification
		return ret
	}
	return *o.Verification
}

// GetVerificationOk returns a tuple with the Verification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileCommitCommit) GetVerificationOk() (*FileCommitCommitVerification, bool) {
	if o == nil || o.Verification == nil {
		return nil, false
	}
	return o.Verification, true
}

// HasVerification returns a boolean if a field has been set.
func (o *FileCommitCommit) HasVerification() bool {
	if o != nil && o.Verification != nil {
		return true
	}

	return false
}

// SetVerification gets a reference to the given FileCommitCommitVerification and assigns it to the Verification field.
func (o *FileCommitCommit) SetVerification(v FileCommitCommitVerification) {
	o.Verification = &v
}

func (o FileCommitCommit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Sha != nil {
		toSerialize["sha"] = o.Sha
	}
	if o.NodeId != nil {
		toSerialize["node_id"] = o.NodeId
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.HtmlUrl != nil {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if o.Author != nil {
		toSerialize["author"] = o.Author
	}
	if o.Committer != nil {
		toSerialize["committer"] = o.Committer
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Tree != nil {
		toSerialize["tree"] = o.Tree
	}
	if o.Parents != nil {
		toSerialize["parents"] = o.Parents
	}
	if o.Verification != nil {
		toSerialize["verification"] = o.Verification
	}
	return json.Marshal(toSerialize)
}

type NullableFileCommitCommit struct {
	value *FileCommitCommit
	isSet bool
}

func (v NullableFileCommitCommit) Get() *FileCommitCommit {
	return v.value
}

func (v *NullableFileCommitCommit) Set(val *FileCommitCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableFileCommitCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableFileCommitCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileCommitCommit(val *FileCommitCommit) *NullableFileCommitCommit {
	return &NullableFileCommitCommit{value: val, isSet: true}
}

func (v NullableFileCommitCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileCommitCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


