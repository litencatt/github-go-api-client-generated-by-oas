/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// IssueComment Comments provide a way for people to collaborate on an issue.
type IssueComment struct {
	// Unique identifier of the issue comment
	Id int32 `json:"id"`
	NodeId string `json:"node_id"`
	// URL for the issue comment
	Url string `json:"url"`
	// Contents of the issue comment
	Body *string `json:"body,omitempty"`
	BodyText *string `json:"body_text,omitempty"`
	BodyHtml *string `json:"body_html,omitempty"`
	HtmlUrl string `json:"html_url"`
	User NullableNullableSimpleUser `json:"user"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	IssueUrl string `json:"issue_url"`
	AuthorAssociation AuthorAssociation `json:"author_association"`
	PerformedViaGithubApp NullableNullableIntegration `json:"performed_via_github_app,omitempty"`
	Reactions *ReactionRollup `json:"reactions,omitempty"`
}

// NewIssueComment instantiates a new IssueComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueComment(id int32, nodeId string, url string, htmlUrl string, user NullableNullableSimpleUser, createdAt time.Time, updatedAt time.Time, issueUrl string, authorAssociation AuthorAssociation) *IssueComment {
	this := IssueComment{}
	this.Id = id
	this.NodeId = nodeId
	this.Url = url
	this.HtmlUrl = htmlUrl
	this.User = user
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.IssueUrl = issueUrl
	this.AuthorAssociation = authorAssociation
	return &this
}

// NewIssueCommentWithDefaults instantiates a new IssueComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueCommentWithDefaults() *IssueComment {
	this := IssueComment{}
	return &this
}

// GetId returns the Id field value
func (o *IssueComment) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IssueComment) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IssueComment) SetId(v int32) {
	o.Id = v
}

// GetNodeId returns the NodeId field value
func (o *IssueComment) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *IssueComment) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *IssueComment) SetNodeId(v string) {
	o.NodeId = v
}

// GetUrl returns the Url field value
func (o *IssueComment) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *IssueComment) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *IssueComment) SetUrl(v string) {
	o.Url = v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *IssueComment) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueComment) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *IssueComment) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *IssueComment) SetBody(v string) {
	o.Body = &v
}

// GetBodyText returns the BodyText field value if set, zero value otherwise.
func (o *IssueComment) GetBodyText() string {
	if o == nil || o.BodyText == nil {
		var ret string
		return ret
	}
	return *o.BodyText
}

// GetBodyTextOk returns a tuple with the BodyText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueComment) GetBodyTextOk() (*string, bool) {
	if o == nil || o.BodyText == nil {
		return nil, false
	}
	return o.BodyText, true
}

// HasBodyText returns a boolean if a field has been set.
func (o *IssueComment) HasBodyText() bool {
	if o != nil && o.BodyText != nil {
		return true
	}

	return false
}

// SetBodyText gets a reference to the given string and assigns it to the BodyText field.
func (o *IssueComment) SetBodyText(v string) {
	o.BodyText = &v
}

// GetBodyHtml returns the BodyHtml field value if set, zero value otherwise.
func (o *IssueComment) GetBodyHtml() string {
	if o == nil || o.BodyHtml == nil {
		var ret string
		return ret
	}
	return *o.BodyHtml
}

// GetBodyHtmlOk returns a tuple with the BodyHtml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueComment) GetBodyHtmlOk() (*string, bool) {
	if o == nil || o.BodyHtml == nil {
		return nil, false
	}
	return o.BodyHtml, true
}

// HasBodyHtml returns a boolean if a field has been set.
func (o *IssueComment) HasBodyHtml() bool {
	if o != nil && o.BodyHtml != nil {
		return true
	}

	return false
}

// SetBodyHtml gets a reference to the given string and assigns it to the BodyHtml field.
func (o *IssueComment) SetBodyHtml(v string) {
	o.BodyHtml = &v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *IssueComment) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *IssueComment) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *IssueComment) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetUser returns the User field value
// If the value is explicit nil, the zero value for NullableSimpleUser will be returned
func (o *IssueComment) GetUser() NullableSimpleUser {
	if o == nil || o.User.Get() == nil {
		var ret NullableSimpleUser
		return ret
	}

	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueComment) GetUserOk() (*NullableSimpleUser, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// SetUser sets field value
func (o *IssueComment) SetUser(v NullableSimpleUser) {
	o.User.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *IssueComment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *IssueComment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *IssueComment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *IssueComment) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *IssueComment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *IssueComment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetIssueUrl returns the IssueUrl field value
func (o *IssueComment) GetIssueUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueUrl
}

// GetIssueUrlOk returns a tuple with the IssueUrl field value
// and a boolean to check if the value has been set.
func (o *IssueComment) GetIssueUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueUrl, true
}

// SetIssueUrl sets field value
func (o *IssueComment) SetIssueUrl(v string) {
	o.IssueUrl = v
}

// GetAuthorAssociation returns the AuthorAssociation field value
func (o *IssueComment) GetAuthorAssociation() AuthorAssociation {
	if o == nil {
		var ret AuthorAssociation
		return ret
	}

	return o.AuthorAssociation
}

// GetAuthorAssociationOk returns a tuple with the AuthorAssociation field value
// and a boolean to check if the value has been set.
func (o *IssueComment) GetAuthorAssociationOk() (*AuthorAssociation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorAssociation, true
}

// SetAuthorAssociation sets field value
func (o *IssueComment) SetAuthorAssociation(v AuthorAssociation) {
	o.AuthorAssociation = v
}

// GetPerformedViaGithubApp returns the PerformedViaGithubApp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IssueComment) GetPerformedViaGithubApp() NullableIntegration {
	if o == nil || o.PerformedViaGithubApp.Get() == nil {
		var ret NullableIntegration
		return ret
	}
	return *o.PerformedViaGithubApp.Get()
}

// GetPerformedViaGithubAppOk returns a tuple with the PerformedViaGithubApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IssueComment) GetPerformedViaGithubAppOk() (*NullableIntegration, bool) {
	if o == nil {
		return nil, false
	}
	return o.PerformedViaGithubApp.Get(), o.PerformedViaGithubApp.IsSet()
}

// HasPerformedViaGithubApp returns a boolean if a field has been set.
func (o *IssueComment) HasPerformedViaGithubApp() bool {
	if o != nil && o.PerformedViaGithubApp.IsSet() {
		return true
	}

	return false
}

// SetPerformedViaGithubApp gets a reference to the given NullableNullableIntegration and assigns it to the PerformedViaGithubApp field.
func (o *IssueComment) SetPerformedViaGithubApp(v NullableIntegration) {
	o.PerformedViaGithubApp.Set(&v)
}
// SetPerformedViaGithubAppNil sets the value for PerformedViaGithubApp to be an explicit nil
func (o *IssueComment) SetPerformedViaGithubAppNil() {
	o.PerformedViaGithubApp.Set(nil)
}

// UnsetPerformedViaGithubApp ensures that no value is present for PerformedViaGithubApp, not even an explicit nil
func (o *IssueComment) UnsetPerformedViaGithubApp() {
	o.PerformedViaGithubApp.Unset()
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *IssueComment) GetReactions() ReactionRollup {
	if o == nil || o.Reactions == nil {
		var ret ReactionRollup
		return ret
	}
	return *o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueComment) GetReactionsOk() (*ReactionRollup, bool) {
	if o == nil || o.Reactions == nil {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *IssueComment) HasReactions() bool {
	if o != nil && o.Reactions != nil {
		return true
	}

	return false
}

// SetReactions gets a reference to the given ReactionRollup and assigns it to the Reactions field.
func (o *IssueComment) SetReactions(v ReactionRollup) {
	o.Reactions = &v
}

func (o IssueComment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["node_id"] = o.NodeId
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.BodyText != nil {
		toSerialize["body_text"] = o.BodyText
	}
	if o.BodyHtml != nil {
		toSerialize["body_html"] = o.BodyHtml
	}
	if true {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if true {
		toSerialize["user"] = o.User.Get()
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["issue_url"] = o.IssueUrl
	}
	if true {
		toSerialize["author_association"] = o.AuthorAssociation
	}
	if o.PerformedViaGithubApp.IsSet() {
		toSerialize["performed_via_github_app"] = o.PerformedViaGithubApp.Get()
	}
	if o.Reactions != nil {
		toSerialize["reactions"] = o.Reactions
	}
	return json.Marshal(toSerialize)
}

type NullableIssueComment struct {
	value *IssueComment
	isSet bool
}

func (v NullableIssueComment) Get() *IssueComment {
	return v.value
}

func (v *NullableIssueComment) Set(val *IssueComment) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueComment) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueComment(val *IssueComment) *NullableIssueComment {
	return &NullableIssueComment{value: val, isSet: true}
}

func (v NullableIssueComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


