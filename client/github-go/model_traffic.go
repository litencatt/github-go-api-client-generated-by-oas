/*
GitHub v3 REST API

GitHub's v3 REST API.

API version: 1.1.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github

import (
	"encoding/json"
	"time"
)

// Traffic struct for Traffic
type Traffic struct {
	Timestamp time.Time `json:"timestamp"`
	Uniques int32 `json:"uniques"`
	Count int32 `json:"count"`
}

// NewTraffic instantiates a new Traffic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraffic(timestamp time.Time, uniques int32, count int32) *Traffic {
	this := Traffic{}
	this.Timestamp = timestamp
	this.Uniques = uniques
	this.Count = count
	return &this
}

// NewTrafficWithDefaults instantiates a new Traffic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrafficWithDefaults() *Traffic {
	this := Traffic{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *Traffic) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Traffic) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Traffic) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetUniques returns the Uniques field value
func (o *Traffic) GetUniques() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Uniques
}

// GetUniquesOk returns a tuple with the Uniques field value
// and a boolean to check if the value has been set.
func (o *Traffic) GetUniquesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uniques, true
}

// SetUniques sets field value
func (o *Traffic) SetUniques(v int32) {
	o.Uniques = v
}

// GetCount returns the Count field value
func (o *Traffic) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *Traffic) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *Traffic) SetCount(v int32) {
	o.Count = v
}

func (o Traffic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["uniques"] = o.Uniques
	}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableTraffic struct {
	value *Traffic
	isSet bool
}

func (v NullableTraffic) Get() *Traffic {
	return v.value
}

func (v *NullableTraffic) Set(val *Traffic) {
	v.value = val
	v.isSet = true
}

func (v NullableTraffic) IsSet() bool {
	return v.isSet
}

func (v *NullableTraffic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraffic(val *Traffic) *NullableTraffic {
	return &NullableTraffic{value: val, isSet: true}
}

func (v NullableTraffic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraffic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


